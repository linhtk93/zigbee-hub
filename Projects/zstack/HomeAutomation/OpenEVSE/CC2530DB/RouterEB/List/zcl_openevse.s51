///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               25/Nov/2016  14:12:39
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D HAL_UART=TRUE -D
//        HAL_UART_DMA_RX_MAX=64 -D HAL_PA_LNA_CC2592 -D NV_INIT -D NV_RESTORE
//        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
//        ZCL_BASIC -D ZCL_ON_OFF -D ZCL_ELECTRICAL_MEASUREMENT -lC "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List\zcl_openevse.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_openevse

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", "qualifiers"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V5
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?FLT_TO_UL
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GT_X
        EXTERN ?UL_TO_FLT
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclOpenEvse_BasicResetCB::?relay`,0203H
        FUNCTION `??zclOpenEvse_EVSEResend::?relay`,0203H
        FUNCTION `??zclOpenEvse_EVSEWriteCmd::?relay`,0203H
        PUBLIC `??zclOpenEvse_Init::?relay`
        FUNCTION `??zclOpenEvse_Init::?relay`,0203H
        FUNCTION `??zclOpenEvse_OnOffCB::?relay`,0203H
        FUNCTION `??zclOpenEvse_UARTCallback::?relay`,0203H
        FUNCTION `??zclOpenEvse_UARTParse::?relay`,0203H
        PUBLIC `??zclOpenEvse_event_loop::?relay`
        FUNCTION `??zclOpenEvse_event_loop::?relay`,0203H
        FUNCTION `??zclOpenEvse_nibbletohex::?relay`,0203H
        FUNCTION `??zclOpenEvse_sendEnergy::?relay`,0203H
        FUNCTION `??zclOpenEvse_sendPower::?relay`,0203H
        FUNCTION `??zclOpenEvse_sendState::?relay`,0203H
        FUNCTION `??zclOpenEvse_sendTemp::?relay`,0203H
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_1f4
        PUBWEAK __Constant_3991a2b4
        PUBWEAK __Constant_3a83126f
        PUBWEAK __Constant_3c23d70a
        PUBWEAK __Constant_3dcccccd
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_c8
        PUBWEAK __Constant_ffffff
        PUBWEAK __Constant_ffffffff
        PUBLIC bindingInClusters
        PUBLIC evseCode
        PUBLIC gPermitDuration
        PUBLIC rxData
        PUBLIC rxIndex
        FUNCTION zclOpenEvse_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclOpenEvse_DstAddr
        FUNCTION zclOpenEvse_EVSEResend,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclOpenEvse_EVSEWriteCmd,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zclOpenEvse_Init
        FUNCTION zclOpenEvse_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC zclOpenEvse_NwkState
        FUNCTION zclOpenEvse_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclOpenEvse_TaskID
        FUNCTION zclOpenEvse_UARTCallback,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        FUNCTION zclOpenEvse_UARTParse,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC zclOpenEvse_event_loop
        FUNCTION zclOpenEvse_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zclOpenEvse_evseCmd
        PUBLIC zclOpenEvse_evseResendCtr
        FUNCTION zclOpenEvse_nibbletohex,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclOpenEvse_powerLevel
        PUBLIC zclOpenEvse_reportCmdAmps
        PUBLIC zclOpenEvse_reportCmdEnergyDemand
        PUBLIC zclOpenEvse_reportCmdEnergySum
        PUBLIC zclOpenEvse_reportCmdState
        PUBLIC zclOpenEvse_reportCmdTemp
        PUBLIC zclOpenEvse_reportCmdVolts
        PUBLIC zclOpenEvse_reportCmdWatts
        PUBLIC zclOpenEvse_reportEnergyMax
        PUBLIC zclOpenEvse_reportPowerChangedAmps
        PUBLIC zclOpenEvse_reportPowerChangedVolts
        PUBLIC zclOpenEvse_reportPowerChangedWatts
        PUBLIC zclOpenEvse_reportPowerMax
        PUBLIC zclOpenEvse_reportPowerMin
        PUBLIC zclOpenEvse_reportTempMax
        FUNCTION zclOpenEvse_sendEnergy,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclOpenEvse_sendPower,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclOpenEvse_sendState,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclOpenEvse_sendTemp,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclOpenEvse_seqNum
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalFlashErase       SYMBOL "HalFlashErase"
`??HalFlashErase::?relay` SYMBOL "?relay", HalFlashErase
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
abs                 SYMBOL "abs"
`??abs::?relay`     SYMBOL "?relay", abs
atoi                SYMBOL "atoi"
`??atoi::?relay`    SYMBOL "?relay", atoi
atol                SYMBOL "atol"
`??atol::?relay`    SYMBOL "?relay", atol
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf
strcpy              SYMBOL "strcpy"
`??strcpy::?relay`  SYMBOL "?relay", strcpy
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
strncmp             SYMBOL "strncmp"
`??strncmp::?relay` SYMBOL "?relay", strncmp
strtok              SYMBOL "strtok"
`??strtok::?relay`  SYMBOL "?relay", strtok
strtol              SYMBOL "strtol"
`??strtol::?relay`  SYMBOL "?relay", strtol
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclOpenEvse_Init    SYMBOL "zclOpenEvse_Init"
`??zclOpenEvse_Init::?relay` SYMBOL "?relay", zclOpenEvse_Init
zclOpenEvse_event_loop SYMBOL "zclOpenEvse_event_loop"
`??zclOpenEvse_event_loop::?relay` SYMBOL "?relay", zclOpenEvse_event_loop

        EXTERN `??HalFlashErase::?relay`
        FUNCTION `??HalFlashErase::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??abs::?relay`
        FUNCTION `??abs::?relay`,00H
        EXTERN `??atoi::?relay`
        FUNCTION `??atoi::?relay`,00H
        EXTERN `??atol::?relay`
        FUNCTION `??atol::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,00H
        EXTERN `??strcpy::?relay`
        FUNCTION `??strcpy::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN `??strncmp::?relay`
        FUNCTION `??strncmp::?relay`,00H
        EXTERN `??strtok::?relay`
        FUNCTION `??strtok::?relay`,00H
        EXTERN `??strtol::?relay`
        FUNCTION `??strtol::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalFlashErase
        FUNCTION HalFlashErase,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN abs
        FUNCTION abs,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atoi
        FUNCTION atoi,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atol
        FUNCTION atol,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strncmp
        FUNCTION strncmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strtok
        FUNCTION strtok,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strtol
        FUNCTION strtol,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclOpenEvse_Attrs
        EXTERN zclOpenEvse_BlAttrs
        EXTERN zclOpenEvse_BlNumAttributes
        EXTERN zclOpenEvse_BlSimpleDesc
        EXTERN zclOpenEvse_IdentifyTime
        EXTERN zclOpenEvse_NumAttributes
        EXTERN zclOpenEvse_OnOff
        EXTERN zclOpenEvse_SimpleDesc
        EXTERN zclOpenEvse_ampsScaled
        EXTERN zclOpenEvse_backlight
        EXTERN zclOpenEvse_energyDemand
        EXTERN zclOpenEvse_energyLimit
        EXTERN zclOpenEvse_energySum
        EXTERN zclOpenEvse_state
        EXTERN zclOpenEvse_temperature
        EXTERN zclOpenEvse_voltsScaled
        EXTERN zclOpenEvse_wattsScaled
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_openevse.c
//    3 
//    4   Description:    Zigbee Cluster Library - device application for OpenEVSE.
//    5 
//    6 
//    7   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//    8   Copyright 2015 Ryan Press
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 **************************************************************************************************/
//   38 
//   39 /*********************************************************************
//   40  * INCLUDES
//   41  */
//   42 #include <string.h>
//   43 #include <stdlib.h>
//   44 #include <stdarg.h>
//   45 #include <stdio.h>
//   46 
//   47 #include "ZComDef.h"
//   48 #include "OSAL.h"
//   49 #include "AF.h"
//   50 #include "ZDApp.h"
//   51 #include "ZDObject.h"
//   52 #include "MT_SYS.h"
//   53 
//   54 #include "nwk_util.h"
//   55 
//   56 #include "zcl.h"
//   57 #include "zcl_general.h"
//   58 #include "zcl_ha.h"
//   59 #include "zcl_ezmode.h"
//   60 #include "zcl_diagnostic.h"
//   61 #include "zcl_electrical_measurement.h"
//   62 #include "zcl_openevse.h"
//   63 
//   64 #include "onboard.h"
//   65 
//   66 /* HAL */
//   67 #include "hal_lcd.h"
//   68 #include "hal_led.h"
//   69 #include "hal_key.h"
//   70 #include "hal_flash.h"
//   71 
//   72 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   73       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   74 #include "zgp_translationtable.h"
//   75   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   76     #define ZGP_AUTO_TT
//   77   #endif
//   78 #endif
//   79 
//   80 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//   81 #include "math.h"
//   82 #include "hal_timer.h"
//   83 #endif
//   84 
//   85 #include "NLMEDE.h"
//   86 
//   87 /*********************************************************************
//   88  * MACROS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 enum evseCmd { EVSE_CMD_NONE, EVSE_CMD_STATE, EVSE_CMD_WIFI, EVSE_CMD_SLEEP, EVSE_CMD_ENABLE,
//   96                   EVSE_CMD_LCDOFF, EVSE_CMD_LCDRGB, EVSE_CMD_LCDTEAL, EVSE_CMD_GETPOWER,
//   97                   EVSE_CMD_GETTEMP, EVSE_CMD_GETENERGY, EVSE_CMD_GETSTATE, EVSE_CMD_GETLEVEL,
//   98                   EVSE_CMD_SETLIMIT };
//   99 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  100 const char * evseCode[] = { "", "ST", "WF", "FS", "FE",
evseCode:
        DATA8
        DS 28
        REQUIRE `?<Initializer for evseCode>`
        REQUIRE __INIT_XDATA_I
//  101                             "FB 0", "S0 1", "FB 6", "GG",
//  102                             "GP", "GU", "GS", "GL",
//  103                             "SH" };
//  104 
//  105 #define POLL_EVSE_PERIOD 200
//  106 #define OPENEVSE_BL_NV 0x0401
//  107 #define OPENEVSE_LIMIT_NV 0x0402
//  108 #define OPENEVSE_L2_VOLTS 2400
//  109 #define OPENEVSE_L1_VOLTS 1200
//  110 
//  111 /*********************************************************************
//  112  * TYPEDEFS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * GLOBAL VARIABLES
//  117  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 byte zclOpenEvse_TaskID;
zclOpenEvse_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  119 uint8 zclOpenEvse_seqNum = 0;
zclOpenEvse_seqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  120 
//  121 /*********************************************************************
//  122  * GLOBAL FUNCTIONS
//  123  */
//  124 
//  125 /*********************************************************************
//  126  * LOCAL VARIABLES
//  127  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  128 afAddrType_t zclOpenEvse_DstAddr;
zclOpenEvse_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  129 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  130 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  131 {
//  132   ZCL_CLUSTER_ID_GEN_ON_OFF
//  133 };
//  134 #define zclOpenEvse_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  135 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  138 devStates_t zclOpenEvse_NwkState = DEV_INIT;
zclOpenEvse_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclOpenEvse_NwkState>`
        REQUIRE __INIT_XDATA_I
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 uint8 zclOpenEvse_evseResendCtr = 0;
zclOpenEvse_evseResendCtr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 zclOpenEvse_evseCmd = EVSE_CMD_NONE;
zclOpenEvse_evseCmd:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 zclOpenEvse_powerLevel = 0;
zclOpenEvse_powerLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  145 uint32 zclOpenEvse_reportPowerMin =  2000; // 2 seconds
zclOpenEvse_reportPowerMin:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportPowerMin>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  146 uint32 zclOpenEvse_reportPowerMax =  60000; // 1 minute
zclOpenEvse_reportPowerMax:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportPowerMax>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  147 uint32 zclOpenEvse_reportTempMax =   120000; // 2 minutes
zclOpenEvse_reportTempMax:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportTempMax>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 uint32 zclOpenEvse_reportEnergyMax = 180000; // 3 minutes
zclOpenEvse_reportEnergyMax:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportEnergyMax>`
        REQUIRE __INIT_XDATA_I
//  149 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  150 uint32 zclOpenEvse_reportPowerChangedVolts = 5 * 10.0; // 5 volts
zclOpenEvse_reportPowerChangedVolts:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  151 uint32 zclOpenEvse_reportPowerChangedAmps =  1 * 10.0; // 1 amp
zclOpenEvse_reportPowerChangedAmps:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang_1`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 uint32 zclOpenEvse_reportPowerChangedWatts = 200 / 10.0; // 200 watts
zclOpenEvse_reportPowerChangedWatts:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang_2`
        REQUIRE __INIT_XDATA_I
//  153 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  154 zclReportCmd_t * zclOpenEvse_reportCmdVolts;
zclOpenEvse_reportCmdVolts:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  155 zclReportCmd_t * zclOpenEvse_reportCmdAmps;
zclOpenEvse_reportCmdAmps:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  156 zclReportCmd_t * zclOpenEvse_reportCmdWatts;
zclOpenEvse_reportCmdWatts:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  157 zclReportCmd_t * zclOpenEvse_reportCmdTemp;
zclOpenEvse_reportCmdTemp:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  158 zclReportCmd_t * zclOpenEvse_reportCmdEnergySum;
zclOpenEvse_reportCmdEnergySum:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  159 zclReportCmd_t * zclOpenEvse_reportCmdEnergyDemand;
zclOpenEvse_reportCmdEnergyDemand:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  160 zclReportCmd_t * zclOpenEvse_reportCmdState;
zclOpenEvse_reportCmdState:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  161 
//  162 /*********************************************************************
//  163  * LOCAL FUNCTIONS
//  164  */
//  165 static void zclOpenEvse_BasicResetCB(void);
//  166 static void zclOpenEvse_OnOffCB(uint8 cmd);
//  167 static void zclOpenEvse_Identify(void);
//  168 
//  169 static void zclOpenEvse_sendPower(void);
//  170 static void zclOpenEvse_sendTemp(void);
//  171 static void zclOpenEvse_sendEnergy(void);
//  172 static void zclOpenEvse_sendState(void);
//  173 static void zclOpenEvse_zigbeeReset(void);
//  174 static void zclOpenEvse_EVSESetLimit(uint32 limit);
//  175 static void zclOpenEvse_EVSEWriteCmd(uint8 command, uint8 numArgs, ...);
//  176 static void zclOpenEvse_EVSEResend(void);
//  177 static void zclOpenEvse_UARTInit(void);
//  178 static void zclOpenEvse_UARTCallback(uint8 port, uint8 event);
//  179 static void zclOpenEvse_UARTParse(char * rxData);
//  180 static uint8 zclOpenEvse_nibbletohex(uint8 value);
//  181 static uint16 zclOpenEvse_u8tohex(uint8 value);
//  182 
//  183 // Functions to process ZCL Foundation incoming Command/Response messages
//  184 static void zclOpenEvse_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  185 #ifdef ZCL_READ
//  186 static uint8 zclOpenEvse_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  187 #endif
//  188 #ifdef ZCL_WRITE
//  189 static uint8 zclOpenEvse_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  190 #endif
//  191 static uint8 zclOpenEvse_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  192 #ifdef ZCL_DISCOVER
//  193 static uint8 zclOpenEvse_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  194 static uint8 zclOpenEvse_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  195 static uint8 zclOpenEvse_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  196 #endif
//  197 
//  198 /*********************************************************************
//  199  * STATUS STRINGS
//  200  */
//  201 /*********************************************************************
//  202  * ZCL General Profile Callback table
//  203  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  204 static zclGeneral_AppCallbacks_t zclOpenEvse_CmdCallbacks =
zclOpenEvse_CmdCallbacks:
        DATA8
        DS 20
        REQUIRE `?<Initializer for zclOpenEvse_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  205 {
//  206   zclOpenEvse_BasicResetCB,            // Basic Cluster Reset command
//  207   NULL,                                   // Identify command
//  208 #ifdef ZCL_EZMODE
//  209   NULL,                                   // Identify EZ-Mode Invoke command
//  210   NULL,                                   // Identify Update Commission State command
//  211 #endif
//  212   NULL,                                   // Identify Trigger Effect command
//  213   NULL,                                   // Identify Query Response command
//  214   zclOpenEvse_OnOffCB,                 // On/Off cluster commands
//  215   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  216   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  217   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  218 #ifdef ZCL_LEVEL_CTRL
//  219   NULL,                                   // Level Control Move to Level command
//  220   NULL,                                   // Level Control Move command
//  221   NULL,                                   // Level Control Step command
//  222   NULL,                                   // Level Control Stop command
//  223 #endif
//  224 #ifdef ZCL_GROUPS
//  225   NULL,                                   // Group Response commands
//  226 #endif
//  227 #ifdef ZCL_SCENES
//  228   NULL,                                  // Scene Store Request command
//  229   NULL,                                  // Scene Recall Request command
//  230   NULL,                                  // Scene Response command
//  231 #endif
//  232 #ifdef ZCL_ALARMS
//  233   NULL,                                  // Alarm (Response) commands
//  234 #endif
//  235 #ifdef SE_UK_EXT
//  236   NULL,                                  // Get Event Log command
//  237   NULL,                                  // Publish Event Log command
//  238 #endif
//  239   NULL,                                  // RSSI Location command
//  240   NULL                                   // RSSI Location Response command
//  241 };
//  242 
//  243 /*********************************************************************
//  244  * @fn          zclOpenEvse_Init
//  245  *
//  246  * @brief       Initialization function for the zclGeneral layer.
//  247  *
//  248  * @param       none
//  249  *
//  250  * @return      none
//  251  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  252 void zclOpenEvse_Init( byte task_id )
zclOpenEvse_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclOpenEvse_Init
        CODE
//  253 {
        FUNCALL zclOpenEvse_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        MOV     R6,A
//  254   zclOpenEvse_UARTInit();
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??zclOpenEvse_UARTCallback::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??zclOpenEvse_UARTCallback::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  255 
//  256   zclOpenEvse_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    @DPTR,A
//  257 
//  258   // Set destination address to indirect
//  259   zclOpenEvse_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclOpenEvse_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  260   zclOpenEvse_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  261   zclOpenEvse_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclOpenEvse_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  262 
//  263   // This app is part of the Home Automation Profile
//  264   zclHA_Init( &zclOpenEvse_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOpenEvse_SimpleDesc & 0xff
        MOV     R3,#(zclOpenEvse_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  265   zclHA_Init( &zclOpenEvse_BlSimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOpenEvse_BlSimpleDesc & 0xff
        MOV     R3,#(zclOpenEvse_BlSimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  266 
//  267   // Register the ZCL General Cluster Library callback functions
//  268   zclGeneral_RegisterCmdCallbacks( OPENEVSE_ENDPOINT, &zclOpenEvse_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOpenEvse_CmdCallbacks & 0xff
        MOV     R3,#(zclOpenEvse_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  269 
//  270   // Register the backlight callback functions
//  271   zclGeneral_RegisterCmdCallbacks( OPENEVSE_ENDPOINT+1, &zclOpenEvse_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOpenEvse_CmdCallbacks & 0xff
        MOV     R3,#(zclOpenEvse_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x9
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  272 
//  273   // Register the application's attribute list
//  274   zcl_registerAttrList( OPENEVSE_ENDPOINT, zclOpenEvse_NumAttributes, zclOpenEvse_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOpenEvse_Attrs & 0xff
        MOV     R5,#(zclOpenEvse_Attrs >> 8) & 0xff
        MOV     DPTR,#zclOpenEvse_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  275 
//  276     // Register the backlight attribute list
//  277   zcl_registerAttrList( OPENEVSE_ENDPOINT+1, zclOpenEvse_BlNumAttributes, zclOpenEvse_BlAttrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOpenEvse_BlAttrs & 0xff
        MOV     R5,#(zclOpenEvse_BlAttrs >> 8) & 0xff
        MOV     DPTR,#zclOpenEvse_BlNumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  278 
//  279   // Register the Application to receive the unprocessed Foundation command/response messages
//  280   zcl_registerForMsg( zclOpenEvse_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  281   
//  282 #ifdef ZCL_DISCOVER
//  283   // Register the application's command list
//  284   zcl_registerCmdList( OPENEVSE_ENDPOINT, zclCmdsArraySize, zclOpenEvse_Cmds );
//  285 #endif
//  286 
//  287   // Register for all key events - This app will handle all key events
//  288   //RegisterForKeys( zclOpenEvse_TaskID );
//  289 
//  290 #ifdef ZGP_AUTO_TT
//  291   zgpTranslationTable_RegisterEP ( &zclOpenEvse_SimpleDesc );
//  292 #endif
//  293 
//  294   // Create the Voltage report command
//  295   zclOpenEvse_reportCmdVolts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  296                  ( 1 * sizeof( zclReport_t ) ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL   ?Subroutine13 & 0xFFFF
//  297   if ( zclOpenEvse_reportCmdVolts != NULL )
??CrossCallReturnLabel_25:
        JZ      ??CrossCallReturnLabel_0
//  298   {
//  299     zclOpenEvse_reportCmdVolts->numAttr = 1;
        LCALL   ?Subroutine3 & 0xFFFF
//  300 
//  301     // Set up the first attribute
//  302     zclOpenEvse_reportCmdVolts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE;
//  303     zclOpenEvse_reportCmdVolts->attrList[0].dataType = ZCL_DATATYPE_UINT16;
//  304     zclOpenEvse_reportCmdVolts->attrList[0].attrData = (uint8 *)&zclOpenEvse_voltsScaled;
//  305   }
//  306 
//  307   // Create the Voltage report command
//  308   zclOpenEvse_reportCmdVolts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  309                  ( 1 * sizeof( zclReport_t ) ) );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL   ?Subroutine13 & 0xFFFF
//  310   if ( zclOpenEvse_reportCmdVolts != NULL )
??CrossCallReturnLabel_26:
        JZ      ??CrossCallReturnLabel_1
//  311   {
//  312     zclOpenEvse_reportCmdVolts->numAttr = 1;
        LCALL   ?Subroutine3 & 0xFFFF
//  313 
//  314     // Set up the first attribute
//  315     zclOpenEvse_reportCmdVolts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE;
//  316     zclOpenEvse_reportCmdVolts->attrList[0].dataType = ZCL_DATATYPE_UINT16;
//  317     zclOpenEvse_reportCmdVolts->attrList[0].attrData = (uint8 *)&zclOpenEvse_voltsScaled;
//  318   }
//  319 
//  320   // Create the Amperage report command
//  321   zclOpenEvse_reportCmdAmps = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  322                  ( 1 * sizeof( zclReport_t ) ) );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdAmps
        LCALL   ??Subroutine39_0 & 0xFFFF
//  323   if ( zclOpenEvse_reportCmdAmps != NULL )
??CrossCallReturnLabel_98:
        MOV     DPTR,#zclOpenEvse_reportCmdAmps
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JZ      ??zclOpenEvse_Init_0
//  324   {
//  325     zclOpenEvse_reportCmdAmps->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  326 
//  327     // Set up the first attribute
//  328     zclOpenEvse_reportCmdAmps->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_CURRENT;
??CrossCallReturnLabel_31:
        MOV     DPTR,#zclOpenEvse_reportCmdAmps
        LCALL   ?Subroutine20 & 0xFFFF
//  329     zclOpenEvse_reportCmdAmps->attrList[0].dataType = ZCL_DATATYPE_UINT16;
//  330     zclOpenEvse_reportCmdAmps->attrList[0].attrData = (uint8 *)&zclOpenEvse_ampsScaled;
//  331   }
??CrossCallReturnLabel_40:
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x5
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x21
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        INC     DPTR
        MOV     A,#zclOpenEvse_ampsScaled & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_ampsScaled >> 8) & 0xff
        MOVX    @DPTR,A
//  332 
//  333   // Create the Watts report command
//  334   zclOpenEvse_reportCmdWatts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  335                  ( 1 * sizeof( zclReport_t ) ) );
??zclOpenEvse_Init_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdWatts
        LCALL   ??Subroutine39_0 & 0xFFFF
//  336   if ( zclOpenEvse_reportCmdWatts != NULL )
??CrossCallReturnLabel_99:
        MOV     DPTR,#zclOpenEvse_reportCmdWatts
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_83:
        JZ      ??zclOpenEvse_Init_1
//  337   {
//  338     zclOpenEvse_reportCmdWatts->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  339 
//  340     // Set up the first attribute
//  341     zclOpenEvse_reportCmdWatts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER;
??CrossCallReturnLabel_32:
        MOV     DPTR,#zclOpenEvse_reportCmdWatts
        LCALL   ?Subroutine20 & 0xFFFF
//  342     zclOpenEvse_reportCmdWatts->attrList[0].dataType = ZCL_DATATYPE_INT16;
//  343     zclOpenEvse_reportCmdWatts->attrList[0].attrData = (uint8 *)&zclOpenEvse_wattsScaled;
//  344   }
??CrossCallReturnLabel_41:
        MOV     A,#0xb
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#0x29
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     DPTR
        MOV     A,#zclOpenEvse_wattsScaled & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_wattsScaled >> 8) & 0xff
        MOVX    @DPTR,A
//  345 
//  346   // Create the Temperature report command
//  347   zclOpenEvse_reportCmdTemp = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  348                  ( 1 * sizeof( zclReport_t ) ) );
??zclOpenEvse_Init_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdTemp
        LCALL   ??Subroutine39_0 & 0xFFFF
//  349   if ( zclOpenEvse_reportCmdTemp != NULL )
??CrossCallReturnLabel_100:
        MOV     DPTR,#zclOpenEvse_reportCmdTemp
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_84:
        JZ      ??zclOpenEvse_Init_2
//  350   {
//  351     zclOpenEvse_reportCmdTemp->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  352 
//  353     // Set up the first attribute
//  354     zclOpenEvse_reportCmdTemp->attrList[0].attrID = ATTRID_DEV_TEMP_CURRENT;
??CrossCallReturnLabel_33:
        MOV     DPTR,#zclOpenEvse_reportCmdTemp
        LCALL   ?Subroutine19 & 0xFFFF
//  355     zclOpenEvse_reportCmdTemp->attrList[0].dataType = ZCL_DATATYPE_INT16;
//  356     zclOpenEvse_reportCmdTemp->attrList[0].attrData = (uint8 *)&zclOpenEvse_temperature;
//  357   }
??CrossCallReturnLabel_37:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0x29
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_18:
        INC     DPTR
        MOV     A,#zclOpenEvse_temperature & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_temperature >> 8) & 0xff
        MOVX    @DPTR,A
//  358 
//  359     // Create the Energy Sum report command
//  360   zclOpenEvse_reportCmdEnergySum = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  361                  ( 1 * sizeof( zclReport_t ) ) );
??zclOpenEvse_Init_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
        LCALL   ??Subroutine39_0 & 0xFFFF
//  362   if ( zclOpenEvse_reportCmdEnergySum != NULL )
??CrossCallReturnLabel_101:
        MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_85:
        JZ      ??zclOpenEvse_Init_3
//  363   {
//  364     zclOpenEvse_reportCmdEnergySum->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  365 
//  366     // Set up the first attribute
//  367     zclOpenEvse_reportCmdEnergySum->attrList[0].attrID = ATTRID_CURRENT_SUM_DELIVERED;
??CrossCallReturnLabel_34:
        MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
        LCALL   ?Subroutine19 & 0xFFFF
//  368     zclOpenEvse_reportCmdEnergySum->attrList[0].dataType = ZCL_DATATYPE_UINT48;
//  369     zclOpenEvse_reportCmdEnergySum->attrList[0].attrData = (uint8 *)&zclOpenEvse_energySum;
//  370   }
??CrossCallReturnLabel_38:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x25
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        INC     DPTR
        MOV     A,#zclOpenEvse_energySum & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_energySum >> 8) & 0xff
        MOVX    @DPTR,A
//  371   
//  372   // Create the Energy Demand report command
//  373   zclOpenEvse_reportCmdEnergyDemand = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  374                  ( 1 * sizeof( zclReport_t ) ) );
??zclOpenEvse_Init_3:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
        LCALL   ??Subroutine39_0 & 0xFFFF
//  375   if ( zclOpenEvse_reportCmdEnergyDemand != NULL )
??CrossCallReturnLabel_102:
        MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_86:
        JZ      ??zclOpenEvse_Init_4
//  376   {
//  377     zclOpenEvse_reportCmdEnergyDemand->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  378 
//  379     // Set up the first attribute
//  380     zclOpenEvse_reportCmdEnergyDemand->attrList[0].attrID = ATTRID_CURRENT_DEMAND_DELIVERED;
??CrossCallReturnLabel_35:
        MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
        LCALL   ?Subroutine19 & 0xFFFF
//  381     zclOpenEvse_reportCmdEnergyDemand->attrList[0].dataType = ZCL_DATATYPE_UINT24;
//  382     zclOpenEvse_reportCmdEnergyDemand->attrList[0].attrData = (uint8 *)&zclOpenEvse_energyDemand;
//  383   }
??CrossCallReturnLabel_39:
        MOV     A,#0x6
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#0x22
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        INC     DPTR
        MOV     A,#zclOpenEvse_energyDemand & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_energyDemand >> 8) & 0xff
        MOVX    @DPTR,A
//  384 
//  385   // Create the State report command
//  386   zclOpenEvse_reportCmdState = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
//  387                  ( 1 * sizeof( zclReport_t ) ) );
??zclOpenEvse_Init_4:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#zclOpenEvse_reportCmdState
        LCALL   ??Subroutine39_0 & 0xFFFF
//  388   if ( zclOpenEvse_reportCmdState != NULL )
??CrossCallReturnLabel_103:
        MOV     DPTR,#zclOpenEvse_reportCmdState
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ      ??zclOpenEvse_Init_5
//  389   {
//  390     zclOpenEvse_reportCmdState->numAttr = 1;
        LCALL   ?Subroutine18 & 0xFFFF
//  391 
//  392     // Set up the first attribute
//  393     zclOpenEvse_reportCmdState->attrList[0].attrID = ATTRID_IOV_BASIC_PRESENT_VALUE;
??CrossCallReturnLabel_36:
        MOV     DPTR,#zclOpenEvse_reportCmdState
        LCALL   ?Subroutine20 & 0xFFFF
//  394     zclOpenEvse_reportCmdState->attrList[0].dataType = ZCL_DATATYPE_UINT16;
//  395     zclOpenEvse_reportCmdState->attrList[0].attrData = (uint8 *)&zclOpenEvse_state;
//  396   }
??CrossCallReturnLabel_42:
        MOV     A,#0x55
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,#0x21
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        INC     DPTR
        MOV     A,#zclOpenEvse_state & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_state >> 8) & 0xff
        MOVX    @DPTR,A
//  397 
//  398   // Restore backlight setting
//  399   zcl_nv_item_init( OPENEVSE_BL_NV, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
??zclOpenEvse_Init_5:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#zclOpenEvse_backlight & 0xff
        MOV     ?V1,#(zclOpenEvse_backlight >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  400   zcl_nv_read( OPENEVSE_BL_NV, 0, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  401   zcl_nv_item_init( OPENEVSE_LIMIT_NV, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#zclOpenEvse_energyLimit & 0xff
        MOV     ?V1,#(zclOpenEvse_energyLimit >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  402   zcl_nv_read( OPENEVSE_LIMIT_NV, 0, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  403 
//  404   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_POLL_EVSE_EVT, 1000 ); // 1 second for EVSE to boot
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  405   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MIN_EVT, zclOpenEvse_reportPowerMin );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportPowerMin
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  406   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MAX_EVT, zclOpenEvse_reportPowerMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportPowerMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  407   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETTEMP_MAX_EVT, zclOpenEvse_reportTempMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportTempMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  408   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportEnergyMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  409 }
        MOV     A,#0x1d
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclOpenEvse_Init
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function zclOpenEvse_Init
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_77:
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclOpenEvse_Init
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_41
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-4
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclOpenEvse_Init
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_42
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-4
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclOpenEvse_Init
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_37
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclOpenEvse_Init
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_38
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclOpenEvse_Init
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_39
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_81:
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclOpenEvse_Init
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_41
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-6
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclOpenEvse_Init
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_42
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-6
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclOpenEvse_Init
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_37
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-6
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclOpenEvse_Init
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_38
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-6
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclOpenEvse_Init
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_39
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-6
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zclOpenEvse_Init
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_23
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-6
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclOpenEvse_Init
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_24
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-6
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclOpenEvse_Init
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_21
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-6
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclOpenEvse_Init
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_22
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-6
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclOpenEvse_Init
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_19
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-6
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclOpenEvse_Init
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_20
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-6
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclOpenEvse_Init
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_17
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-6
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclOpenEvse_Init
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_18
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-6
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclOpenEvse_Init
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_15
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-6
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclOpenEvse_Init
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_16
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-6
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclOpenEvse_Init
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_13
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-6
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclOpenEvse_Init
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_14
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-6
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclOpenEvse_Init
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclOpenEvse_Init
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_76:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclOpenEvse_Init
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclOpenEvse_Init
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclOpenEvse_Init
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclOpenEvse_Init
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclOpenEvse_Init
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclOpenEvse_Init
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPTR,#zclOpenEvse_reportCmdVolts
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclOpenEvse_Init
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdState
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_72:
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclOpenEvse_Init
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_71:
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclOpenEvse_Init
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_70:
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclOpenEvse_Init
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdTemp
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_69:
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclOpenEvse_Init
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_24
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclOpenEvse_Init
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_21
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclOpenEvse_Init
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_22
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclOpenEvse_Init
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_19
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclOpenEvse_Init
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_20
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclOpenEvse_Init
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_17
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclOpenEvse_Init
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_18
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclOpenEvse_Init
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_15
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclOpenEvse_Init
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_16
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclOpenEvse_Init
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_13
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclOpenEvse_Init
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_14
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclOpenEvse_Init
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdWatts
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_68:
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclOpenEvse_Init
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdAmps
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclOpenEvse_Init
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,#0x1
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOV     A,#0x5
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#0x21
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_60:
        INC     DPTR
        MOV     A,#zclOpenEvse_voltsScaled & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOpenEvse_voltsScaled >> 8) & 0xff
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclOpenEvse_Init
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_26
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclOpenEvse_Init
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_0
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclOpenEvse_Init
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_1
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclOpenEvse_Init
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_26
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-6
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclOpenEvse_Init
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_0
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-6
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclOpenEvse_Init
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_1
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-6
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclOpenEvse_Init
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-6
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclOpenEvse_Init
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-6
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclOpenEvse_Init
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-6
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclOpenEvse_Init
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-6
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclOpenEvse_reportCmdVolts
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zclOpenEvse_Init
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zclOpenEvse_Init
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zclOpenEvse_Init
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99
//  410 
//  411 
//  412 /*********************************************************************
//  413  * @fn          zclOpenEvse_event_loop
//  414  *
//  415  * @brief       Event Loop Processor for zclGeneral.
//  416  *
//  417  * @param       none
//  418  *
//  419  * @return      none
//  420  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  421 uint16 zclOpenEvse_event_loop( uint8 task_id, uint16 events )
zclOpenEvse_event_loop:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
        CODE
//  422 {
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendEnergy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendTemp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendTemp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, zclOpenEvse_sendEnergy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  423   afIncomingMSGPacket_t *MSGpkt;
//  424 
//  425   static uint16 lastVolts = 0, lastAmps = 0;
//  426   static int16 lastWatts = 0;
//  427   
//  428   (void)task_id;  // Intentionally unreferenced parameter
//  429 
//  430   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclOpenEvse_event_loop_0
//  431   {
//  432     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclOpenEvse_TaskID )) )
//  433     {
//  434       switch ( MSGpkt->hdr.event )
//  435       {
//  436         case ZCL_INCOMING_MSG:
//  437           // Incoming ZCL Foundation command/response messages
//  438           zclOpenEvse_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  439           break;
//  440 
//  441         case KEY_CHANGE:
//  442           break;
//  443 
//  444         case ZDO_STATE_CHANGE:
//  445           zclOpenEvse_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  446 
//  447           // now on the network
//  448           if ( (zclOpenEvse_NwkState == DEV_ZB_COORD) ||
//  449                (zclOpenEvse_NwkState == DEV_ROUTER)   ||
//  450                (zclOpenEvse_NwkState == DEV_END_DEVICE) )
//  451           {
//  452             zclOpenEvse_Identify();
//  453           }
//  454           break;
//  455 
//  456         default:
//  457           break;
//  458       }
//  459 
//  460       // Release the memory
//  461       osal_msg_deallocate( (uint8 *)MSGpkt );
//  462     }
//  463 
//  464     // return unprocessed events
//  465     return (events ^ SYS_EVENT_MSG);
//  466   }
//  467   if ( (events & OPENEVSE_IDENTIFY_EVT) )
        MOV     A,R6
        ANL     A,#0x4
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_1 & 0xFFFF
//  468   {
//  469     static uint8 identState = 0;
//  470 
//  471     if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
//  472     {
//  473       return events; // If last command not complete, postpone this
//  474     }
//  475 
//  476     if (zclOpenEvse_IdentifyTime == 0)
        MOV     DPTR,#zclOpenEvse_IdentifyTime
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_88:
        JZ      $+5
        LJMP    ??zclOpenEvse_event_loop_3 & 0xFFFF
//  477     {
//  478       if (zclOpenEvse_backlight == LIGHT_ON)
        MOV     DPTR,#zclOpenEvse_backlight
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     R2,#0x0
        JZ      $+5
        LJMP    ??zclOpenEvse_event_loop_4 & 0xFFFF
//  479       {
//  480         zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDRGB, 0);
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x6
        LJMP    ??zclOpenEvse_event_loop_5 & 0xFFFF
//  481       }
??zclOpenEvse_event_loop_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclOpenEvse_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclOpenEvse_event_loop_7
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclOpenEvse_event_loop_7
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclOpenEvse_event_loop_8
??zclOpenEvse_event_loop_7:
        MOV     DPTR,#zclOpenEvse_IdentifyTime
        MOV     A,#0x5
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
??zclOpenEvse_event_loop_8:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclOpenEvse_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclOpenEvse_event_loop_9
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclOpenEvse_event_loop_10
        ADD     A,#0x63
        JZ      ??zclOpenEvse_event_loop_6
        SJMP    ??zclOpenEvse_event_loop_8
??zclOpenEvse_event_loop_10:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclOpenEvse_event_loop_11
        ADD     A,#-0x3
        JNZ     ??zclOpenEvse_event_loop_12
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV     R2,#0x0
??zclOpenEvse_event_loop_13:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_43:
        JNC     ??zclOpenEvse_event_loop_12
        INC     R2
        SJMP    ??zclOpenEvse_event_loop_13
??zclOpenEvse_event_loop_11:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     R2,#0x0
        SJMP    ??zclOpenEvse_event_loop_14
??zclOpenEvse_event_loop_15:
        INC     R2
??zclOpenEvse_event_loop_14:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_44:
        JC      ??zclOpenEvse_event_loop_15
??zclOpenEvse_event_loop_12:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclOpenEvse_event_loop_8
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclOpenEvse_event_loop_8
??zclOpenEvse_event_loop_9:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zclOpenEvse_event_loop_16 & 0xFFFF
//  482       else
//  483       {
//  484         zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
??zclOpenEvse_event_loop_4:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x5
??zclOpenEvse_event_loop_5:
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
        SJMP    ??zclOpenEvse_event_loop_17
//  485       }
//  486     }
//  487     else
//  488     {
//  489       if (identState & 1) // On odd counts turn LED on
??zclOpenEvse_event_loop_3:
        MOV     DPTR,#??identState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     R2,#0x0
        JNC     ??zclOpenEvse_event_loop_18
//  490       {
//  491         zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x5
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
//  492         zclOpenEvse_IdentifyTime--;
        MOV     DPTR,#zclOpenEvse_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??zclOpenEvse_event_loop_19
//  493       }
//  494       else
//  495       {
//  496         zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDTEAL, 0);
??zclOpenEvse_event_loop_18:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x7
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
//  497       }
//  498       identState = !identState;
??zclOpenEvse_event_loop_19:
        MOV     DPTR,#??identState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CPL     C
        CLR     A
        RLC     A
        MOVX    @DPTR,A
//  499       osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_IDENTIFY_EVT, 500 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  500     }
//  501     return ( events ^ OPENEVSE_IDENTIFY_EVT );
??zclOpenEvse_event_loop_17:
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
//  502   }
//  503   
//  504   if (events & OPENEVSE_POLL_EVSE_EVT)
??zclOpenEvse_event_loop_1:
        MOV     A,R6
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_21 & 0xFFFF
//  505   {
//  506     static uint8 pollNumber = 0;
//  507     static uint8 firstTime = TRUE;
//  508     static uint32 lastLimit = 0;
//  509     
//  510     if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
//  511     {
//  512       return events; // If last command not complete, postpone this
//  513     }
//  514     
//  515     switch (pollNumber++)
        MOV     DPTR,#??pollNumber
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_73:
        JZ      ??zclOpenEvse_event_loop_22
        DEC     A
        JZ      ??zclOpenEvse_event_loop_23
        DEC     A
        JZ      ??zclOpenEvse_event_loop_24
        ADD     A,#-0x8
        JZ      ??zclOpenEvse_event_loop_25
        DEC     A
        JZ      ??zclOpenEvse_event_loop_26
        DEC     A
        JZ      ??zclOpenEvse_event_loop_27
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_28 & 0xFFFF
        ADD     A,#-0xa
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_29 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_30 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_31 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_32 & 0xFFFF
        SJMP    ??zclOpenEvse_event_loop_33
//  516     {
//  517     case 0: // State 0-9 initialization
//  518       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETLEVEL, 0);
??zclOpenEvse_event_loop_22:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0xc
??zclOpenEvse_event_loop_34:
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
//  519       break;
//  520     case 1:
//  521       if (zclOpenEvse_backlight == LIGHT_OFF) // Restore backlight state if power cycled
//  522       {
//  523         zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
//  524       }
//  525       break;
//  526     case 2:
//  527       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETSTATE, 0);
//  528       pollNumber = 10; // Go to main loop state
//  529       break;
//  530       
//  531     case 10:// State 10-19 main loop
//  532       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETPOWER, 0);
//  533       break;
//  534     case 11:
//  535       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETTEMP, 0);
//  536       break;
//  537     case 12:
//  538       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETENERGY, 0);
//  539       if (zclOpenEvse_NwkState != DEV_ROUTER)
//  540       {
//  541         firstTime = TRUE;
//  542       }
//  543       if (lastLimit != zclOpenEvse_energyLimit)
//  544       {
//  545         pollNumber = 40; // Go to set limit state
//  546         break;
//  547       }
//  548       else if (firstTime)
//  549       {
//  550         pollNumber = 20; // Go to network init state
//  551         break;
//  552       }
//  553       pollNumber = 10;
//  554       break;
//  555 
//  556     case 20: // State 20-39 network connected
//  557       if (zclOpenEvse_NwkState != DEV_ROUTER)
//  558       {
//  559         pollNumber = 10; // Return to main loop state
//  560         break;
//  561       }
//  562       break;
//  563       // States 21-29 are a delay after network join
//  564     case 30:
//  565       zclOpenEvse_sendEnergy();
//  566       break;
//  567     case 31:
//  568       lastVolts = zclOpenEvse_voltsScaled;
//  569       lastAmps = zclOpenEvse_ampsScaled;
//  570       lastWatts = zclOpenEvse_wattsScaled;
//  571       zclOpenEvse_sendPower();
//  572       break;
//  573     case 32:
//  574       zclOpenEvse_sendTemp();
//  575       zclOpenEvse_sendState();
//  576       firstTime = FALSE;
//  577       pollNumber = 10;
//  578       break;
//  579 
//  580     case 40:
//  581       zclOpenEvse_EVSESetLimit(zclOpenEvse_energyLimit);
//  582       // Save to NVRAM
//  583       zcl_nv_write( OPENEVSE_LIMIT_NV, 0, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
//  584       lastLimit = zclOpenEvse_energyLimit;
//  585       pollNumber = 10;
//  586       break;
//  587     }
//  588     
//  589     osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_POLL_EVSE_EVT, POLL_EVSE_PERIOD );
??zclOpenEvse_event_loop_33:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_c8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  590     return ( events ^ OPENEVSE_POLL_EVSE_EVT );
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
??zclOpenEvse_event_loop_23:
        MOV     DPTR,#zclOpenEvse_backlight
        MOVX    A,@DPTR
        JNZ     ??zclOpenEvse_event_loop_33
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x5
        SJMP    ??zclOpenEvse_event_loop_34
??zclOpenEvse_event_loop_24:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0xb
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
        SJMP    ??zclOpenEvse_event_loop_35
??zclOpenEvse_event_loop_25:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x8
        SJMP    ??zclOpenEvse_event_loop_34
??zclOpenEvse_event_loop_26:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x9
        SJMP    ??zclOpenEvse_event_loop_34
??zclOpenEvse_event_loop_27:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0xa
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
        MOV     DPTR,#zclOpenEvse_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclOpenEvse_event_loop_36
        MOV     DPTR,#??firstTime
        MOV     A,#0x1
        MOVX    @DPTR,A
??zclOpenEvse_event_loop_36:
        MOV     DPTR,#zclOpenEvse_energyLimit
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#??lastLimit
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??zclOpenEvse_event_loop_37
        MOV     DPTR,#??pollNumber
        MOV     A,#0x28
??zclOpenEvse_event_loop_38:
        MOVX    @DPTR,A
        SJMP    ??zclOpenEvse_event_loop_33
??zclOpenEvse_event_loop_37:
        MOV     DPTR,#??firstTime
        MOVX    A,@DPTR
        JZ      ??zclOpenEvse_event_loop_35
        MOV     DPTR,#??pollNumber
        MOV     A,#0x14
        SJMP    ??zclOpenEvse_event_loop_38
??zclOpenEvse_event_loop_28:
        MOV     DPTR,#zclOpenEvse_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     $+5
        LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
??zclOpenEvse_event_loop_35:
        MOV     DPTR,#??pollNumber
        MOV     A,#0xa
        SJMP    ??zclOpenEvse_event_loop_38
??zclOpenEvse_event_loop_29:
        ; Setup parameters for call to function zclOpenEvse_sendEnergy
        LCALL   `??zclOpenEvse_sendEnergy::?relay`; Banked call to: zclOpenEvse_sendEnergy
        LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
??zclOpenEvse_event_loop_30:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function zclOpenEvse_sendPower
        LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
        LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
??zclOpenEvse_event_loop_31:
        ; Setup parameters for call to function zclOpenEvse_sendTemp
        LCALL   `??zclOpenEvse_sendTemp::?relay`; Banked call to: zclOpenEvse_sendTemp
        ; Setup parameters for call to function zclOpenEvse_sendState
        LCALL   `??zclOpenEvse_sendState::?relay`; Banked call to: zclOpenEvse_sendState
        MOV     DPTR,#??firstTime
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??zclOpenEvse_event_loop_35
??zclOpenEvse_event_loop_32:
        MOV     DPTR,#zclOpenEvse_energyLimit
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_ffffff
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JNZ     ??zclOpenEvse_event_loop_39
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
??zclOpenEvse_event_loop_39:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x1
        MOV     R1,#0xd
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zclOpenEvse_energyLimit & 0xff
        MOV     ?V1,#(zclOpenEvse_energyLimit >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#zclOpenEvse_energyLimit
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#??lastLimit
        LCALL   ?XSTORE_R0123
        LJMP    ??zclOpenEvse_event_loop_35 & 0xFFFF
//  591   }
//  592   if (events & OPENEVSE_BACKLIGHT_OFF_EVT)
??zclOpenEvse_event_loop_21:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclOpenEvse_event_loop_40
//  593   {
//  594     if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
//  595     {
//  596       return events; // If last command not complete, postpone this
//  597     }
//  598  
//  599     zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x5
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
//  600 
//  601     return ( events ^ OPENEVSE_BACKLIGHT_OFF_EVT );
        MOV     A,R6
        XRL     A,#0x8
        LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
//  602   }
//  603   if ( events & OPENEVSE_GETPOWER_MIN_EVT)
??zclOpenEvse_event_loop_40:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zclOpenEvse_event_loop_41
//  604   {
//  605     if ( (abs(lastVolts - zclOpenEvse_voltsScaled) > zclOpenEvse_reportPowerChangedVolts) ||
//  606          (abs(lastAmps - zclOpenEvse_ampsScaled) > zclOpenEvse_reportPowerChangedAmps) ||
//  607          (abs(lastWatts - zclOpenEvse_wattsScaled) > zclOpenEvse_reportPowerChangedWatts) )
        ; Setup parameters for call to function abs
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     DPH,#(??lastVolts >> 8) & 0xff
        MOV     DPL,#??lastVolts & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   `??abs::?relay`      ; Banked call to: abs
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     DPTR,#zclOpenEvse_reportPowerChangedVolts
        MOV     R0,#?V0
        LCALL   ?UL_GT_X
        JC      ??zclOpenEvse_event_loop_42
        ; Setup parameters for call to function abs
        MOV     DPTR,#zclOpenEvse_ampsScaled
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     DPH,#(??lastAmps >> 8) & 0xff
        MOV     DPL,#??lastAmps & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   `??abs::?relay`      ; Banked call to: abs
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     DPTR,#zclOpenEvse_reportPowerChangedAmps
        MOV     R0,#?V0
        LCALL   ?UL_GT_X
        JC      ??zclOpenEvse_event_loop_42
        ; Setup parameters for call to function abs
        MOV     DPTR,#zclOpenEvse_wattsScaled
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     DPH,#(??lastWatts >> 8) & 0xff
        MOV     DPL,#??lastWatts & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   `??abs::?relay`      ; Banked call to: abs
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     DPTR,#zclOpenEvse_reportPowerChangedWatts
        MOV     R0,#?V0
        LCALL   ?UL_GT_X
        JNC     ??zclOpenEvse_event_loop_43
//  608     {
//  609       lastVolts = zclOpenEvse_voltsScaled;
??zclOpenEvse_event_loop_42:
        LCALL   ?Subroutine4 & 0xFFFF
//  610       lastAmps = zclOpenEvse_ampsScaled;
//  611       lastWatts = zclOpenEvse_wattsScaled;
//  612 
//  613       zclOpenEvse_sendPower();
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function zclOpenEvse_sendPower
        LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
//  614     }      
//  615     osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MIN_EVT, zclOpenEvse_reportPowerMin );
??zclOpenEvse_event_loop_43:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportPowerMin
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  616     return ( events ^ OPENEVSE_GETPOWER_MIN_EVT );
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??zclOpenEvse_event_loop_20
//  617   }
//  618   if ( events & OPENEVSE_GETPOWER_MAX_EVT)
??zclOpenEvse_event_loop_41:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zclOpenEvse_event_loop_44
//  619   {
//  620     zclOpenEvse_sendPower(); // This restarts the timer
        ; Setup parameters for call to function zclOpenEvse_sendPower
        LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
//  621     return ( events ^ OPENEVSE_GETPOWER_MAX_EVT );
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??zclOpenEvse_event_loop_20
//  622   }
//  623 
//  624   if ( events & OPENEVSE_GETTEMP_MAX_EVT)
??zclOpenEvse_event_loop_44:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??zclOpenEvse_event_loop_45
//  625   {
//  626     zclOpenEvse_sendTemp(); // This restarts the timer
        ; Setup parameters for call to function zclOpenEvse_sendTemp
        LCALL   `??zclOpenEvse_sendTemp::?relay`; Banked call to: zclOpenEvse_sendTemp
//  627     return ( events ^ OPENEVSE_GETTEMP_MAX_EVT );
        MOV     A,R6
        XRL     A,#0x40
        SJMP    ??zclOpenEvse_event_loop_20
//  628   }
//  629 
//  630   if ( events & OPENEVSE_GETENERGY_MAX_EVT)
??zclOpenEvse_event_loop_45:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??zclOpenEvse_event_loop_46
//  631   {
//  632     zclOpenEvse_sendEnergy();
        ; Setup parameters for call to function zclOpenEvse_sendEnergy
        LCALL   `??zclOpenEvse_sendEnergy::?relay`; Banked call to: zclOpenEvse_sendEnergy
//  633     osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportEnergyMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  634     return ( events ^ OPENEVSE_GETENERGY_MAX_EVT );
        MOV     A,R6
        XRL     A,#0x80
??zclOpenEvse_event_loop_20:
        MOV     R2,A
        MOV     A,R7
??zclOpenEvse_event_loop_16:
        MOV     R3,A
        SJMP    ??zclOpenEvse_event_loop_2
//  635   }
//  636 
//  637   // Discard unknown events
//  638   return 0;
??zclOpenEvse_event_loop_46:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclOpenEvse_event_loop_2:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  639 }
          CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclOpenEvse_event_loop
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclOpenEvse_event_loop
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R3,A
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclOpenEvse_event_loop
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R3
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??lastVolts:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??lastAmps:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??lastWatts:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??identState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??pollNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
??firstTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for firstTime>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
??lastLimit:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
??string:
        DATA8
        DS 21
        REQUIRE `?<Initializer for string>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??strLen:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
rxIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
rxData:
        DS 34
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zclOpenEvse_UARTParse
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclOpenEvse_UARTParse
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclOpenEvse_Init
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zclOpenEvse_Init
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclOpenEvse_Init
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclOpenEvse_Init
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclOpenEvse_Init
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zclOpenEvse_event_loop
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclOpenEvse_UARTParse
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclOpenEvse_UARTParse
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclOpenEvse_event_loop
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_2
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zclOpenEvse_event_loop
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_3
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOV     DPTR,#zclOpenEvse_voltsScaled
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zclOpenEvse_event_loop
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zclOpenEvse_UARTParse
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_89
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zclOpenEvse_UARTParse
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_90
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zclOpenEvse_Init
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_82
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclOpenEvse_Init
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_83
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclOpenEvse_Init
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_84
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclOpenEvse_Init
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_85
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zclOpenEvse_Init
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_86
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclOpenEvse_Init
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_87
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zclOpenEvse_event_loop
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_88
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zclOpenEvse_event_loop
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_2
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-4
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclOpenEvse_event_loop
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_3
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zclOpenEvse_event_loop
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_2
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclOpenEvse_event_loop
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_3
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclOpenEvse_event_loop
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zclOpenEvse_event_loop
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_2
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zclOpenEvse_event_loop
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_3
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclOpenEvse_event_loop
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function zclOpenEvse_Init
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclOpenEvse_Init
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zclOpenEvse_Init
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zclOpenEvse_Init
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclOpenEvse_Init
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zclOpenEvse_Init
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zclOpenEvse_event_loop
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclOpenEvse_event_loop
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker155 Using cfiCommon1
          CFI (cfiPicker155) NoFunction
          CFI (cfiPicker155) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond156 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zclOpenEvse_event_loop
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     DPTR,#??lastVolts
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     DPTR,#zclOpenEvse_ampsScaled
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     DPTR,#??lastAmps
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     DPTR,#zclOpenEvse_wattsScaled
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     DPTR,#??lastWatts
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_109:
        RET
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclOpenEvse_event_loop
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_3
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclOpenEvse_event_loop
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclOpenEvse_event_loop
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclOpenEvse_event_loop
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_2
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zclOpenEvse_event_loop
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_3
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOV     A,R0
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zclOpenEvse_event_loop
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_2
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-4
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zclOpenEvse_event_loop
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_3
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zclOpenEvse_event_loop
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zclOpenEvse_event_loop
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclOpenEvse_event_loop
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_2
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclOpenEvse_event_loop
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_3
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180
//  640 
//  641 
//  642 /*********************************************************************
//  643  * @fn      zclOpenEvse_BasicResetCB
//  644  *
//  645  * @brief   Callback from the ZCL General Cluster Library
//  646  *          to set all the Basic Cluster attributes to default values.
//  647  *
//  648  * @param   none
//  649  *
//  650  * @return  none
//  651  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  652 static void zclOpenEvse_BasicResetCB( void )
zclOpenEvse_BasicResetCB:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function zclOpenEvse_BasicResetCB
        CODE
//  653 {
        FUNCALL zclOpenEvse_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  654   NLME_LeaveReq_t leaveReq;
//  655   // Set every field to 0
//  656   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  657 
//  658   // This will enable the device to rejoin the network after reset.
//  659   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  660 
//  661   // Set the NV startup option to force a "new" join.
//  662   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  663 
//  664   // Leave the network, and reset afterwards
//  665   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclOpenEvse_BasicResetCB_0
//  666   {
//  667     // Couldn't send out leave; prepare to reset anyway
//  668     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  669   }
//  670 }
??zclOpenEvse_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock181
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock182
//  671 
//  672 /*********************************************************************
//  673  * @fn      zclOpenEvse_OnOffCB
//  674  *
//  675  * @brief   Callback from the ZCL General Cluster Library when
//  676  *          it received an On/Off Command for this application.
//  677  *
//  678  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  679  *
//  680  * @return  none
//  681  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  682 static void zclOpenEvse_OnOffCB( uint8 cmd )
zclOpenEvse_OnOffCB:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function zclOpenEvse_OnOffCB
        CODE
//  683 {
        FUNCALL zclOpenEvse_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_OnOffCB, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_OnOffCB, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_OnOffCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_OnOffCB, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_OnOffCB, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  684   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     ?V1,R3
        MOV     R1,?V1
//  685 
//  686   if (pPtr->endPoint == OPENEVSE_ENDPOINT)
        MOV     A,R2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??zclOpenEvse_OnOffCB_0
//  687   {
//  688     // Turn on the power
//  689     if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclOpenEvse_OnOffCB_1
//  690     {
//  691       zclOpenEvse_OnOff = LIGHT_ON;
//  692     }
//  693     // Turn off the power
//  694     else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclOpenEvse_OnOffCB_2
//  695     {
//  696       zclOpenEvse_OnOff = LIGHT_OFF;
//  697     }
//  698     // Toggle the power
//  699     else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        MOV     DPTR,#zclOpenEvse_OnOff
        JNZ     ??zclOpenEvse_OnOffCB_3
//  700     {
//  701       if ( zclOpenEvse_OnOff == LIGHT_OFF )
        MOVX    A,@DPTR
        JNZ     ??zclOpenEvse_OnOffCB_2
//  702       {
//  703         zclOpenEvse_OnOff = LIGHT_ON;
??zclOpenEvse_OnOffCB_1:
        MOV     DPTR,#zclOpenEvse_OnOff
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??zclOpenEvse_OnOffCB_4
//  704       }
//  705       else
//  706       {
//  707         zclOpenEvse_OnOff = LIGHT_OFF;
??zclOpenEvse_OnOffCB_2:
        MOV     DPTR,#zclOpenEvse_OnOff
        CLR     A
        MOVX    @DPTR,A
//  708       }
//  709     }
//  710     if (zclOpenEvse_OnOff == LIGHT_ON)
//  711     {
//  712       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_ENABLE, 0);
//  713     }
//  714     else
//  715     {
//  716       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_SLEEP, 0);
??zclOpenEvse_OnOffCB_5:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x3
        SJMP    ??zclOpenEvse_OnOffCB_6
//  717     }
??zclOpenEvse_OnOffCB_3:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclOpenEvse_OnOffCB_5
??zclOpenEvse_OnOffCB_4:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     R1,#0x4
        SJMP    ??zclOpenEvse_OnOffCB_6
//  718   }
//  719   else
//  720   {
//  721     // Turn on the backlight
//  722     if ( cmd == COMMAND_ON )
??zclOpenEvse_OnOffCB_0:
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclOpenEvse_OnOffCB_7
//  723     {
//  724       zclOpenEvse_backlight = LIGHT_ON;
//  725     }
//  726     // Turn off the backlight
//  727     else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclOpenEvse_OnOffCB_8
//  728     {
//  729       zclOpenEvse_backlight = LIGHT_OFF;
//  730     }
//  731     // Toggle the backlight
//  732     else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclOpenEvse_OnOffCB_9
//  733     {
//  734       if ( zclOpenEvse_backlight == LIGHT_OFF )
        MOV     DPTR,#zclOpenEvse_backlight
        MOVX    A,@DPTR
        JNZ     ??zclOpenEvse_OnOffCB_8
//  735       {
//  736         zclOpenEvse_backlight = LIGHT_ON;
??zclOpenEvse_OnOffCB_7:
        MOV     DPTR,#zclOpenEvse_backlight
        MOV     A,#0x1
        SJMP    ??zclOpenEvse_OnOffCB_10
//  737       }
//  738       else
//  739       {
//  740         zclOpenEvse_backlight = LIGHT_OFF;
??zclOpenEvse_OnOffCB_8:
        MOV     DPTR,#zclOpenEvse_backlight
        CLR     A
??zclOpenEvse_OnOffCB_10:
        MOVX    @DPTR,A
//  741       }
//  742     }
//  743     
//  744     // save to NVRAM
//  745     zcl_nv_write( OPENEVSE_BL_NV, 0, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
??zclOpenEvse_OnOffCB_9:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zclOpenEvse_backlight & 0xff
        MOV     ?V1,#(zclOpenEvse_backlight >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  746 
//  747     if (zclOpenEvse_backlight == LIGHT_ON)
        MOV     DPTR,#zclOpenEvse_backlight
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     R2,#0x0
        JNZ     ??zclOpenEvse_OnOffCB_11
//  748     {
//  749       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDRGB, 0);
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x6
        SJMP    ??zclOpenEvse_OnOffCB_6
//  750     }
//  751     else
//  752     {
//  753       zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
??zclOpenEvse_OnOffCB_11:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R1,#0x5
??zclOpenEvse_OnOffCB_6:
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
//  754     }
//  755   }
//  756 }
        LJMP    ??Subroutine36_0 & 0xFFFF
          CFI EndBlock cfiBlock183
//  757 
//  758 void zclOpenEvse_Identify(void)
//  759 {
//  760   zclOpenEvse_IdentifyTime = 5;
//  761   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_IDENTIFY_EVT, 500 );
//  762 }
//  763 
//  764 /******************************************************************************
//  765  *
//  766  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  767  *
//  768  *****************************************************************************/
//  769 
//  770 /*********************************************************************
//  771  * @fn      zclOpenEvse_ProcessIncomingMsg
//  772  *
//  773  * @brief   Process ZCL Foundation incoming message
//  774  *
//  775  * @param   pInMsg - pointer to the received message
//  776  *
//  777  * @return  none
//  778  */
//  779 static void zclOpenEvse_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  780 {
//  781   switch ( pInMsg->zclHdr.commandID )
//  782   {
//  783 #ifdef ZCL_READ
//  784     case ZCL_CMD_READ_RSP:
//  785       zclOpenEvse_ProcessInReadRspCmd( pInMsg );
//  786       break;
//  787 #endif
//  788 #ifdef ZCL_WRITE
//  789     case ZCL_CMD_WRITE_RSP:
//  790       zclOpenEvse_ProcessInWriteRspCmd( pInMsg );
//  791       break;
//  792 #endif
//  793 #ifdef ZCL_REPORT
//  794     // Attribute Reporting implementation should be added here
//  795     case ZCL_CMD_CONFIG_REPORT:
//  796       // zclOpenEvse_ProcessInConfigReportCmd( pInMsg );
//  797       break;
//  798 
//  799     case ZCL_CMD_CONFIG_REPORT_RSP:
//  800       // zclOpenEvse_ProcessInConfigReportRspCmd( pInMsg );
//  801       break;
//  802 
//  803     case ZCL_CMD_READ_REPORT_CFG:
//  804       // zclOpenEvse_ProcessInReadReportCfgCmd( pInMsg );
//  805       break;
//  806 
//  807     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  808       // zclOpenEvse_ProcessInReadReportCfgRspCmd( pInMsg );
//  809       break;
//  810 
//  811     case ZCL_CMD_REPORT:
//  812       // zclOpenEvse_ProcessInReportCmd( pInMsg );
//  813       break;
//  814 #endif
//  815     case ZCL_CMD_DEFAULT_RSP:
//  816       zclOpenEvse_ProcessInDefaultRspCmd( pInMsg );
//  817       break;
//  818 #ifdef ZCL_DISCOVER
//  819     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  820       zclOpenEvse_ProcessInDiscCmdsRspCmd( pInMsg );
//  821       break;
//  822 
//  823     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  824       zclOpenEvse_ProcessInDiscCmdsRspCmd( pInMsg );
//  825       break;
//  826 
//  827     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  828       zclOpenEvse_ProcessInDiscAttrsRspCmd( pInMsg );
//  829       break;
//  830 
//  831     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  832       zclOpenEvse_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  833       break;
//  834 #endif
//  835     default:
//  836       break;
//  837   }
//  838 
//  839   if ( pInMsg->attrCmd )
//  840     osal_mem_free( pInMsg->attrCmd );
//  841 }
//  842 
//  843 #ifdef ZCL_READ
//  844 /*********************************************************************
//  845  * @fn      zclOpenEvse_ProcessInReadRspCmd
//  846  *
//  847  * @brief   Process the "Profile" Read Response Command
//  848  *
//  849  * @param   pInMsg - incoming message to process
//  850  *
//  851  * @return  none
//  852  */
//  853 static uint8 zclOpenEvse_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  854 {
//  855   zclReadRspCmd_t *readRspCmd;
//  856   uint8 i;
//  857 
//  858   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  859   for (i = 0; i < readRspCmd->numAttr; i++)
//  860   {
//  861     // Notify the originator of the results of the original read attributes
//  862     // attempt and, for each successfull request, the value of the requested
//  863     // attribute
//  864   }
//  865 
//  866   return ( TRUE );
//  867 }
//  868 #endif // ZCL_READ
//  869 
//  870 #ifdef ZCL_WRITE
//  871 /*********************************************************************
//  872  * @fn      zclOpenEvse_ProcessInWriteRspCmd
//  873  *
//  874  * @brief   Process the "Profile" Write Response Command
//  875  *
//  876  * @param   pInMsg - incoming message to process
//  877  *
//  878  * @return  none
//  879  */
//  880 static uint8 zclOpenEvse_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  881 {
//  882   zclWriteRspCmd_t *writeRspCmd;
//  883   uint8 i;
//  884 
//  885   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  886   for ( i = 0; i < writeRspCmd->numAttr; i++ )
//  887   {
//  888     // Notify the device of the results of the its original write attributes
//  889     // command.
//  890   }
//  891 
//  892   return ( TRUE );
//  893 }
//  894 #endif // ZCL_WRITE
//  895 
//  896 /*********************************************************************
//  897  * @fn      zclOpenEvse_ProcessInDefaultRspCmd
//  898  *
//  899  * @brief   Process the "Profile" Default Response Command
//  900  *
//  901  * @param   pInMsg - incoming message to process
//  902  *
//  903  * @return  none
//  904  */
//  905 static uint8 zclOpenEvse_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  906 {
//  907   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  908 
//  909   // Device is notified of the Default Response command.
//  910   (void)pInMsg;
//  911 
//  912   return ( TRUE );
//  913 }
//  914 
//  915 #ifdef ZCL_DISCOVER
//  916 /*********************************************************************
//  917  * @fn      zclOpenEvse_ProcessInDiscCmdsRspCmd
//  918  *
//  919  * @brief   Process the Discover Commands Response Command
//  920  *
//  921  * @param   pInMsg - incoming message to process
//  922  *
//  923  * @return  none
//  924  */
//  925 static uint8 zclOpenEvse_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
//  926 {
//  927   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  928   uint8 i;
//  929 
//  930   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
//  931   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
//  932   {
//  933     // Device is notified of the result of its attribute discovery command.
//  934   }
//  935 
//  936   return ( TRUE );
//  937 }
//  938 
//  939 /*********************************************************************
//  940  * @fn      zclOpenEvse_ProcessInDiscAttrsRspCmd
//  941  *
//  942  * @brief   Process the "Profile" Discover Attributes Response Command
//  943  *
//  944  * @param   pInMsg - incoming message to process
//  945  *
//  946  * @return  none
//  947  */
//  948 static uint8 zclOpenEvse_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
//  949 {
//  950   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  951   uint8 i;
//  952 
//  953   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  954   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  955   {
//  956     // Device is notified of the result of its attribute discovery command.
//  957   }
//  958 
//  959   return ( TRUE );
//  960 }
//  961 
//  962 /*********************************************************************
//  963  * @fn      zclOpenEvse_ProcessInDiscAttrsExtRspCmd
//  964  *
//  965  * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  966  *
//  967  * @param   pInMsg - incoming message to process
//  968  *
//  969  * @return  none
//  970  */
//  971 static uint8 zclOpenEvse_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
//  972 {
//  973   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  974   uint8 i;
//  975 
//  976   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
//  977   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  978   {
//  979     // Device is notified of the result of its attribute discovery command.
//  980   }
//  981 
//  982   return ( TRUE );
//  983 }
//  984 #endif // ZCL_DISCOVER
//  985 
//  986 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  987 void zclOpenEvse_sendPower(void)
zclOpenEvse_sendPower:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function zclOpenEvse_sendPower
        CODE
//  988 {
        FUNCALL zclOpenEvse_sendPower, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendPower, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendPower, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendPower, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  989   // Restart max timer because we just sent
//  990   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MAX_EVT, zclOpenEvse_reportPowerMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportPowerMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  991 
//  992   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
//  993                      ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdVolts,
//  994                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdVolts
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0xb
        MOV     R2,#zclOpenEvse_DstAddr & 0xff
        MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  995 
//  996   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
//  997                      ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdAmps,
//  998                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdAmps
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0xb
        MOV     R2,#zclOpenEvse_DstAddr & 0xff
        MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  999 
// 1000   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
// 1001                      ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdWatts,
// 1002                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdWatts
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0xb
        SJMP    ??Subroutine42_0
// 1003 }
          CFI EndBlock cfiBlock184
// 1004 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R5,#0x0
          CFI EndBlock cfiBlock185
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,#zclOpenEvse_DstAddr & 0xff
        MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock186

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1005 void zclOpenEvse_sendTemp(void)
zclOpenEvse_sendTemp:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function zclOpenEvse_sendTemp
        CODE
// 1006 {
        FUNCALL zclOpenEvse_sendTemp, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendTemp, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1007   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETTEMP_MAX_EVT, zclOpenEvse_reportTempMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportTempMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1008 
// 1009   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
// 1010                      ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG, zclOpenEvse_reportCmdTemp,
// 1011                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdTemp
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        SJMP    ?Subroutine2
// 1012 }
          CFI EndBlock cfiBlock187
// 1013 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1014 void zclOpenEvse_sendEnergy(void)
zclOpenEvse_sendEnergy:
          CFI Block cfiBlock188 Using cfiCommon0
          CFI Function zclOpenEvse_sendEnergy
        CODE
// 1015 {
        FUNCALL zclOpenEvse_sendEnergy, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendEnergy, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_sendEnergy, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1016   osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zclOpenEvse_reportEnergyMax
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1017   
// 1018   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
// 1019                      ZCL_CLUSTER_ID_SE_METERING, zclOpenEvse_reportCmdEnergySum,
// 1020                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x7
        MOV     R2,#zclOpenEvse_DstAddr & 0xff
        MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1021 
// 1022   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
// 1023                      ZCL_CLUSTER_ID_SE_METERING, zclOpenEvse_reportCmdEnergyDemand,
// 1024                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x7
        LJMP    ??Subroutine42_0 & 0xFFFF
// 1025 }
          CFI EndBlock cfiBlock188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function zclOpenEvse_sendPower
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclOpenEvse_sendPower
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zclOpenEvse_sendPower
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zclOpenEvse_sendTemp
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclOpenEvse_sendEnergy
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zclOpenEvse_sendEnergy
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclOpenEvse_sendState
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker196 Using cfiCommon1
          CFI (cfiPicker196) NoFunction
          CFI (cfiPicker196) Picker
        MOV     DPTR,#zclOpenEvse_seqNum
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiPicker196

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond197 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zclOpenEvse_sendPower
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_4
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclOpenEvse_sendPower
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_5
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-4
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zclOpenEvse_sendPower
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_6
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-4
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zclOpenEvse_sendTemp
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_7
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-4
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zclOpenEvse_sendEnergy
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_8
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zclOpenEvse_sendEnergy
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_9
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zclOpenEvse_sendState
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_10
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function zclOpenEvse_EVSEResend
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond205) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond205) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond205) CFA_SP SP+-7
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        RET
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206
// 1026 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1027 void zclOpenEvse_sendState(void)
zclOpenEvse_sendState:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function zclOpenEvse_sendState
        CODE
// 1028 {
        FUNCALL zclOpenEvse_sendState, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1029   zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
// 1030                      ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC, zclOpenEvse_reportCmdState,
// 1031                      ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#zclOpenEvse_reportCmdState
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x12
        LJMP    ?Subroutine2 & 0xFFFF
// 1032 }
          CFI EndBlock cfiBlock207
// 1033 
// 1034 void zclOpenEvse_zigbeeReset(void)
// 1035 {
// 1036   int i;
// 1037   
// 1038   for (i = HAL_NV_PAGE_BEG; i <= (HAL_NV_PAGE_BEG + HAL_NV_PAGE_CNT); i++)
// 1039   {
// 1040     HalFlashErase(i);
// 1041   }
// 1042   Onboard_soft_reset();
// 1043 }
// 1044 
// 1045 void zclOpenEvse_EVSESetLimit(uint32 limit)
// 1046 {
// 1047   if (limit == 0xFFFFFF)
// 1048   {
// 1049     limit = 0;
// 1050   }
// 1051   zclOpenEvse_EVSEWriteCmd(EVSE_CMD_SETLIMIT, 1, (int32)limit);
// 1052 }
// 1053 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1054 void zclOpenEvse_EVSEWriteCmd(uint8 command, uint8 numArgs, ...)
zclOpenEvse_EVSEWriteCmd:
          CFI Block cfiBlock208 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
        CODE
// 1055 {
        FUNCALL zclOpenEvse_EVSEWriteCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, zclOpenEvse_nibbletohex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, zclOpenEvse_nibbletohex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_EVSEWriteCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V4,R2
// 1056   static char string[16+5] = "$";
// 1057   static int strLen = 0;
// 1058   unsigned char chk = 0;
        MOV     ?V0,#0x0
// 1059   va_list valist;
// 1060   int i;
// 1061 
// 1062   if (command == EVSE_CMD_NONE) // NONE command means resend last one
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zclOpenEvse_EVSEWriteCmd_0 & 0xFFFF
// 1063   {
// 1064     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)string, strLen);
        ; Setup parameters for call to function HalUARTWrite
// 1065     return;
// 1066   }
// 1067 
// 1068   zclOpenEvse_evseCmd = command;
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    @DPTR,A
// 1069   
// 1070   strcpy(&string[1], (const char *)evseCode[command]);
        ; Setup parameters for call to function strcpy
        ADD     A,R1
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#evseCode & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(evseCode >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R2,#(??string + 1) & 0xff
        MOV     R3,#((??string + 1) >> 8) & 0xff
        LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
// 1071 
// 1072   va_start(valist, numArgs);
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        LCALL   ?Subroutine28 & 0xFFFF
// 1073 
// 1074   for (i = 0; i < numArgs && i < 3; i++)
??CrossCallReturnLabel_110:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??zclOpenEvse_EVSEWriteCmd_1
// 1075   {
// 1076     sprintf(string + strlen(string), " %ld", va_arg(valist, int32));
??zclOpenEvse_EVSEWriteCmd_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,?V2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        LCALL   ?Subroutine28 & 0xFFFF
// 1077   }
??CrossCallReturnLabel_111:
        ; Setup parameters for call to function strlen
        MOV     R2,#??string & 0xff
        MOV     R3,#(??string >> 8) & 0xff
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V7,R3
        MOV     R1,?V7
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#`?<Constant " %ld">` & 0xff
        MOV     R5,#(`?<Constant " %ld">` >> 8) & 0xff
        MOV     A,#??string & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(??string >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        INC     R6
        MOV     A,R6
        JNZ     ??zclOpenEvse_EVSEWriteCmd_1
        INC     R7
??zclOpenEvse_EVSEWriteCmd_1:
        MOV     R0,?V4
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_56:
        JNC     ??zclOpenEvse_EVSEWriteCmd_3
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_57:
        JC      ??zclOpenEvse_EVSEWriteCmd_2
// 1078 
// 1079   va_end(valist);
// 1080 
// 1081   for (strLen = 0; strLen < strlen(string); strLen ++)
??zclOpenEvse_EVSEWriteCmd_3:
        MOV     DPTR,#??strLen
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??zclOpenEvse_EVSEWriteCmd_4
// 1082   {
// 1083     chk ^= string[strLen];
??zclOpenEvse_EVSEWriteCmd_5:
        MOVX    A,@DPTR
        XRL     ?V0,A
// 1084   }
        MOV     DPTR,#??strLen
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
??zclOpenEvse_EVSEWriteCmd_4:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_61:
        ADD     A,#??string & 0xff
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(??string >> 8) & 0xff
        MOV     R7,A
        MOV     DPTR,#??strLen
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        ; Setup parameters for call to function strlen
        MOV     R2,#??string & 0xff
        MOV     R3,#(??string >> 8) & 0xff
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        MOV     ?V2,R2
        MOV     ?V3,R3
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V3
        MOV     DPL,R6
        MOV     DPH,R7
        JC      ??zclOpenEvse_EVSEWriteCmd_5
// 1085   string[strLen++] = '^';
        MOV     A,#0x5e
        LCALL   ?Subroutine27 & 0xFFFF
// 1086   *((uint16 *)(&string[strLen++])) = zclOpenEvse_u8tohex(chk);
??CrossCallReturnLabel_62:
        ADD     A,#0x1
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function zclOpenEvse_nibbletohex
        MOV     A,?V0
        SWAP    A
        ANL     A,#0xf
        MOV     R1,A
        LCALL   `??zclOpenEvse_nibbletohex::?relay`; Banked call to: zclOpenEvse_nibbletohex
        MOV     A,R1
        MOV     ?V2,A
        ; Setup parameters for call to function zclOpenEvse_nibbletohex
        MOV     A,#0xf
        ANL     A,?V0
        MOV     R1,A
        LCALL   `??zclOpenEvse_nibbletohex::?relay`; Banked call to: zclOpenEvse_nibbletohex
        MOV     A,#??string & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(??string >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V2
        LCALL   ??Subroutine41_0 & 0xFFFF
// 1087   strLen++;
??CrossCallReturnLabel_106:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPTR,#??strLen
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine6 & 0xFFFF
// 1088   string[strLen++] = '\r';
??CrossCallReturnLabel_11:
        MOV     A,#0xd
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine6 & 0xFFFF
// 1089   string[strLen++] = 0;
??CrossCallReturnLabel_12:
        CLR     A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX    @DPTR,A
// 1090   
// 1091   HalUARTWrite(HAL_UART_PORT_0, (uint8 *)string, strLen);
        ; Setup parameters for call to function HalUARTWrite
??zclOpenEvse_EVSEWriteCmd_0:
        MOV     DPTR,#??strLen
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     R2,#??string & 0xff
        MOV     R3,#(??string >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1092 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock208

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_64:
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_27
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-4
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_28
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_11
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_12
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker218 Using cfiCommon1
          CFI (cfiPicker218) NoFunction
          CFI (cfiPicker218) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#??strLen
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiPicker218

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond219 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_63:
        ADD     A,#??string & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(??string >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221
// 1093 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1094 inline void zclOpenEvse_EVSEResend(void)
zclOpenEvse_EVSEResend:
          CFI Block cfiBlock222 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEResend
        CODE
// 1095 {
        FUNCALL zclOpenEvse_EVSEResend, zclOpenEvse_EVSEWriteCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1096   if (zclOpenEvse_evseResendCtr++ > 10)
        MOV     DPTR,#zclOpenEvse_evseResendCtr
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_74:
        CLR     C
        SUBB    A,#0xb
        JC      ??zclOpenEvse_EVSEResend_0
// 1097   {
// 1098     zclOpenEvse_evseCmd = EVSE_CMD_NONE;
        MOV     DPTR,#zclOpenEvse_evseCmd
        CLR     A
        MOVX    @DPTR,A
// 1099     return;
        SJMP    ??zclOpenEvse_EVSEResend_1
// 1100   }
// 1101 
// 1102   zclOpenEvse_EVSEWriteCmd(zclOpenEvse_evseCmd, 0);
??zclOpenEvse_EVSEResend_0:
        ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
        MOV     R2,#0x0
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
// 1103 }
??zclOpenEvse_EVSEResend_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock222
// 1104 
// 1105 void zclOpenEvse_UARTInit(void)
// 1106 {
// 1107   halUARTCfg_t uartConfig;
// 1108 
// 1109   /* UART Configuration */
// 1110   uartConfig.configured           = TRUE;
// 1111   uartConfig.baudRate             = HAL_UART_BR_115200;
// 1112   uartConfig.flowControl          = FALSE;
// 1113   uartConfig.flowControlThreshold = 0;
// 1114   uartConfig.rx.maxBufSize        = 64;
// 1115   uartConfig.tx.maxBufSize        = 64;
// 1116   uartConfig.idleTimeout          = 6;
// 1117   uartConfig.intEnable            = TRUE;
// 1118   uartConfig.callBackFunc         = zclOpenEvse_UARTCallback;
// 1119 
// 1120   /* Start UART */
// 1121   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
// 1122 }
// 1123 
// 1124 uint8 rxIndex;
// 1125 uint8 rxData[34];
// 1126 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1127 void zclOpenEvse_UARTCallback(uint8 port, uint8 event)
zclOpenEvse_UARTCallback:
          CFI Block cfiBlock223 Using cfiCommon0
          CFI Function zclOpenEvse_UARTCallback
        CODE
// 1128 {
        FUNCALL zclOpenEvse_UARTCallback, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTCallback, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTCallback, zclOpenEvse_UARTParse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        SJMP    ??zclOpenEvse_UARTCallback_0
// 1129   uint8 ch;
// 1130   while (Hal_UART_RxBufLen(port))
// 1131   {
// 1132     HalUARTRead (port, &ch, 1);
// 1133     switch (ch)
// 1134     {
// 1135     case '$':
// 1136       rxIndex = 0;
??zclOpenEvse_UARTCallback_1:
        MOV     DPTR,#rxIndex
        CLR     A
??zclOpenEvse_UARTCallback_2:
        MOVX    @DPTR,A
// 1137       break;
??zclOpenEvse_UARTCallback_0:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     A,R6
        MOV     R1,A
        LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclOpenEvse_UARTCallback_3
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     A,R6
        MOV     R1,A
        LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV     DPTR,#rxIndex
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#rxData & 0xff
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#(rxData >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0xd
        JZ      ??zclOpenEvse_UARTCallback_4
        ADD     A,#-0x17
        JZ      ??zclOpenEvse_UARTCallback_1
        SJMP    ??zclOpenEvse_UARTCallback_5
// 1138     case '\r':
// 1139       rxData[rxIndex] = 0;
??zclOpenEvse_UARTCallback_4:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
// 1140       zclOpenEvse_UARTParse((char *)rxData);
        ; Setup parameters for call to function zclOpenEvse_UARTParse
        MOV     R2,#rxData & 0xff
        MOV     R3,#(rxData >> 8) & 0xff
        LCALL   `??zclOpenEvse_UARTParse::?relay`; Banked call to: zclOpenEvse_UARTParse
// 1141       break;
        SJMP    ??zclOpenEvse_UARTCallback_0
// 1142     default:
// 1143       if (rxIndex >= 64) break;
??zclOpenEvse_UARTCallback_5:
        MOV     DPTR,#rxIndex
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x40
        JNC     ??zclOpenEvse_UARTCallback_0
// 1144       rxData[rxIndex++] = ch;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        MOV     DPTR,#rxIndex
        MOVX    A,@DPTR
        INC     A
        SJMP    ??zclOpenEvse_UARTCallback_2
// 1145       break;
// 1146     }
// 1147   }
// 1148 }
??zclOpenEvse_UARTCallback_3:
        MOV     A,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock223
// 1149 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1150 void zclOpenEvse_UARTParse(char * rxData)
zclOpenEvse_UARTParse:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function zclOpenEvse_UARTParse
        CODE
// 1151 {
        FUNCALL zclOpenEvse_UARTParse, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_sendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, HalFlashErase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_EVSEResend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_EVSEResend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_EVSEResend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_EVSEResend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, strtok
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, zclOpenEvse_EVSEResend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOpenEvse_UARTParse, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1152   if (!strncmp((const char *)rxData, evseCode[EVSE_CMD_STATE], 2)) // Asynchronous state update
        MOV     A,R2
        ADD     A,#0x3
        MOV     R6,A
        CLR     A
        ADDC    A,?V1
        MOV     R7,A
        ; Setup parameters for call to function strncmp
        MOV     ?V2,#0x2
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPTR,#evseCode + 2
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JNZ     ??zclOpenEvse_UARTParse_0
// 1153   {
// 1154     char * valid = NULL;
        LCALL   ?Subroutine15 & 0xFFFF
// 1155     uint8 state = strtol((const char *)&rxData[3], &valid, 16);
??CrossCallReturnLabel_29:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtol::?relay`   ; Banked call to: strtol
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,R2
// 1156     if (valid)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_89:
        JZ      ??zclOpenEvse_UARTParse_1
// 1157     {
// 1158       if (zclOpenEvse_backlight == LIGHT_OFF) // Turn backlight back off after change of state
        MOV     DPTR,#zclOpenEvse_backlight
        MOVX    A,@DPTR
        JNZ     ??zclOpenEvse_UARTParse_2
// 1159       {
// 1160         osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_BACKLIGHT_OFF_EVT, 5000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1388
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zclOpenEvse_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1161       }
// 1162       zclOpenEvse_state = state;
??zclOpenEvse_UARTParse_2:
        MOV     DPTR,#zclOpenEvse_state
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1163       zclOpenEvse_sendState();
        ; Setup parameters for call to function zclOpenEvse_sendState
        LCALL   `??zclOpenEvse_sendState::?relay`; Banked call to: zclOpenEvse_sendState
// 1164     }
// 1165     return;
??zclOpenEvse_UARTParse_1:
        LJMP    ??zclOpenEvse_UARTParse_3 & 0xFFFF
// 1166   }
// 1167   else if (!strncmp((const char *)rxData, evseCode[EVSE_CMD_WIFI], 2)) // Asynchronous wifi update
??zclOpenEvse_UARTParse_0:
        ; Setup parameters for call to function strncmp
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPTR,#evseCode + 4
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JNZ     ??zclOpenEvse_UARTParse_4
// 1168   {
// 1169     zclOpenEvse_zigbeeReset();
        MOV     R6,#0x79
        MOV     R7,#0x0
??zclOpenEvse_UARTParse_5:
        ; Setup parameters for call to function HalFlashErase
        MOV     A,R6
        MOV     R1,A
        LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
        INC     R6
        MOV     A,R6
        JNZ     ??zclOpenEvse_UARTParse_6
        INC     R7
??zclOpenEvse_UARTParse_6:
        CLR     C
        SUBB    A,#-0x80
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_58:
        JC      ??zclOpenEvse_UARTParse_5
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
// 1170     return;
// 1171   } else if (strncmp((const char *)rxData, "OK", 2)) // If not OK resend
        LJMP    ??zclOpenEvse_UARTParse_3 & 0xFFFF
??zclOpenEvse_UARTParse_4:
        ; Setup parameters for call to function strncmp
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#`?<Constant "OK">` & 0xff
        MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      $+5
        LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
// 1172   {
// 1173     zclOpenEvse_EVSEResend();
        ; Setup parameters for call to function zclOpenEvse_EVSEResend
// 1174     return;
// 1175   }
// 1176   
// 1177   switch (zclOpenEvse_evseCmd)
        MOV     ?V0,#`?<Constant " ">` & 0xff
        MOV     ?V1,#(`?<Constant " ">` >> 8) & 0xff
        MOV     DPTR,#zclOpenEvse_evseCmd
        MOVX    A,@DPTR
        ADD     A,#-0x8
        JZ      ??zclOpenEvse_UARTParse_8
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_UARTParse_9 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_UARTParse_10 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_UARTParse_11 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??zclOpenEvse_UARTParse_12 & 0xFFFF
        LJMP    ??zclOpenEvse_UARTParse_13 & 0xFFFF
// 1178   {
// 1179   case EVSE_CMD_GETPOWER:
// 1180     {
// 1181       char * amps = strtok(&rxData[3], " ");
??zclOpenEvse_UARTParse_8:
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1182       char * volts = strtok(NULL, " ");
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1183       if (!amps || !volts)
        MOV     A,R6
        ORL     A,R7
        JZ      ??zclOpenEvse_UARTParse_14
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??zclOpenEvse_UARTParse_15
// 1184       {
// 1185         zclOpenEvse_EVSEResend();
??zclOpenEvse_UARTParse_14:
        ; Setup parameters for call to function zclOpenEvse_EVSEResend
        LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
// 1186         return;
// 1187       }
// 1188       if (atol(volts) != -1)
??zclOpenEvse_UARTParse_15:
        MOV     DPTR,#__Constant_ffffffff
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        ; Setup parameters for call to function atol
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     R0,#?V4
        LCALL   ?L_EQ_X
        JZ      ??zclOpenEvse_UARTParse_16
// 1189       {
// 1190         zclOpenEvse_voltsScaled = (uint16) (atol(volts) * 0.01);
        ; Setup parameters for call to function atol
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     R0,#?V0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3c23d70a
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#zclOpenEvse_voltsScaled
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        SJMP    ??zclOpenEvse_UARTParse_17
// 1191       }
// 1192       else
// 1193       {
// 1194         zclOpenEvse_voltsScaled = (zclOpenEvse_powerLevel == 2) ? OPENEVSE_L2_VOLTS : OPENEVSE_L1_VOLTS;
??zclOpenEvse_UARTParse_16:
        MOV     DPTR,#zclOpenEvse_powerLevel
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     DPTR,#zclOpenEvse_voltsScaled
        JNZ     ??zclOpenEvse_UARTParse_18
        MOV     A,#0x60
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x9
        SJMP    ??zclOpenEvse_UARTParse_17
??zclOpenEvse_UARTParse_18:
        MOV     A,#-0x50
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x4
??zclOpenEvse_UARTParse_17:
        MOVX    @DPTR,A
// 1195       }
// 1196 
// 1197       if (atol(amps) != -1)
        MOV     DPTR,#__Constant_ffffffff
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        ; Setup parameters for call to function atol
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??zclOpenEvse_UARTParse_19
// 1198       {
// 1199         zclOpenEvse_ampsScaled = (uint16) (atol(amps) * 0.01);
        ; Setup parameters for call to function atol
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     R0,#?V0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3c23d70a
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#zclOpenEvse_ampsScaled
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 1200       }
// 1201       zclOpenEvse_wattsScaled = (int16) ((float)zclOpenEvse_voltsScaled * (float)zclOpenEvse_ampsScaled * 0.001);
??zclOpenEvse_UARTParse_19:
        MOV     DPTR,#zclOpenEvse_voltsScaled
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#zclOpenEvse_ampsScaled
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V4
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_3a83126f
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#zclOpenEvse_wattsScaled
        SJMP    ??zclOpenEvse_UARTParse_20
// 1202     }
// 1203     break;
// 1204   case EVSE_CMD_GETTEMP:
// 1205     {
// 1206       char * ds3231 = strtok(&rxData[3], " ");
??zclOpenEvse_UARTParse_9:
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1207       char * mcp9808 = strtok(NULL, " ");
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1208       char * tmp007 = strtok(NULL, " ");
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V1,R3
        MOV     R1,?V1
// 1209       if (!ds3231 || !mcp9808 || !tmp007)
        MOV     A,R6
        ORL     A,R7
        JZ      ??zclOpenEvse_UARTParse_21
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??zclOpenEvse_UARTParse_21
        MOV     A,R2
        ORL     A,R1
        JNZ     ??zclOpenEvse_UARTParse_22
// 1210       {
// 1211         zclOpenEvse_EVSEResend();
??zclOpenEvse_UARTParse_21:
        ; Setup parameters for call to function zclOpenEvse_EVSEResend
        LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
// 1212         return;
// 1213       }
// 1214       zclOpenEvse_temperature = (int16) (atoi(ds3231) * (1.0 / 10)); // Tenths of degree C to degrees C
??zclOpenEvse_UARTParse_22:
        ; Setup parameters for call to function atoi
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        LCALL   ?Subroutine24 & 0xFFFF
// 1215     }
??CrossCallReturnLabel_55:
        MOV     R0,#?V0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3dcccccd
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#zclOpenEvse_temperature
??zclOpenEvse_UARTParse_20:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        LJMP    ??zclOpenEvse_UARTParse_23 & 0xFFFF
// 1216     break;
// 1217   case EVSE_CMD_GETENERGY:
// 1218     {
// 1219       char * wattSecs = strtok(&rxData[3], " ");
??zclOpenEvse_UARTParse_10:
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1220       char * wattAcc = strtok(NULL, " ");
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1221       if (!wattSecs || !wattAcc)
        MOV     A,R6
        ORL     A,R7
        JZ      ??zclOpenEvse_UARTParse_7
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??zclOpenEvse_UARTParse_24
// 1222       {
// 1223         zclOpenEvse_EVSEResend();
??zclOpenEvse_UARTParse_25:
        ; Setup parameters for call to function zclOpenEvse_EVSEResend
        SJMP    ??zclOpenEvse_UARTParse_7
// 1224         return;
// 1225       }
// 1226       zclOpenEvse_energyDemand = (uint32) (atol(wattSecs) * (1.0 / 3600)); // Convert watt-seconds to watt-hours
??zclOpenEvse_UARTParse_24:
        ; Setup parameters for call to function atol
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
        MOV     R0,#?V4
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3991a2b4
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V8
        LCALL   ?FLT_MUL
        MOV     R0,#?V4
        LCALL   ?FLT_TO_UL
        MOV     DPTR,#zclOpenEvse_energyDemand
        MOV     R0,#?V4
        LCALL   ?L_MOV_TO_X
// 1227       *((uint32 *)&zclOpenEvse_energySum) = (uint32) atol(wattAcc); // Already in watt-hours
        ; Setup parameters for call to function atol
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??atol::?relay`     ; Banked call to: atol
        MOV     DPTR,#zclOpenEvse_energySum
        LCALL   ?XSTORE_R2345
// 1228     }
// 1229     break;
        SJMP    ??zclOpenEvse_UARTParse_13
// 1230   case EVSE_CMD_GETSTATE:
// 1231     {
// 1232       char * valid = NULL;
??zclOpenEvse_UARTParse_11:
        LCALL   ?Subroutine15 & 0xFFFF
// 1233       uint8 state = strtol((const char *)&rxData[3], &valid, 16);
??CrossCallReturnLabel_30:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtol::?relay`   ; Banked call to: strtol
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1234       if (valid)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_90:
        JZ      ??zclOpenEvse_UARTParse_13
// 1235       {
// 1236         zclOpenEvse_state = state;
        MOV     DPTR,#zclOpenEvse_state
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        SJMP    ??zclOpenEvse_UARTParse_23
// 1237       }
// 1238     }
// 1239     break;
// 1240   case EVSE_CMD_GETLEVEL:
// 1241     {
// 1242       char * level = strtok(&rxData[3], " ");
??zclOpenEvse_UARTParse_12:
        ; Setup parameters for call to function strtok
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strtok::?relay`   ; Banked call to: strtok
// 1243       if (!level)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zclOpenEvse_UARTParse_26
// 1244       {
// 1245         zclOpenEvse_EVSEResend();
        ; Setup parameters for call to function zclOpenEvse_EVSEResend
??zclOpenEvse_UARTParse_7:
        LCALL   `??zclOpenEvse_EVSEResend::?relay`; Banked call to: zclOpenEvse_EVSEResend
// 1246         return;
        SJMP    ??zclOpenEvse_UARTParse_3
// 1247       }
// 1248       
// 1249       zclOpenEvse_powerLevel = atoi(level);
??zclOpenEvse_UARTParse_26:
        ; Setup parameters for call to function atoi
        LCALL   `??atoi::?relay`     ; Banked call to: atoi
        MOV     A,R2
        MOV     DPTR,#zclOpenEvse_powerLevel
??zclOpenEvse_UARTParse_23:
        MOVX    @DPTR,A
// 1250     }
// 1251     break;
// 1252     
// 1253   }
// 1254 
// 1255   zclOpenEvse_evseCmd = EVSE_CMD_NONE;
??zclOpenEvse_UARTParse_13:
        MOV     DPTR,#zclOpenEvse_evseCmd
        CLR     A
        MOVX    @DPTR,A
// 1256   zclOpenEvse_evseResendCtr = 0;
        MOV     DPTR,#zclOpenEvse_evseResendCtr
        MOVX    @DPTR,A
// 1257 }
??zclOpenEvse_UARTParse_3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zclOpenEvse_UARTParse
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function zclOpenEvse_event_loop
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zclOpenEvse_event_loop
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function zclOpenEvse_event_loop
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zclOpenEvse_UARTParse
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker233 Using cfiCommon1
          CFI (cfiPicker233) NoFunction
          CFI (cfiPicker233) Picker
        MOV     ?V0,R2
        MOV     A,R3
        MOV     ?V1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V2,A
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiPicker233

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond234 Using cfiCommon0
          CFI Function zclOpenEvse_EVSEWriteCmd
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zclOpenEvse_EVSEWriteCmd
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function zclOpenEvse_UARTParse
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zclOpenEvse_UARTParse
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function zclOpenEvse_UARTParse
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zclOpenEvse_UARTParse
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker241 Using cfiCommon1
          CFI (cfiPicker241) NoFunction
          CFI (cfiPicker241) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function strtol
        ; Setup parameters for call to function strtol
        MOV     ?V0,#0x10
        MOV     ?V1,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiPicker241
// 1258 
// 1259 // converts 4-bit nibble to ascii hex

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1260 uint8 zclOpenEvse_nibbletohex(uint8 value)
zclOpenEvse_nibbletohex:
          CFI Block cfiBlock242 Using cfiCommon0
          CFI Function zclOpenEvse_nibbletohex
        CODE
// 1261 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
// 1262     if (value >= 10) return value - 10 + 'A';
        CLR     C
        SUBB    A,#0xa
        JC      ??zclOpenEvse_nibbletohex_0
        MOV     A,#0x37
        SJMP    ??zclOpenEvse_nibbletohex_1
// 1263     return value + '0';
??zclOpenEvse_nibbletohex_0:
        MOV     A,#0x30
??zclOpenEvse_nibbletohex_1:
        ADD     A,R1
        MOV     R1,A
        LJMP    ?BRET
// 1264 }
          CFI EndBlock cfiBlock242

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for evseCode>`:
        DATA16
        DW `?<Constant "">`
        DW `?<Constant "ST">`
        DW `?<Constant "WF">`
        DW `?<Constant "FS">`
        DW `?<Constant "FE">`
        DW `?<Constant "FB 0">`
        DW `?<Constant "S0 1">`
        DW `?<Constant "FB 6">`
        DW `?<Constant "GG">`
        DW `?<Constant "GP">`
        DW `?<Constant "GU">`
        DW `?<Constant "GS">`
        DW `?<Constant "GL">`
        DW `?<Constant "SH">`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportPowerMin>`:
        DATA32
        DD 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportPowerMax>`:
        DATA32
        DD 60000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportTempMax>`:
        DATA32
        DD 120000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportEnergyMax>`:
        DATA32
        DD 180000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportPowerChang`:
        DATA32
        DD 50

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportPowerChang_1`:
        DATA32
        DD 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_reportPowerChang_2`:
        DATA32
        DD 20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOpenEvse_CmdCallbacks>`:
        DATA16
        DW `??zclOpenEvse_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclOpenEvse_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for firstTime>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for string>`:
        DB "$"
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_sendPower::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_sendPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_sendTemp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_sendTemp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_sendEnergy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_sendEnergy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_sendState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_sendState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_EVSEWriteCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_EVSEWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_EVSEResend::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_EVSEResend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_UARTCallback::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_UARTCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_UARTParse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_UARTParse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclOpenEvse_nibbletohex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclOpenEvse_nibbletohex

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ST">`:
        DB "ST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WF">`:
        DB "WF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FS">`:
        DB "FS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FE">`:
        DB "FE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FB 0">`:
        DB "FB 0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "S0 1">`:
        DB "S0 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FB 6">`:
        DB "FB 6"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GG">`:
        DB "GG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GP">`:
        DB "GP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GU">`:
        DB "GU"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GS">`:
        DB "GS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GL">`:
        DB "GL"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SH">`:
        DB "SH"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " %ld">`:
        DB " %ld"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffff:
        DD 16777215

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffffff:
        DD -1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3c23d70a:
        DD 3C23D70AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a83126f:
        DD 3A83126FH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3dcccccd:
        DD 3DCCCCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3991a2b4:
        DD 3991A2B4H

        END
// 1265 
// 1266 // returns value as 2 ascii characters in a 16-bit int
// 1267 uint16 zclOpenEvse_u8tohex(uint8 value)
// 1268 {
// 1269     uint16 hexdigits;
// 1270 
// 1271     uint8 lodigit = (value >> 4);
// 1272     uint8 hidigit = (value & 0x0F);
// 1273     hexdigits = zclOpenEvse_nibbletohex(lodigit);
// 1274     hexdigits |= (zclOpenEvse_nibbletohex(hidigit) << 8);
// 1275 
// 1276     return hexdigits;
// 1277 }
// 1278 /****************************************************************************
// 1279 ****************************************************************************/
// 1280 
// 1281 
// 
// 3 999 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//   101 bytes in segment XDATA_I
//   101 bytes in segment XDATA_ID
//    96 bytes in segment XDATA_ROM_C
//    81 bytes in segment XDATA_Z
// 
//   179 bytes of CODE     memory
//    56 bytes of CONST    memory (+ 40 bytes shared)
// 3 999 bytes of HUGECODE memory
//   182 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
