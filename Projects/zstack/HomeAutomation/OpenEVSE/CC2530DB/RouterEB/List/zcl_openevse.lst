###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                25/Nov/2016  14:12:39
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D HAL_UART=TRUE -D
#        HAL_UART_DMA_RX_MAX=64 -D HAL_PA_LNA_CC2592 -D NV_INIT -D NV_RESTORE
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_BASIC -D ZCL_ON_OFF -D ZCL_ELECTRICAL_MEASUREMENT -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\List\zcl_openevse.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\CC2530DB\RouterEB\Obj\zcl_openevse.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\OpenEVSE\Source\zcl_openevse.c
      1          /**************************************************************************************************
      2            Filename:       zcl_openevse.c
      3          
      4            Description:    Zigbee Cluster Library - device application for OpenEVSE.
      5          
      6          
      7            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
      8            Copyright 2015 Ryan Press
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          #include <string.h>
     43          #include <stdlib.h>
     44          #include <stdarg.h>
     45          #include <stdio.h>
     46          
     47          #include "ZComDef.h"
     48          #include "OSAL.h"
     49          #include "AF.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "MT_SYS.h"
     53          
     54          #include "nwk_util.h"
     55          
     56          #include "zcl.h"
     57          #include "zcl_general.h"
     58          #include "zcl_ha.h"
     59          #include "zcl_ezmode.h"
     60          #include "zcl_diagnostic.h"
     61          #include "zcl_electrical_measurement.h"
     62          #include "zcl_openevse.h"
     63          
     64          #include "onboard.h"
     65          
     66          /* HAL */
     67          #include "hal_lcd.h"
     68          #include "hal_led.h"
     69          #include "hal_key.h"
     70          #include "hal_flash.h"
     71          
     72          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     73                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     74          #include "zgp_translationtable.h"
     75            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     76              #define ZGP_AUTO_TT
     77            #endif
     78          #endif
     79          
     80          #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
     81          #include "math.h"
     82          #include "hal_timer.h"
     83          #endif
     84          
     85          #include "NLMEDE.h"
     86          
     87          /*********************************************************************
     88           * MACROS
     89           */
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          enum evseCmd { EVSE_CMD_NONE, EVSE_CMD_STATE, EVSE_CMD_WIFI, EVSE_CMD_SLEEP, EVSE_CMD_ENABLE,
     96                            EVSE_CMD_LCDOFF, EVSE_CMD_LCDRGB, EVSE_CMD_LCDTEAL, EVSE_CMD_GETPOWER,
     97                            EVSE_CMD_GETTEMP, EVSE_CMD_GETENERGY, EVSE_CMD_GETSTATE, EVSE_CMD_GETLEVEL,
     98                            EVSE_CMD_SETLIMIT };
     99          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          const char * evseCode[] = { "", "ST", "WF", "FS", "FE",
   \                     evseCode:
   \   000000                DS 28
   \   00001C                REQUIRE `?<Initializer for evseCode>`
   \   00001C                REQUIRE __INIT_XDATA_I
    101                                      "FB 0", "S0 1", "FB 6", "GG",
    102                                      "GP", "GU", "GS", "GL",
    103                                      "SH" };
    104          
    105          #define POLL_EVSE_PERIOD 200
    106          #define OPENEVSE_BL_NV 0x0401
    107          #define OPENEVSE_LIMIT_NV 0x0402
    108          #define OPENEVSE_L2_VOLTS 2400
    109          #define OPENEVSE_L1_VOLTS 1200
    110          
    111          /*********************************************************************
    112           * TYPEDEFS
    113           */
    114          
    115          /*********************************************************************
    116           * GLOBAL VARIABLES
    117           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          byte zclOpenEvse_TaskID;
   \                     zclOpenEvse_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          uint8 zclOpenEvse_seqNum = 0;
   \                     zclOpenEvse_seqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          
    121          /*********************************************************************
    122           * GLOBAL FUNCTIONS
    123           */
    124          
    125          /*********************************************************************
    126           * LOCAL VARIABLES
    127           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          afAddrType_t zclOpenEvse_DstAddr;
   \                     zclOpenEvse_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    129          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          uint16 bindingInClusters[] =
   \                     bindingInClusters:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for bindingInClusters>`
   \   000002                REQUIRE __INIT_XDATA_I
    131          {
    132            ZCL_CLUSTER_ID_GEN_ON_OFF
    133          };
    134          #define zclOpenEvse_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    138          devStates_t zclOpenEvse_NwkState = DEV_INIT;
   \                     zclOpenEvse_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclOpenEvse_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 zclOpenEvse_evseResendCtr = 0;
   \                     zclOpenEvse_evseResendCtr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 zclOpenEvse_evseCmd = EVSE_CMD_NONE;
   \                     zclOpenEvse_evseCmd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zclOpenEvse_powerLevel = 0;
   \                     zclOpenEvse_powerLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint32 zclOpenEvse_reportPowerMin =  2000; // 2 seconds
   \                     zclOpenEvse_reportPowerMin:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportPowerMin>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          uint32 zclOpenEvse_reportPowerMax =  60000; // 1 minute
   \                     zclOpenEvse_reportPowerMax:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportPowerMax>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint32 zclOpenEvse_reportTempMax =   120000; // 2 minutes
   \                     zclOpenEvse_reportTempMax:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportTempMax>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint32 zclOpenEvse_reportEnergyMax = 180000; // 3 minutes
   \                     zclOpenEvse_reportEnergyMax:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportEnergyMax>`
   \   000004                REQUIRE __INIT_XDATA_I
    149          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    150          uint32 zclOpenEvse_reportPowerChangedVolts = 5 * 10.0; // 5 volts
   \                     zclOpenEvse_reportPowerChangedVolts:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint32 zclOpenEvse_reportPowerChangedAmps =  1 * 10.0; // 1 amp
   \                     zclOpenEvse_reportPowerChangedAmps:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang_1`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          uint32 zclOpenEvse_reportPowerChangedWatts = 200 / 10.0; // 200 watts
   \                     zclOpenEvse_reportPowerChangedWatts:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zclOpenEvse_reportPowerChang_2`
   \   000004                REQUIRE __INIT_XDATA_I
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          zclReportCmd_t * zclOpenEvse_reportCmdVolts;
   \                     zclOpenEvse_reportCmdVolts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          zclReportCmd_t * zclOpenEvse_reportCmdAmps;
   \                     zclOpenEvse_reportCmdAmps:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          zclReportCmd_t * zclOpenEvse_reportCmdWatts;
   \                     zclOpenEvse_reportCmdWatts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          zclReportCmd_t * zclOpenEvse_reportCmdTemp;
   \                     zclOpenEvse_reportCmdTemp:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          zclReportCmd_t * zclOpenEvse_reportCmdEnergySum;
   \                     zclOpenEvse_reportCmdEnergySum:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          zclReportCmd_t * zclOpenEvse_reportCmdEnergyDemand;
   \                     zclOpenEvse_reportCmdEnergyDemand:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          zclReportCmd_t * zclOpenEvse_reportCmdState;
   \                     zclOpenEvse_reportCmdState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    161          
    162          /*********************************************************************
    163           * LOCAL FUNCTIONS
    164           */
    165          static void zclOpenEvse_BasicResetCB(void);
    166          static void zclOpenEvse_OnOffCB(uint8 cmd);
    167          static void zclOpenEvse_Identify(void);
    168          
    169          static void zclOpenEvse_sendPower(void);
    170          static void zclOpenEvse_sendTemp(void);
    171          static void zclOpenEvse_sendEnergy(void);
    172          static void zclOpenEvse_sendState(void);
    173          static void zclOpenEvse_zigbeeReset(void);
    174          static void zclOpenEvse_EVSESetLimit(uint32 limit);
    175          static void zclOpenEvse_EVSEWriteCmd(uint8 command, uint8 numArgs, ...);
    176          static void zclOpenEvse_EVSEResend(void);
    177          static void zclOpenEvse_UARTInit(void);
    178          static void zclOpenEvse_UARTCallback(uint8 port, uint8 event);
    179          static void zclOpenEvse_UARTParse(char * rxData);
    180          static uint8 zclOpenEvse_nibbletohex(uint8 value);
    181          static uint16 zclOpenEvse_u8tohex(uint8 value);
    182          
    183          // Functions to process ZCL Foundation incoming Command/Response messages
    184          static void zclOpenEvse_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    185          #ifdef ZCL_READ
    186          static uint8 zclOpenEvse_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    187          #endif
    188          #ifdef ZCL_WRITE
    189          static uint8 zclOpenEvse_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    190          #endif
    191          static uint8 zclOpenEvse_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    192          #ifdef ZCL_DISCOVER
    193          static uint8 zclOpenEvse_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    194          static uint8 zclOpenEvse_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    195          static uint8 zclOpenEvse_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    196          #endif
    197          
    198          /*********************************************************************
    199           * STATUS STRINGS
    200           */
    201          /*********************************************************************
    202           * ZCL General Profile Callback table
    203           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          static zclGeneral_AppCallbacks_t zclOpenEvse_CmdCallbacks =
   \                     zclOpenEvse_CmdCallbacks:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for zclOpenEvse_CmdCallbacks>`
   \   000014                REQUIRE __INIT_XDATA_I
    205          {
    206            zclOpenEvse_BasicResetCB,            // Basic Cluster Reset command
    207            NULL,                                   // Identify command
    208          #ifdef ZCL_EZMODE
    209            NULL,                                   // Identify EZ-Mode Invoke command
    210            NULL,                                   // Identify Update Commission State command
    211          #endif
    212            NULL,                                   // Identify Trigger Effect command
    213            NULL,                                   // Identify Query Response command
    214            zclOpenEvse_OnOffCB,                 // On/Off cluster commands
    215            NULL,                                   // On/Off cluster enhanced command Off with Effect
    216            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    217            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    218          #ifdef ZCL_LEVEL_CTRL
    219            NULL,                                   // Level Control Move to Level command
    220            NULL,                                   // Level Control Move command
    221            NULL,                                   // Level Control Step command
    222            NULL,                                   // Level Control Stop command
    223          #endif
    224          #ifdef ZCL_GROUPS
    225            NULL,                                   // Group Response commands
    226          #endif
    227          #ifdef ZCL_SCENES
    228            NULL,                                  // Scene Store Request command
    229            NULL,                                  // Scene Recall Request command
    230            NULL,                                  // Scene Response command
    231          #endif
    232          #ifdef ZCL_ALARMS
    233            NULL,                                  // Alarm (Response) commands
    234          #endif
    235          #ifdef SE_UK_EXT
    236            NULL,                                  // Get Event Log command
    237            NULL,                                  // Publish Event Log command
    238          #endif
    239            NULL,                                  // RSSI Location command
    240            NULL                                   // RSSI Location Response command
    241          };
    242          
    243          /*********************************************************************
    244           * @fn          zclOpenEvse_Init
    245           *
    246           * @brief       Initialization function for the zclGeneral layer.
    247           *
    248           * @param       none
    249           *
    250           * @return      none
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          void zclOpenEvse_Init( byte task_id )
   \                     zclOpenEvse_Init:
    253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    254            zclOpenEvse_UARTInit();
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   7404         MOV     A,#0x4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   740A         MOV     A,#0xa
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7440         MOV     A,#0x40
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   7412         MOV     A,#0x12
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   7440         MOV     A,#0x40
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   7405         MOV     A,#0x5
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7406         MOV     A,#0x6
   \   000048   F0           MOVX    @DPTR,A
   \   000049   7416         MOV     A,#0x16
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   7401         MOV     A,#0x1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   741B         MOV     A,#0x1b
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   74..         MOV     A,#`??zclOpenEvse_UARTCallback::?relay` & 0xff
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   74..         MOV     A,#(`??zclOpenEvse_UARTCallback::?relay` >> 8) & 0xff
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function HalUARTOpen
   \   00005D   AA..         MOV     R2,?XSP + 0
   \   00005F   AB..         MOV     R3,?XSP + 1
   \   000061   7900         MOV     R1,#0x0
   \   000063   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    255          
    256            zclOpenEvse_TaskID = task_id;
   \   000066   EE           MOV     A,R6
   \   000067   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   00006A   F0           MOVX    @DPTR,A
    257          
    258            // Set destination address to indirect
    259            zclOpenEvse_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00006B   90....       MOV     DPTR,#zclOpenEvse_DstAddr + 8
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    260            zclOpenEvse_DstAddr.endPoint = 0;
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
    261            zclOpenEvse_DstAddr.addr.shortAddr = 0;
   \   000072   90....       MOV     DPTR,#zclOpenEvse_DstAddr
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
    262          
    263            // This app is part of the Home Automation Profile
    264            zclHA_Init( &zclOpenEvse_SimpleDesc );
   \   000078                ; Setup parameters for call to function zclHA_Init
   \   000078   7A..         MOV     R2,#zclOpenEvse_SimpleDesc & 0xff
   \   00007A   7B..         MOV     R3,#(zclOpenEvse_SimpleDesc >> 8) & 0xff
   \   00007C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    265            zclHA_Init( &zclOpenEvse_BlSimpleDesc );
   \   00007F                ; Setup parameters for call to function zclHA_Init
   \   00007F   7A..         MOV     R2,#zclOpenEvse_BlSimpleDesc & 0xff
   \   000081   7B..         MOV     R3,#(zclOpenEvse_BlSimpleDesc >> 8) & 0xff
   \   000083   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    266          
    267            // Register the ZCL General Cluster Library callback functions
    268            zclGeneral_RegisterCmdCallbacks( OPENEVSE_ENDPOINT, &zclOpenEvse_CmdCallbacks );
   \   000086                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000086   7A..         MOV     R2,#zclOpenEvse_CmdCallbacks & 0xff
   \   000088   7B..         MOV     R3,#(zclOpenEvse_CmdCallbacks >> 8) & 0xff
   \   00008A   7908         MOV     R1,#0x8
   \   00008C   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    269          
    270            // Register the backlight callback functions
    271            zclGeneral_RegisterCmdCallbacks( OPENEVSE_ENDPOINT+1, &zclOpenEvse_CmdCallbacks );
   \   00008F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00008F   7A..         MOV     R2,#zclOpenEvse_CmdCallbacks & 0xff
   \   000091   7B..         MOV     R3,#(zclOpenEvse_CmdCallbacks >> 8) & 0xff
   \   000093   7909         MOV     R1,#0x9
   \   000095   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    272          
    273            // Register the application's attribute list
    274            zcl_registerAttrList( OPENEVSE_ENDPOINT, zclOpenEvse_NumAttributes, zclOpenEvse_Attrs );
   \   000098                ; Setup parameters for call to function zcl_registerAttrList
   \   000098   7C..         MOV     R4,#zclOpenEvse_Attrs & 0xff
   \   00009A   7D..         MOV     R5,#(zclOpenEvse_Attrs >> 8) & 0xff
   \   00009C   90....       MOV     DPTR,#zclOpenEvse_NumAttributes
   \   00009F   E4           CLR     A
   \   0000A0   93           MOVC    A,@A+DPTR
   \   0000A1   FA           MOV     R2,A
   \   0000A2   7908         MOV     R1,#0x8
   \   0000A4   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    275          
    276              // Register the backlight attribute list
    277            zcl_registerAttrList( OPENEVSE_ENDPOINT+1, zclOpenEvse_BlNumAttributes, zclOpenEvse_BlAttrs );
   \   0000A7                ; Setup parameters for call to function zcl_registerAttrList
   \   0000A7   7C..         MOV     R4,#zclOpenEvse_BlAttrs & 0xff
   \   0000A9   7D..         MOV     R5,#(zclOpenEvse_BlAttrs >> 8) & 0xff
   \   0000AB   90....       MOV     DPTR,#zclOpenEvse_BlNumAttributes
   \   0000AE   E4           CLR     A
   \   0000AF   93           MOVC    A,@A+DPTR
   \   0000B0   FA           MOV     R2,A
   \   0000B1   7909         MOV     R1,#0x9
   \   0000B3   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    278          
    279            // Register the Application to receive the unprocessed Foundation command/response messages
    280            zcl_registerForMsg( zclOpenEvse_TaskID );
   \   0000B6                ; Setup parameters for call to function zcl_registerForMsg
   \   0000B6   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    281            
    282          #ifdef ZCL_DISCOVER
    283            // Register the application's command list
    284            zcl_registerCmdList( OPENEVSE_ENDPOINT, zclCmdsArraySize, zclOpenEvse_Cmds );
    285          #endif
    286          
    287            // Register for all key events - This app will handle all key events
    288            //RegisterForKeys( zclOpenEvse_TaskID );
    289          
    290          #ifdef ZGP_AUTO_TT
    291            zgpTranslationTable_RegisterEP ( &zclOpenEvse_SimpleDesc );
    292          #endif
    293          
    294            // Create the Voltage report command
    295            zclOpenEvse_reportCmdVolts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    296                           ( 1 * sizeof( zclReport_t ) ) );
   \   0000BE                ; Setup parameters for call to function osal_mem_alloc
   \   0000BE   7A06         MOV     R2,#0x6
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C5   12....       LCALL   ?Subroutine13 & 0xFFFF
    297            if ( zclOpenEvse_reportCmdVolts != NULL )
   \                     ??CrossCallReturnLabel_25:
   \   0000C8   6003         JZ      ??CrossCallReturnLabel_0
    298            {
    299              zclOpenEvse_reportCmdVolts->numAttr = 1;
   \   0000CA   12....       LCALL   ?Subroutine3 & 0xFFFF
    300          
    301              // Set up the first attribute
    302              zclOpenEvse_reportCmdVolts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE;
    303              zclOpenEvse_reportCmdVolts->attrList[0].dataType = ZCL_DATATYPE_UINT16;
    304              zclOpenEvse_reportCmdVolts->attrList[0].attrData = (uint8 *)&zclOpenEvse_voltsScaled;
    305            }
    306          
    307            // Create the Voltage report command
    308            zclOpenEvse_reportCmdVolts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    309                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??CrossCallReturnLabel_0:
   \   0000CD                ; Setup parameters for call to function osal_mem_alloc
   \   0000CD   7A06         MOV     R2,#0x6
   \   0000CF   7B00         MOV     R3,#0x0
   \   0000D1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D4   12....       LCALL   ?Subroutine13 & 0xFFFF
    310            if ( zclOpenEvse_reportCmdVolts != NULL )
   \                     ??CrossCallReturnLabel_26:
   \   0000D7   6003         JZ      ??CrossCallReturnLabel_1
    311            {
    312              zclOpenEvse_reportCmdVolts->numAttr = 1;
   \   0000D9   12....       LCALL   ?Subroutine3 & 0xFFFF
    313          
    314              // Set up the first attribute
    315              zclOpenEvse_reportCmdVolts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE;
    316              zclOpenEvse_reportCmdVolts->attrList[0].dataType = ZCL_DATATYPE_UINT16;
    317              zclOpenEvse_reportCmdVolts->attrList[0].attrData = (uint8 *)&zclOpenEvse_voltsScaled;
    318            }
    319          
    320            // Create the Amperage report command
    321            zclOpenEvse_reportCmdAmps = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    322                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??CrossCallReturnLabel_1:
   \   0000DC                ; Setup parameters for call to function osal_mem_alloc
   \   0000DC   7A06         MOV     R2,#0x6
   \   0000DE   7B00         MOV     R3,#0x0
   \   0000E0   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E3   90....       MOV     DPTR,#zclOpenEvse_reportCmdAmps
   \   0000E6   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    323            if ( zclOpenEvse_reportCmdAmps != NULL )
   \                     ??CrossCallReturnLabel_98:
   \   0000E9   90....       MOV     DPTR,#zclOpenEvse_reportCmdAmps
   \   0000EC   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000EF   601F         JZ      ??zclOpenEvse_Init_0
    324            {
    325              zclOpenEvse_reportCmdAmps->numAttr = 1;
   \   0000F1   12....       LCALL   ?Subroutine18 & 0xFFFF
    326          
    327              // Set up the first attribute
    328              zclOpenEvse_reportCmdAmps->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_RMS_CURRENT;
   \                     ??CrossCallReturnLabel_31:
   \   0000F4   90....       MOV     DPTR,#zclOpenEvse_reportCmdAmps
   \   0000F7   12....       LCALL   ?Subroutine20 & 0xFFFF
    329              zclOpenEvse_reportCmdAmps->attrList[0].dataType = ZCL_DATATYPE_UINT16;
    330              zclOpenEvse_reportCmdAmps->attrList[0].attrData = (uint8 *)&zclOpenEvse_ampsScaled;
    331            }
   \                     ??CrossCallReturnLabel_40:
   \   0000FA   7408         MOV     A,#0x8
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   7405         MOV     A,#0x5
   \   000100   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000103   7421         MOV     A,#0x21
   \   000105   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000108   A3           INC     DPTR
   \   000109   74..         MOV     A,#zclOpenEvse_ampsScaled & 0xff
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   74..         MOV     A,#(zclOpenEvse_ampsScaled >> 8) & 0xff
   \   00010F   F0           MOVX    @DPTR,A
    332          
    333            // Create the Watts report command
    334            zclOpenEvse_reportCmdWatts = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    335                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??zclOpenEvse_Init_0:
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   7A06         MOV     R2,#0x6
   \   000112   7B00         MOV     R3,#0x0
   \   000114   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000117   90....       MOV     DPTR,#zclOpenEvse_reportCmdWatts
   \   00011A   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    336            if ( zclOpenEvse_reportCmdWatts != NULL )
   \                     ??CrossCallReturnLabel_99:
   \   00011D   90....       MOV     DPTR,#zclOpenEvse_reportCmdWatts
   \   000120   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000123   601F         JZ      ??zclOpenEvse_Init_1
    337            {
    338              zclOpenEvse_reportCmdWatts->numAttr = 1;
   \   000125   12....       LCALL   ?Subroutine18 & 0xFFFF
    339          
    340              // Set up the first attribute
    341              zclOpenEvse_reportCmdWatts->attrList[0].attrID = ATTRID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER;
   \                     ??CrossCallReturnLabel_32:
   \   000128   90....       MOV     DPTR,#zclOpenEvse_reportCmdWatts
   \   00012B   12....       LCALL   ?Subroutine20 & 0xFFFF
    342              zclOpenEvse_reportCmdWatts->attrList[0].dataType = ZCL_DATATYPE_INT16;
    343              zclOpenEvse_reportCmdWatts->attrList[0].attrData = (uint8 *)&zclOpenEvse_wattsScaled;
    344            }
   \                     ??CrossCallReturnLabel_41:
   \   00012E   740B         MOV     A,#0xb
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   7405         MOV     A,#0x5
   \   000134   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000137   7429         MOV     A,#0x29
   \   000139   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00013C   A3           INC     DPTR
   \   00013D   74..         MOV     A,#zclOpenEvse_wattsScaled & 0xff
   \   00013F   F0           MOVX    @DPTR,A
   \   000140   A3           INC     DPTR
   \   000141   74..         MOV     A,#(zclOpenEvse_wattsScaled >> 8) & 0xff
   \   000143   F0           MOVX    @DPTR,A
    345          
    346            // Create the Temperature report command
    347            zclOpenEvse_reportCmdTemp = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    348                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??zclOpenEvse_Init_1:
   \   000144                ; Setup parameters for call to function osal_mem_alloc
   \   000144   7A06         MOV     R2,#0x6
   \   000146   7B00         MOV     R3,#0x0
   \   000148   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00014B   90....       MOV     DPTR,#zclOpenEvse_reportCmdTemp
   \   00014E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    349            if ( zclOpenEvse_reportCmdTemp != NULL )
   \                     ??CrossCallReturnLabel_100:
   \   000151   90....       MOV     DPTR,#zclOpenEvse_reportCmdTemp
   \   000154   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000157   6019         JZ      ??zclOpenEvse_Init_2
    350            {
    351              zclOpenEvse_reportCmdTemp->numAttr = 1;
   \   000159   12....       LCALL   ?Subroutine18 & 0xFFFF
    352          
    353              // Set up the first attribute
    354              zclOpenEvse_reportCmdTemp->attrList[0].attrID = ATTRID_DEV_TEMP_CURRENT;
   \                     ??CrossCallReturnLabel_33:
   \   00015C   90....       MOV     DPTR,#zclOpenEvse_reportCmdTemp
   \   00015F   12....       LCALL   ?Subroutine19 & 0xFFFF
    355              zclOpenEvse_reportCmdTemp->attrList[0].dataType = ZCL_DATATYPE_INT16;
    356              zclOpenEvse_reportCmdTemp->attrList[0].attrData = (uint8 *)&zclOpenEvse_temperature;
    357            }
   \                     ??CrossCallReturnLabel_37:
   \   000162   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000165   7429         MOV     A,#0x29
   \   000167   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00016A   A3           INC     DPTR
   \   00016B   74..         MOV     A,#zclOpenEvse_temperature & 0xff
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   A3           INC     DPTR
   \   00016F   74..         MOV     A,#(zclOpenEvse_temperature >> 8) & 0xff
   \   000171   F0           MOVX    @DPTR,A
    358          
    359              // Create the Energy Sum report command
    360            zclOpenEvse_reportCmdEnergySum = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    361                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??zclOpenEvse_Init_2:
   \   000172                ; Setup parameters for call to function osal_mem_alloc
   \   000172   7A06         MOV     R2,#0x6
   \   000174   7B00         MOV     R3,#0x0
   \   000176   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000179   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
   \   00017C   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    362            if ( zclOpenEvse_reportCmdEnergySum != NULL )
   \                     ??CrossCallReturnLabel_101:
   \   00017F   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
   \   000182   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000185   6019         JZ      ??zclOpenEvse_Init_3
    363            {
    364              zclOpenEvse_reportCmdEnergySum->numAttr = 1;
   \   000187   12....       LCALL   ?Subroutine18 & 0xFFFF
    365          
    366              // Set up the first attribute
    367              zclOpenEvse_reportCmdEnergySum->attrList[0].attrID = ATTRID_CURRENT_SUM_DELIVERED;
   \                     ??CrossCallReturnLabel_34:
   \   00018A   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
   \   00018D   12....       LCALL   ?Subroutine19 & 0xFFFF
    368              zclOpenEvse_reportCmdEnergySum->attrList[0].dataType = ZCL_DATATYPE_UINT48;
    369              zclOpenEvse_reportCmdEnergySum->attrList[0].attrData = (uint8 *)&zclOpenEvse_energySum;
    370            }
   \                     ??CrossCallReturnLabel_38:
   \   000190   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000193   7425         MOV     A,#0x25
   \   000195   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000198   A3           INC     DPTR
   \   000199   74..         MOV     A,#zclOpenEvse_energySum & 0xff
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   74..         MOV     A,#(zclOpenEvse_energySum >> 8) & 0xff
   \   00019F   F0           MOVX    @DPTR,A
    371            
    372            // Create the Energy Demand report command
    373            zclOpenEvse_reportCmdEnergyDemand = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    374                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??zclOpenEvse_Init_3:
   \   0001A0                ; Setup parameters for call to function osal_mem_alloc
   \   0001A0   7A06         MOV     R2,#0x6
   \   0001A2   7B00         MOV     R3,#0x0
   \   0001A4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001A7   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
   \   0001AA   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    375            if ( zclOpenEvse_reportCmdEnergyDemand != NULL )
   \                     ??CrossCallReturnLabel_102:
   \   0001AD   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
   \   0001B0   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0001B3   601B         JZ      ??zclOpenEvse_Init_4
    376            {
    377              zclOpenEvse_reportCmdEnergyDemand->numAttr = 1;
   \   0001B5   12....       LCALL   ?Subroutine18 & 0xFFFF
    378          
    379              // Set up the first attribute
    380              zclOpenEvse_reportCmdEnergyDemand->attrList[0].attrID = ATTRID_CURRENT_DEMAND_DELIVERED;
   \                     ??CrossCallReturnLabel_35:
   \   0001B8   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
   \   0001BB   12....       LCALL   ?Subroutine19 & 0xFFFF
    381              zclOpenEvse_reportCmdEnergyDemand->attrList[0].dataType = ZCL_DATATYPE_UINT24;
    382              zclOpenEvse_reportCmdEnergyDemand->attrList[0].attrData = (uint8 *)&zclOpenEvse_energyDemand;
    383            }
   \                     ??CrossCallReturnLabel_39:
   \   0001BE   7406         MOV     A,#0x6
   \   0001C0   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001C3   7422         MOV     A,#0x22
   \   0001C5   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001C8   A3           INC     DPTR
   \   0001C9   74..         MOV     A,#zclOpenEvse_energyDemand & 0xff
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   74..         MOV     A,#(zclOpenEvse_energyDemand >> 8) & 0xff
   \   0001CF   F0           MOVX    @DPTR,A
    384          
    385            // Create the State report command
    386            zclOpenEvse_reportCmdState = (zclReportCmd_t *)osal_mem_alloc( sizeof( zclReportCmd_t ) +
    387                           ( 1 * sizeof( zclReport_t ) ) );
   \                     ??zclOpenEvse_Init_4:
   \   0001D0                ; Setup parameters for call to function osal_mem_alloc
   \   0001D0   7A06         MOV     R2,#0x6
   \   0001D2   7B00         MOV     R3,#0x0
   \   0001D4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001D7   90....       MOV     DPTR,#zclOpenEvse_reportCmdState
   \   0001DA   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    388            if ( zclOpenEvse_reportCmdState != NULL )
   \                     ??CrossCallReturnLabel_103:
   \   0001DD   90....       MOV     DPTR,#zclOpenEvse_reportCmdState
   \   0001E0   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001E3   601E         JZ      ??zclOpenEvse_Init_5
    389            {
    390              zclOpenEvse_reportCmdState->numAttr = 1;
   \   0001E5   12....       LCALL   ?Subroutine18 & 0xFFFF
    391          
    392              // Set up the first attribute
    393              zclOpenEvse_reportCmdState->attrList[0].attrID = ATTRID_IOV_BASIC_PRESENT_VALUE;
   \                     ??CrossCallReturnLabel_36:
   \   0001E8   90....       MOV     DPTR,#zclOpenEvse_reportCmdState
   \   0001EB   12....       LCALL   ?Subroutine20 & 0xFFFF
    394              zclOpenEvse_reportCmdState->attrList[0].dataType = ZCL_DATATYPE_UINT16;
    395              zclOpenEvse_reportCmdState->attrList[0].attrData = (uint8 *)&zclOpenEvse_state;
    396            }
   \                     ??CrossCallReturnLabel_42:
   \   0001EE   7455         MOV     A,#0x55
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E4           CLR     A
   \   0001F3   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001F6   7421         MOV     A,#0x21
   \   0001F8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001FB   A3           INC     DPTR
   \   0001FC   74..         MOV     A,#zclOpenEvse_state & 0xff
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   A3           INC     DPTR
   \   000200   74..         MOV     A,#(zclOpenEvse_state >> 8) & 0xff
   \   000202   F0           MOVX    @DPTR,A
    397          
    398            // Restore backlight setting
    399            zcl_nv_item_init( OPENEVSE_BL_NV, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
   \                     ??zclOpenEvse_Init_5:
   \   000203                ; Setup parameters for call to function osal_nv_item_init
   \   000203   75....       MOV     ?V0,#zclOpenEvse_backlight & 0xff
   \   000206   75....       MOV     ?V1,#(zclOpenEvse_backlight >> 8) & 0xff
   \   000209   78..         MOV     R0,#?V0
   \   00020B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020E   7C01         MOV     R4,#0x1
   \   000210   7D00         MOV     R5,#0x0
   \   000212   7A01         MOV     R2,#0x1
   \   000214   7B04         MOV     R3,#0x4
   \   000216   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000219   7402         MOV     A,#0x2
   \   00021B   12....       LCALL   ?DEALLOC_XSTACK8
    400            zcl_nv_read( OPENEVSE_BL_NV, 0, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
   \   00021E                ; Setup parameters for call to function osal_nv_read
   \   00021E   78..         MOV     R0,#?V0
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000223   75..01       MOV     ?V0,#0x1
   \   000226   75..00       MOV     ?V1,#0x0
   \   000229   78..         MOV     R0,#?V0
   \   00022B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022E   7C00         MOV     R4,#0x0
   \   000230   7D00         MOV     R5,#0x0
   \   000232   7A01         MOV     R2,#0x1
   \   000234   7B04         MOV     R3,#0x4
   \   000236   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000239   7404         MOV     A,#0x4
   \   00023B   12....       LCALL   ?DEALLOC_XSTACK8
    401            zcl_nv_item_init( OPENEVSE_LIMIT_NV, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
   \   00023E                ; Setup parameters for call to function osal_nv_item_init
   \   00023E   75....       MOV     ?V0,#zclOpenEvse_energyLimit & 0xff
   \   000241   75....       MOV     ?V1,#(zclOpenEvse_energyLimit >> 8) & 0xff
   \   000244   78..         MOV     R0,#?V0
   \   000246   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000249   7C04         MOV     R4,#0x4
   \   00024B   7D00         MOV     R5,#0x0
   \   00024D   7A02         MOV     R2,#0x2
   \   00024F   7B04         MOV     R3,#0x4
   \   000251   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000254   7402         MOV     A,#0x2
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
    402            zcl_nv_read( OPENEVSE_LIMIT_NV, 0, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
   \   000259                ; Setup parameters for call to function osal_nv_read
   \   000259   78..         MOV     R0,#?V0
   \   00025B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025E   75..04       MOV     ?V0,#0x4
   \   000261   75..00       MOV     ?V1,#0x0
   \   000264   78..         MOV     R0,#?V0
   \   000266   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000269   7C00         MOV     R4,#0x0
   \   00026B   7D00         MOV     R5,#0x0
   \   00026D   7A02         MOV     R2,#0x2
   \   00026F   7B04         MOV     R3,#0x4
   \   000271   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000274   7404         MOV     A,#0x4
   \   000276   12....       LCALL   ?DEALLOC_XSTACK8
    403          
    404            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_POLL_EVSE_EVT, 1000 ); // 1 second for EVSE to boot
   \   000279                ; Setup parameters for call to function osal_start_timerEx
   \   000279   90....       MOV     DPTR,#__Constant_3e8
   \   00027C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00027F   7A02         MOV     R2,#0x2
   \   000281   7B00         MOV     R3,#0x0
   \   000283   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000286   E0           MOVX    A,@DPTR
   \   000287   F9           MOV     R1,A
   \   000288   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00028B   7404         MOV     A,#0x4
   \   00028D   12....       LCALL   ?DEALLOC_XSTACK8
    405            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MIN_EVT, zclOpenEvse_reportPowerMin );
   \   000290                ; Setup parameters for call to function osal_start_timerEx
   \   000290   90....       MOV     DPTR,#zclOpenEvse_reportPowerMin
   \   000293   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000296   7A10         MOV     R2,#0x10
   \   000298   7B00         MOV     R3,#0x0
   \   00029A   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   F9           MOV     R1,A
   \   00029F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002A2   7404         MOV     A,#0x4
   \   0002A4   12....       LCALL   ?DEALLOC_XSTACK8
    406            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MAX_EVT, zclOpenEvse_reportPowerMax );
   \   0002A7                ; Setup parameters for call to function osal_start_timerEx
   \   0002A7   90....       MOV     DPTR,#zclOpenEvse_reportPowerMax
   \   0002AA   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002AD   7A20         MOV     R2,#0x20
   \   0002AF   7B00         MOV     R3,#0x0
   \   0002B1   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F9           MOV     R1,A
   \   0002B6   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002B9   7404         MOV     A,#0x4
   \   0002BB   12....       LCALL   ?DEALLOC_XSTACK8
    407            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETTEMP_MAX_EVT, zclOpenEvse_reportTempMax );
   \   0002BE                ; Setup parameters for call to function osal_start_timerEx
   \   0002BE   90....       MOV     DPTR,#zclOpenEvse_reportTempMax
   \   0002C1   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002C4   7A40         MOV     R2,#0x40
   \   0002C6   7B00         MOV     R3,#0x0
   \   0002C8   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F9           MOV     R1,A
   \   0002CD   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002D0   7404         MOV     A,#0x4
   \   0002D2   12....       LCALL   ?DEALLOC_XSTACK8
    408            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
   \   0002D5                ; Setup parameters for call to function osal_start_timerEx
   \   0002D5   90....       MOV     DPTR,#zclOpenEvse_reportEnergyMax
   \   0002D8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002DB   7A80         MOV     R2,#-0x80
   \   0002DD   7B00         MOV     R3,#0x0
   \   0002DF   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   F9           MOV     R1,A
   \   0002E4   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002E7   7404         MOV     A,#0x4
   \   0002E9   12....       LCALL   ?DEALLOC_XSTACK8
    409          }
   \   0002EC   741D         MOV     A,#0x1d
   \   0002EE                REQUIRE ?Subroutine0
   \   0002EE                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   7401         MOV     A,#0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#zclOpenEvse_reportCmdVolts
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdState
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdTemp
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdWatts
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdAmps
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   7401         MOV     A,#0x1
   \   000007   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   A3           INC     DPTR
   \   00000F   7405         MOV     A,#0x5
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000016   7421         MOV     A,#0x21
   \   000018   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#zclOpenEvse_voltsScaled & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(zclOpenEvse_voltsScaled >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zclOpenEvse_reportCmdVolts
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    410          
    411          
    412          /*********************************************************************
    413           * @fn          zclOpenEvse_event_loop
    414           *
    415           * @brief       Event Loop Processor for zclGeneral.
    416           *
    417           * @param       none
    418           *
    419           * @return      none
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          uint16 zclOpenEvse_event_loop( uint8 task_id, uint16 events )
   \                     zclOpenEvse_event_loop:
    422          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    423            afIncomingMSGPacket_t *MSGpkt;
    424          
    425            static uint16 lastVolts = 0, lastAmps = 0;
    426            static int16 lastWatts = 0;
    427            
    428            (void)task_id;  // Intentionally unreferenced parameter
    429          
    430            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7069         JNZ     ??zclOpenEvse_event_loop_0
    431            {
    432              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclOpenEvse_TaskID )) )
    433              {
    434                switch ( MSGpkt->hdr.event )
    435                {
    436                  case ZCL_INCOMING_MSG:
    437                    // Incoming ZCL Foundation command/response messages
    438                    zclOpenEvse_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    439                    break;
    440          
    441                  case KEY_CHANGE:
    442                    break;
    443          
    444                  case ZDO_STATE_CHANGE:
    445                    zclOpenEvse_NwkState = (devStates_t)(MSGpkt->hdr.status);
    446          
    447                    // now on the network
    448                    if ( (zclOpenEvse_NwkState == DEV_ZB_COORD) ||
    449                         (zclOpenEvse_NwkState == DEV_ROUTER)   ||
    450                         (zclOpenEvse_NwkState == DEV_END_DEVICE) )
    451                    {
    452                      zclOpenEvse_Identify();
    453                    }
    454                    break;
    455          
    456                  default:
    457                    break;
    458                }
    459          
    460                // Release the memory
    461                osal_msg_deallocate( (uint8 *)MSGpkt );
    462              }
    463          
    464              // return unprocessed events
    465              return (events ^ SYS_EVENT_MSG);
    466            }
    467            if ( (events & OPENEVSE_IDENTIFY_EVT) )
   \   000012   EE           MOV     A,R6
   \   000013   5404         ANL     A,#0x4
   \   000015   7003         JNZ     $+5
   \   000017   02....       LJMP    ??zclOpenEvse_event_loop_1 & 0xFFFF
    468            {
    469              static uint8 identState = 0;
    470          
    471              if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
   \   00001A   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6003         JZ      $+5
   \   000020   02....       LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
    472              {
    473                return events; // If last command not complete, postpone this
    474              }
    475          
    476              if (zclOpenEvse_IdentifyTime == 0)
   \   000023   90....       MOV     DPTR,#zclOpenEvse_IdentifyTime
   \   000026   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000029   6003         JZ      $+5
   \   00002B   02....       LJMP    ??zclOpenEvse_event_loop_3 & 0xFFFF
    477              {
    478                if (zclOpenEvse_backlight == LIGHT_ON)
   \   00002E   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6401         XRL     A,#0x1
   \   000034   7A00         MOV     R2,#0x0
   \   000036   6003         JZ      $+5
   \   000038   02....       LJMP    ??zclOpenEvse_event_loop_4 & 0xFFFF
    479                {
    480                  zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDRGB, 0);
   \   00003B                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   00003B   7906         MOV     R1,#0x6
   \   00003D   02....       LJMP    ??zclOpenEvse_event_loop_5 & 0xFFFF
    481                }
   \                     ??zclOpenEvse_event_loop_6:
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   90....       MOV     DPTR,#zclOpenEvse_NwkState
   \   000045   F0           MOVX    @DPTR,A
   \   000046   6409         XRL     A,#0x9
   \   000048   600A         JZ      ??zclOpenEvse_event_loop_7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6407         XRL     A,#0x7
   \   00004D   6005         JZ      ??zclOpenEvse_event_loop_7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6406         XRL     A,#0x6
   \   000052   7020         JNZ     ??zclOpenEvse_event_loop_8
   \                     ??zclOpenEvse_event_loop_7:
   \   000054   90....       MOV     DPTR,#zclOpenEvse_IdentifyTime
   \   000057   7405         MOV     A,#0x5
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function osal_start_timerEx
   \   00005D   90....       MOV     DPTR,#__Constant_1f4
   \   000060   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000063   7A04         MOV     R2,#0x4
   \   000065   7B00         MOV     R3,#0x0
   \   000067   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclOpenEvse_event_loop_8:
   \   000074                ; Setup parameters for call to function osal_msg_deallocate
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclOpenEvse_event_loop_0:
   \   00007B                ; Setup parameters for call to function osal_msg_receive
   \   00007B   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000083   8A..         MOV     ?V0,R2
   \   000085   8B..         MOV     ?V1,R3
   \   000087   EA           MOV     A,R2
   \   000088   45..         ORL     A,?V1
   \   00008A   6052         JZ      ??zclOpenEvse_event_loop_9
   \   00008C   8A82         MOV     DPL,R2
   \   00008E   8B83         MOV     DPH,R3
   \   000090   E0           MOVX    A,@DPTR
   \   000091   24CC         ADD     A,#-0x34
   \   000093   6006         JZ      ??zclOpenEvse_event_loop_10
   \   000095   2463         ADD     A,#0x63
   \   000097   60A7         JZ      ??zclOpenEvse_event_loop_6
   \   000099   80D9         SJMP    ??zclOpenEvse_event_loop_8
   \                     ??zclOpenEvse_event_loop_10:
   \   00009B   EA           MOV     A,R2
   \   00009C   2417         ADD     A,#0x17
   \   00009E   F8           MOV     R0,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F9           MOV     R1,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   14           DEC     A
   \   0000AC   6011         JZ      ??zclOpenEvse_event_loop_11
   \   0000AE   24FD         ADD     A,#-0x3
   \   0000B0   701A         JNZ     ??zclOpenEvse_event_loop_12
   \   0000B2   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000B5   7A00         MOV     R2,#0x0
   \                     ??zclOpenEvse_event_loop_13:
   \   0000B7   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000BA   5010         JNC     ??zclOpenEvse_event_loop_12
   \   0000BC   0A           INC     R2
   \   0000BD   80F8         SJMP    ??zclOpenEvse_event_loop_13
   \                     ??zclOpenEvse_event_loop_11:
   \   0000BF   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000C2   7A00         MOV     R2,#0x0
   \   0000C4   8001         SJMP    ??zclOpenEvse_event_loop_14
   \                     ??zclOpenEvse_event_loop_15:
   \   0000C6   0A           INC     R2
   \                     ??zclOpenEvse_event_loop_14:
   \   0000C7   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000CA   40FA         JC      ??zclOpenEvse_event_loop_15
   \                     ??zclOpenEvse_event_loop_12:
   \   0000CC   8882         MOV     DPL,R0
   \   0000CE   8983         MOV     DPH,R1
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FA           MOV     R2,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FB           MOV     R3,A
   \   0000D5   EA           MOV     A,R2
   \   0000D6   4B           ORL     A,R3
   \   0000D7   609B         JZ      ??zclOpenEvse_event_loop_8
   \   0000D9                ; Setup parameters for call to function osal_mem_free
   \   0000D9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000DC   8096         SJMP    ??zclOpenEvse_event_loop_8
   \                     ??zclOpenEvse_event_loop_9:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   6480         XRL     A,#0x80
   \   0000E3   02....       LJMP    ??zclOpenEvse_event_loop_16 & 0xFFFF
    482                else
    483                {
    484                  zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
   \                     ??zclOpenEvse_event_loop_4:
   \   0000E6                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0000E6   7905         MOV     R1,#0x5
   \                     ??zclOpenEvse_event_loop_5:
   \   0000E8   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
   \   0000EB   8043         SJMP    ??zclOpenEvse_event_loop_17
    485                }
    486              }
    487              else
    488              {
    489                if (identState & 1) // On odd counts turn LED on
   \                     ??zclOpenEvse_event_loop_3:
   \   0000ED   90....       MOV     DPTR,#??identState
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000F3   7A00         MOV     R2,#0x0
   \   0000F5   5013         JNC     ??zclOpenEvse_event_loop_18
    490                {
    491                  zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
   \   0000F7                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0000F7   7905         MOV     R1,#0x5
   \   0000F9   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
    492                  zclOpenEvse_IdentifyTime--;
   \   0000FC   90....       MOV     DPTR,#zclOpenEvse_IdentifyTime
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   24FF         ADD     A,#-0x1
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   34FF         ADDC    A,#-0x1
   \   000107   F0           MOVX    @DPTR,A
   \   000108   8005         SJMP    ??zclOpenEvse_event_loop_19
    493                }
    494                else
    495                {
    496                  zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDTEAL, 0);
   \                     ??zclOpenEvse_event_loop_18:
   \   00010A                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   00010A   7907         MOV     R1,#0x7
   \   00010C   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
    497                }
    498                identState = !identState;
   \                     ??zclOpenEvse_event_loop_19:
   \   00010F   90....       MOV     DPTR,#??identState
   \   000112   E0           MOVX    A,@DPTR
   \   000113   A2E0         MOV     C,0xE0 /* A   */.0
   \   000115   B3           CPL     C
   \   000116   E4           CLR     A
   \   000117   33           RLC     A
   \   000118   F0           MOVX    @DPTR,A
    499                osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_IDENTIFY_EVT, 500 );
   \   000119                ; Setup parameters for call to function osal_start_timerEx
   \   000119   90....       MOV     DPTR,#__Constant_1f4
   \   00011C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00011F   7A04         MOV     R2,#0x4
   \   000121   7B00         MOV     R3,#0x0
   \   000123   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
    500              }
    501              return ( events ^ OPENEVSE_IDENTIFY_EVT );
   \                     ??zclOpenEvse_event_loop_17:
   \   000130   EE           MOV     A,R6
   \   000131   6404         XRL     A,#0x4
   \   000133   02....       LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
    502            }
    503            
    504            if (events & OPENEVSE_POLL_EVSE_EVT)
   \                     ??zclOpenEvse_event_loop_1:
   \   000136   EE           MOV     A,R6
   \   000137   5402         ANL     A,#0x2
   \   000139   7003         JNZ     $+5
   \   00013B   02....       LJMP    ??zclOpenEvse_event_loop_21 & 0xFFFF
    505            {
    506              static uint8 pollNumber = 0;
    507              static uint8 firstTime = TRUE;
    508              static uint32 lastLimit = 0;
    509              
    510              if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
   \   00013E   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   000141   E0           MOVX    A,@DPTR
   \   000142   6003         JZ      $+5
   \   000144   02....       LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
    511              {
    512                return events; // If last command not complete, postpone this
    513              }
    514              
    515              switch (pollNumber++)
   \   000147   90....       MOV     DPTR,#??pollNumber
   \   00014A   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00014D   6033         JZ      ??zclOpenEvse_event_loop_22
   \   00014F   14           DEC     A
   \   000150   6054         JZ      ??zclOpenEvse_event_loop_23
   \   000152   14           DEC     A
   \   000153   605D         JZ      ??zclOpenEvse_event_loop_24
   \   000155   24F8         ADD     A,#-0x8
   \   000157   6062         JZ      ??zclOpenEvse_event_loop_25
   \   000159   14           DEC     A
   \   00015A   6065         JZ      ??zclOpenEvse_event_loop_26
   \   00015C   14           DEC     A
   \   00015D   6068         JZ      ??zclOpenEvse_event_loop_27
   \   00015F   24F8         ADD     A,#-0x8
   \   000161   7003         JNZ     $+5
   \   000163   02....       LJMP    ??zclOpenEvse_event_loop_28 & 0xFFFF
   \   000166   24F6         ADD     A,#-0xa
   \   000168   7003         JNZ     $+5
   \   00016A   02....       LJMP    ??zclOpenEvse_event_loop_29 & 0xFFFF
   \   00016D   14           DEC     A
   \   00016E   7003         JNZ     $+5
   \   000170   02....       LJMP    ??zclOpenEvse_event_loop_30 & 0xFFFF
   \   000173   14           DEC     A
   \   000174   7003         JNZ     $+5
   \   000176   02....       LJMP    ??zclOpenEvse_event_loop_31 & 0xFFFF
   \   000179   24F8         ADD     A,#-0x8
   \   00017B   7003         JNZ     $+5
   \   00017D   02....       LJMP    ??zclOpenEvse_event_loop_32 & 0xFFFF
   \   000180   8007         SJMP    ??zclOpenEvse_event_loop_33
    516              {
    517              case 0: // State 0-9 initialization
    518                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETLEVEL, 0);
   \                     ??zclOpenEvse_event_loop_22:
   \   000182                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   000182   7A00         MOV     R2,#0x0
   \   000184   790C         MOV     R1,#0xc
   \                     ??zclOpenEvse_event_loop_34:
   \   000186   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
    519                break;
    520              case 1:
    521                if (zclOpenEvse_backlight == LIGHT_OFF) // Restore backlight state if power cycled
    522                {
    523                  zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
    524                }
    525                break;
    526              case 2:
    527                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETSTATE, 0);
    528                pollNumber = 10; // Go to main loop state
    529                break;
    530                
    531              case 10:// State 10-19 main loop
    532                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETPOWER, 0);
    533                break;
    534              case 11:
    535                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETTEMP, 0);
    536                break;
    537              case 12:
    538                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_GETENERGY, 0);
    539                if (zclOpenEvse_NwkState != DEV_ROUTER)
    540                {
    541                  firstTime = TRUE;
    542                }
    543                if (lastLimit != zclOpenEvse_energyLimit)
    544                {
    545                  pollNumber = 40; // Go to set limit state
    546                  break;
    547                }
    548                else if (firstTime)
    549                {
    550                  pollNumber = 20; // Go to network init state
    551                  break;
    552                }
    553                pollNumber = 10;
    554                break;
    555          
    556              case 20: // State 20-39 network connected
    557                if (zclOpenEvse_NwkState != DEV_ROUTER)
    558                {
    559                  pollNumber = 10; // Return to main loop state
    560                  break;
    561                }
    562                break;
    563                // States 21-29 are a delay after network join
    564              case 30:
    565                zclOpenEvse_sendEnergy();
    566                break;
    567              case 31:
    568                lastVolts = zclOpenEvse_voltsScaled;
    569                lastAmps = zclOpenEvse_ampsScaled;
    570                lastWatts = zclOpenEvse_wattsScaled;
    571                zclOpenEvse_sendPower();
    572                break;
    573              case 32:
    574                zclOpenEvse_sendTemp();
    575                zclOpenEvse_sendState();
    576                firstTime = FALSE;
    577                pollNumber = 10;
    578                break;
    579          
    580              case 40:
    581                zclOpenEvse_EVSESetLimit(zclOpenEvse_energyLimit);
    582                // Save to NVRAM
    583                zcl_nv_write( OPENEVSE_LIMIT_NV, 0, sizeof(zclOpenEvse_energyLimit), &zclOpenEvse_energyLimit );
    584                lastLimit = zclOpenEvse_energyLimit;
    585                pollNumber = 10;
    586                break;
    587              }
    588              
    589              osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_POLL_EVSE_EVT, POLL_EVSE_PERIOD );
   \                     ??zclOpenEvse_event_loop_33:
   \   000189                ; Setup parameters for call to function osal_start_timerEx
   \   000189   90....       MOV     DPTR,#__Constant_c8
   \   00018C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00018F   7A02         MOV     R2,#0x2
   \   000191   7B00         MOV     R3,#0x0
   \   000193   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F9           MOV     R1,A
   \   000198   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019B   7404         MOV     A,#0x4
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
    590              return ( events ^ OPENEVSE_POLL_EVSE_EVT );
   \   0001A0   EE           MOV     A,R6
   \   0001A1   6402         XRL     A,#0x2
   \   0001A3   02....       LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
   \                     ??zclOpenEvse_event_loop_23:
   \   0001A6   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   70DD         JNZ     ??zclOpenEvse_event_loop_33
   \   0001AC                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0001AC   7A00         MOV     R2,#0x0
   \   0001AE   7905         MOV     R1,#0x5
   \   0001B0   80D4         SJMP    ??zclOpenEvse_event_loop_34
   \                     ??zclOpenEvse_event_loop_24:
   \   0001B2                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0001B2   7A00         MOV     R2,#0x0
   \   0001B4   790B         MOV     R1,#0xb
   \   0001B6   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
   \   0001B9   8053         SJMP    ??zclOpenEvse_event_loop_35
   \                     ??zclOpenEvse_event_loop_25:
   \   0001BB                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0001BB   7A00         MOV     R2,#0x0
   \   0001BD   7908         MOV     R1,#0x8
   \   0001BF   80C5         SJMP    ??zclOpenEvse_event_loop_34
   \                     ??zclOpenEvse_event_loop_26:
   \   0001C1                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0001C1   7A00         MOV     R2,#0x0
   \   0001C3   7909         MOV     R1,#0x9
   \   0001C5   80BF         SJMP    ??zclOpenEvse_event_loop_34
   \                     ??zclOpenEvse_event_loop_27:
   \   0001C7                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0001C7   7A00         MOV     R2,#0x0
   \   0001C9   790A         MOV     R1,#0xa
   \   0001CB   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
   \   0001CE   90....       MOV     DPTR,#zclOpenEvse_NwkState
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   6407         XRL     A,#0x7
   \   0001D4   6006         JZ      ??zclOpenEvse_event_loop_36
   \   0001D6   90....       MOV     DPTR,#??firstTime
   \   0001D9   7401         MOV     A,#0x1
   \   0001DB   F0           MOVX    @DPTR,A
   \                     ??zclOpenEvse_event_loop_36:
   \   0001DC   90....       MOV     DPTR,#zclOpenEvse_energyLimit
   \   0001DF   78..         MOV     R0,#?V0
   \   0001E1   12....       LCALL   ?L_MOV_X
   \   0001E4   90....       MOV     DPTR,#??lastLimit
   \   0001E7   78..         MOV     R0,#?V0
   \   0001E9   12....       LCALL   ?L_EQ_X
   \   0001EC   6008         JZ      ??zclOpenEvse_event_loop_37
   \   0001EE   90....       MOV     DPTR,#??pollNumber
   \   0001F1   7428         MOV     A,#0x28
   \                     ??zclOpenEvse_event_loop_38:
   \   0001F3   F0           MOVX    @DPTR,A
   \   0001F4   8093         SJMP    ??zclOpenEvse_event_loop_33
   \                     ??zclOpenEvse_event_loop_37:
   \   0001F6   90....       MOV     DPTR,#??firstTime
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   6012         JZ      ??zclOpenEvse_event_loop_35
   \   0001FC   90....       MOV     DPTR,#??pollNumber
   \   0001FF   7414         MOV     A,#0x14
   \   000201   80F0         SJMP    ??zclOpenEvse_event_loop_38
   \                     ??zclOpenEvse_event_loop_28:
   \   000203   90....       MOV     DPTR,#zclOpenEvse_NwkState
   \   000206   E0           MOVX    A,@DPTR
   \   000207   6407         XRL     A,#0x7
   \   000209   7003         JNZ     $+5
   \   00020B   02....       LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
   \                     ??zclOpenEvse_event_loop_35:
   \   00020E   90....       MOV     DPTR,#??pollNumber
   \   000211   740A         MOV     A,#0xa
   \   000213   80DE         SJMP    ??zclOpenEvse_event_loop_38
   \                     ??zclOpenEvse_event_loop_29:
   \   000215                ; Setup parameters for call to function zclOpenEvse_sendEnergy
   \   000215   12....       LCALL   `??zclOpenEvse_sendEnergy::?relay`; Banked call to: zclOpenEvse_sendEnergy
   \   000218   02....       LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
   \                     ??zclOpenEvse_event_loop_30:
   \   00021B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00021E                ; Setup parameters for call to function zclOpenEvse_sendPower
   \   00021E   12....       LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
   \   000221   02....       LJMP    ??zclOpenEvse_event_loop_33 & 0xFFFF
   \                     ??zclOpenEvse_event_loop_31:
   \   000224                ; Setup parameters for call to function zclOpenEvse_sendTemp
   \   000224   12....       LCALL   `??zclOpenEvse_sendTemp::?relay`; Banked call to: zclOpenEvse_sendTemp
   \   000227                ; Setup parameters for call to function zclOpenEvse_sendState
   \   000227   12....       LCALL   `??zclOpenEvse_sendState::?relay`; Banked call to: zclOpenEvse_sendState
   \   00022A   90....       MOV     DPTR,#??firstTime
   \   00022D   E4           CLR     A
   \   00022E   F0           MOVX    @DPTR,A
   \   00022F   80DD         SJMP    ??zclOpenEvse_event_loop_35
   \                     ??zclOpenEvse_event_loop_32:
   \   000231   90....       MOV     DPTR,#zclOpenEvse_energyLimit
   \   000234   78..         MOV     R0,#?V0
   \   000236   12....       LCALL   ?L_MOV_X
   \   000239   90....       MOV     DPTR,#__Constant_ffffff
   \   00023C   78..         MOV     R0,#?V0
   \   00023E   12....       LCALL   ?L_EQ_X
   \   000241   700C         JNZ     ??zclOpenEvse_event_loop_39
   \   000243   75..00       MOV     ?V0,#0x0
   \   000246   75..00       MOV     ?V1,#0x0
   \   000249   75..00       MOV     ?V2,#0x0
   \   00024C   75..00       MOV     ?V3,#0x0
   \                     ??zclOpenEvse_event_loop_39:
   \   00024F                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   00024F   78..         MOV     R0,#?V0
   \   000251   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000254   7A01         MOV     R2,#0x1
   \   000256   790D         MOV     R1,#0xd
   \   000258   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
   \   00025B   7404         MOV     A,#0x4
   \   00025D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000260                ; Setup parameters for call to function osal_nv_write
   \   000260   75....       MOV     ?V0,#zclOpenEvse_energyLimit & 0xff
   \   000263   75....       MOV     ?V1,#(zclOpenEvse_energyLimit >> 8) & 0xff
   \   000266   78..         MOV     R0,#?V0
   \   000268   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026B   75..04       MOV     ?V0,#0x4
   \   00026E   75..00       MOV     ?V1,#0x0
   \   000271   78..         MOV     R0,#?V0
   \   000273   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000276   7C00         MOV     R4,#0x0
   \   000278   7D00         MOV     R5,#0x0
   \   00027A   7A02         MOV     R2,#0x2
   \   00027C   7B04         MOV     R3,#0x4
   \   00027E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000281   7404         MOV     A,#0x4
   \   000283   12....       LCALL   ?DEALLOC_XSTACK8
   \   000286   90....       MOV     DPTR,#zclOpenEvse_energyLimit
   \   000289   12....       LCALL   ?XLOAD_R0123
   \   00028C   90....       MOV     DPTR,#??lastLimit
   \   00028F   12....       LCALL   ?XSTORE_R0123
   \   000292   02....       LJMP    ??zclOpenEvse_event_loop_35 & 0xFFFF
    591            }
    592            if (events & OPENEVSE_BACKLIGHT_OFF_EVT)
   \                     ??zclOpenEvse_event_loop_21:
   \   000295   EE           MOV     A,R6
   \   000296   5408         ANL     A,#0x8
   \   000298   6016         JZ      ??zclOpenEvse_event_loop_40
    593            {
    594              if (zclOpenEvse_evseCmd != EVSE_CMD_NONE)
   \   00029A   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   6003         JZ      $+5
   \   0002A0   02....       LJMP    ??zclOpenEvse_event_loop_2 & 0xFFFF
    595              {
    596                return events; // If last command not complete, postpone this
    597              }
    598           
    599              zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
   \   0002A3                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0002A3   7A00         MOV     R2,#0x0
   \   0002A5   7905         MOV     R1,#0x5
   \   0002A7   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
    600          
    601              return ( events ^ OPENEVSE_BACKLIGHT_OFF_EVT );
   \   0002AA   EE           MOV     A,R6
   \   0002AB   6408         XRL     A,#0x8
   \   0002AD   02....       LJMP    ??zclOpenEvse_event_loop_20 & 0xFFFF
    602            }
    603            if ( events & OPENEVSE_GETPOWER_MIN_EVT)
   \                     ??zclOpenEvse_event_loop_40:
   \   0002B0   EE           MOV     A,R6
   \   0002B1   5410         ANL     A,#0x10
   \   0002B3   607C         JZ      ??zclOpenEvse_event_loop_41
    604            {
    605              if ( (abs(lastVolts - zclOpenEvse_voltsScaled) > zclOpenEvse_reportPowerChangedVolts) ||
    606                   (abs(lastAmps - zclOpenEvse_ampsScaled) > zclOpenEvse_reportPowerChangedAmps) ||
    607                   (abs(lastWatts - zclOpenEvse_wattsScaled) > zclOpenEvse_reportPowerChangedWatts) )
   \   0002B5                ; Setup parameters for call to function abs
   \   0002B5   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0002B8   7583..       MOV     DPH,#(??lastVolts >> 8) & 0xff
   \   0002BB   7582..       MOV     DPL,#??lastVolts & 0xff
   \   0002BE   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0002C1   12....       LCALL   `??abs::?relay`      ; Banked call to: abs
   \   0002C4   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0002C7   90....       MOV     DPTR,#zclOpenEvse_reportPowerChangedVolts
   \   0002CA   78..         MOV     R0,#?V0
   \   0002CC   12....       LCALL   ?UL_GT_X
   \   0002CF   403E         JC      ??zclOpenEvse_event_loop_42
   \   0002D1                ; Setup parameters for call to function abs
   \   0002D1   90....       MOV     DPTR,#zclOpenEvse_ampsScaled
   \   0002D4   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0002D7   7583..       MOV     DPH,#(??lastAmps >> 8) & 0xff
   \   0002DA   7582..       MOV     DPL,#??lastAmps & 0xff
   \   0002DD   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0002E0   12....       LCALL   `??abs::?relay`      ; Banked call to: abs
   \   0002E3   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0002E6   90....       MOV     DPTR,#zclOpenEvse_reportPowerChangedAmps
   \   0002E9   78..         MOV     R0,#?V0
   \   0002EB   12....       LCALL   ?UL_GT_X
   \   0002EE   401F         JC      ??zclOpenEvse_event_loop_42
   \   0002F0                ; Setup parameters for call to function abs
   \   0002F0   90....       MOV     DPTR,#zclOpenEvse_wattsScaled
   \   0002F3   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0002F6   7583..       MOV     DPH,#(??lastWatts >> 8) & 0xff
   \   0002F9   7582..       MOV     DPL,#??lastWatts & 0xff
   \   0002FC   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0002FF   12....       LCALL   `??abs::?relay`      ; Banked call to: abs
   \   000302   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000305   90....       MOV     DPTR,#zclOpenEvse_reportPowerChangedWatts
   \   000308   78..         MOV     R0,#?V0
   \   00030A   12....       LCALL   ?UL_GT_X
   \   00030D   5006         JNC     ??zclOpenEvse_event_loop_43
    608              {
    609                lastVolts = zclOpenEvse_voltsScaled;
   \                     ??zclOpenEvse_event_loop_42:
   \   00030F   12....       LCALL   ?Subroutine4 & 0xFFFF
    610                lastAmps = zclOpenEvse_ampsScaled;
    611                lastWatts = zclOpenEvse_wattsScaled;
    612          
    613                zclOpenEvse_sendPower();
   \                     ??CrossCallReturnLabel_3:
   \   000312                ; Setup parameters for call to function zclOpenEvse_sendPower
   \   000312   12....       LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
    614              }      
    615              osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MIN_EVT, zclOpenEvse_reportPowerMin );
   \                     ??zclOpenEvse_event_loop_43:
   \   000315                ; Setup parameters for call to function osal_start_timerEx
   \   000315   90....       MOV     DPTR,#zclOpenEvse_reportPowerMin
   \   000318   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00031B   7A10         MOV     R2,#0x10
   \   00031D   7B00         MOV     R3,#0x0
   \   00031F   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000322   E0           MOVX    A,@DPTR
   \   000323   F9           MOV     R1,A
   \   000324   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000327   7404         MOV     A,#0x4
   \   000329   12....       LCALL   ?DEALLOC_XSTACK8
    616              return ( events ^ OPENEVSE_GETPOWER_MIN_EVT );
   \   00032C   EE           MOV     A,R6
   \   00032D   6410         XRL     A,#0x10
   \   00032F   803C         SJMP    ??zclOpenEvse_event_loop_20
    617            }
    618            if ( events & OPENEVSE_GETPOWER_MAX_EVT)
   \                     ??zclOpenEvse_event_loop_41:
   \   000331   EE           MOV     A,R6
   \   000332   5420         ANL     A,#0x20
   \   000334   6008         JZ      ??zclOpenEvse_event_loop_44
    619            {
    620              zclOpenEvse_sendPower(); // This restarts the timer
   \   000336                ; Setup parameters for call to function zclOpenEvse_sendPower
   \   000336   12....       LCALL   `??zclOpenEvse_sendPower::?relay`; Banked call to: zclOpenEvse_sendPower
    621              return ( events ^ OPENEVSE_GETPOWER_MAX_EVT );
   \   000339   EE           MOV     A,R6
   \   00033A   6420         XRL     A,#0x20
   \   00033C   802F         SJMP    ??zclOpenEvse_event_loop_20
    622            }
    623          
    624            if ( events & OPENEVSE_GETTEMP_MAX_EVT)
   \                     ??zclOpenEvse_event_loop_44:
   \   00033E   EE           MOV     A,R6
   \   00033F   5440         ANL     A,#0x40
   \   000341   6008         JZ      ??zclOpenEvse_event_loop_45
    625            {
    626              zclOpenEvse_sendTemp(); // This restarts the timer
   \   000343                ; Setup parameters for call to function zclOpenEvse_sendTemp
   \   000343   12....       LCALL   `??zclOpenEvse_sendTemp::?relay`; Banked call to: zclOpenEvse_sendTemp
    627              return ( events ^ OPENEVSE_GETTEMP_MAX_EVT );
   \   000346   EE           MOV     A,R6
   \   000347   6440         XRL     A,#0x40
   \   000349   8022         SJMP    ??zclOpenEvse_event_loop_20
    628            }
    629          
    630            if ( events & OPENEVSE_GETENERGY_MAX_EVT)
   \                     ??zclOpenEvse_event_loop_45:
   \   00034B   EE           MOV     A,R6
   \   00034C   5480         ANL     A,#0x80
   \   00034E   6022         JZ      ??zclOpenEvse_event_loop_46
    631            {
    632              zclOpenEvse_sendEnergy();
   \   000350                ; Setup parameters for call to function zclOpenEvse_sendEnergy
   \   000350   12....       LCALL   `??zclOpenEvse_sendEnergy::?relay`; Banked call to: zclOpenEvse_sendEnergy
    633              osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
   \   000353                ; Setup parameters for call to function osal_start_timerEx
   \   000353   90....       MOV     DPTR,#zclOpenEvse_reportEnergyMax
   \   000356   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000359   7A80         MOV     R2,#-0x80
   \   00035B   7B00         MOV     R3,#0x0
   \   00035D   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000360   E0           MOVX    A,@DPTR
   \   000361   F9           MOV     R1,A
   \   000362   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000365   7404         MOV     A,#0x4
   \   000367   12....       LCALL   ?DEALLOC_XSTACK8
    634              return ( events ^ OPENEVSE_GETENERGY_MAX_EVT );
   \   00036A   EE           MOV     A,R6
   \   00036B   6480         XRL     A,#0x80
   \                     ??zclOpenEvse_event_loop_20:
   \   00036D   FA           MOV     R2,A
   \   00036E   EF           MOV     A,R7
   \                     ??zclOpenEvse_event_loop_16:
   \   00036F   FB           MOV     R3,A
   \   000370   8004         SJMP    ??zclOpenEvse_event_loop_2
    635            }
    636          
    637            // Discard unknown events
    638            return 0;
   \                     ??zclOpenEvse_event_loop_46:
   \   000372   7A00         MOV     R2,#0x0
   \   000374   7B00         MOV     R3,#0x0
   \                     ??zclOpenEvse_event_loop_2:
   \   000376   7402         MOV     A,#0x2
   \   000378   12....       LCALL   ?DEALLOC_XSTACK8
   \   00037B   7F04         MOV     R7,#0x4
   \   00037D   02....       LJMP    ?BANKED_LEAVE_XDATA
    639          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8B82         MOV     DPL,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FB           MOV     R3,A
   \   000010   EA           MOV     A,R2
   \   000011   C3           CLR     C
   \   000012   9B           SUBB    A,R3
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#zclOpenEvse_voltsScaled
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F                REQUIRE ??Subroutine39_0
   \   00000F                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   90....       MOV     DPTR,#??lastVolts
   \   000006   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000009   90....       MOV     DPTR,#zclOpenEvse_ampsScaled
   \   00000C   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00000F   90....       MOV     DPTR,#??lastAmps
   \   000012   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000015   90....       MOV     DPTR,#zclOpenEvse_wattsScaled
   \   000018   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00001B   90....       MOV     DPTR,#??lastWatts
   \   00001E   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   7401         MOV     A,#0x1
   \   000004   28           ADD     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006                ; Setup parameters for call to function zcl_SendReportCmd
   \   000006   E8           MOV     A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   EB           MOV     A,R3
   \   000003   F5..         MOV     ?V1,A
   \   000005   33           RLC     A
   \   000006   95E0         SUBB    A,0xE0 /* A   */
   \   000008   F5..         MOV     ?V2,A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??lastVolts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??lastAmps:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??lastWatts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??identState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??pollNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??firstTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for firstTime>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??lastLimit:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    640          
    641          
    642          /*********************************************************************
    643           * @fn      zclOpenEvse_BasicResetCB
    644           *
    645           * @brief   Callback from the ZCL General Cluster Library
    646           *          to set all the Basic Cluster attributes to default values.
    647           *
    648           * @param   none
    649           *
    650           * @return  none
    651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    652          static void zclOpenEvse_BasicResetCB( void )
   \                     zclOpenEvse_BasicResetCB:
    653          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    654            NLME_LeaveReq_t leaveReq;
    655            // Set every field to 0
    656            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   AA..         MOV     R2,?XSP + 0
   \   000011   AB..         MOV     R3,?XSP + 1
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    657          
    658            // This will enable the device to rejoin the network after reset.
    659            leaveReq.rejoin = TRUE;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
    660          
    661            // Set the NV startup option to force a "new" join.
    662            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00001E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    663          
    664            // Leave the network, and reset afterwards
    665            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000025                ; Setup parameters for call to function NLME_LeaveReq
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002C   E9           MOV     A,R1
   \   00002D   6005         JZ      ??zclOpenEvse_BasicResetCB_0
    666            {
    667              // Couldn't send out leave; prepare to reset anyway
    668              ZDApp_LeaveReset( FALSE );
   \   00002F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    669            }
    670          }
   \                     ??zclOpenEvse_BasicResetCB_0:
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039                REQUIRE ?Subroutine1
   \   000039                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    671          
    672          /*********************************************************************
    673           * @fn      zclOpenEvse_OnOffCB
    674           *
    675           * @brief   Callback from the ZCL General Cluster Library when
    676           *          it received an On/Off Command for this application.
    677           *
    678           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    679           *
    680           * @return  none
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          static void zclOpenEvse_OnOffCB( uint8 cmd )
   \                     zclOpenEvse_OnOffCB:
    683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    684            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   A9..         MOV     R1,?V1
    685          
    686            if (pPtr->endPoint == OPENEVSE_ENDPOINT)
   \   00000E   EA           MOV     A,R2
   \   00000F   2414         ADD     A,#0x14
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6408         XRL     A,#0x8
   \   00001A   7031         JNZ     ??zclOpenEvse_OnOffCB_0
    687            {
    688              // Turn on the power
    689              if ( cmd == COMMAND_ON )
   \   00001C   7401         MOV     A,#0x1
   \   00001E   6E           XRL     A,R6
   \   00001F   600E         JZ      ??zclOpenEvse_OnOffCB_1
    690              {
    691                zclOpenEvse_OnOff = LIGHT_ON;
    692              }
    693              // Turn off the power
    694              else if ( cmd == COMMAND_OFF )
   \   000021   EE           MOV     A,R6
   \   000022   6013         JZ      ??zclOpenEvse_OnOffCB_2
    695              {
    696                zclOpenEvse_OnOff = LIGHT_OFF;
    697              }
    698              // Toggle the power
    699              else if ( cmd == COMMAND_TOGGLE )
   \   000024   7402         MOV     A,#0x2
   \   000026   6E           XRL     A,R6
   \   000027   90....       MOV     DPTR,#zclOpenEvse_OnOff
   \   00002A   7016         JNZ     ??zclOpenEvse_OnOffCB_3
    700              {
    701                if ( zclOpenEvse_OnOff == LIGHT_OFF )
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   7008         JNZ     ??zclOpenEvse_OnOffCB_2
    702                {
    703                  zclOpenEvse_OnOff = LIGHT_ON;
   \                     ??zclOpenEvse_OnOffCB_1:
   \   00002F   90....       MOV     DPTR,#zclOpenEvse_OnOff
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8010         SJMP    ??zclOpenEvse_OnOffCB_4
    704                }
    705                else
    706                {
    707                  zclOpenEvse_OnOff = LIGHT_OFF;
   \                     ??zclOpenEvse_OnOffCB_2:
   \   000037   90....       MOV     DPTR,#zclOpenEvse_OnOff
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    708                }
    709              }
    710              if (zclOpenEvse_OnOff == LIGHT_ON)
    711              {
    712                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_ENABLE, 0);
    713              }
    714              else
    715              {
    716                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_SLEEP, 0);
   \                     ??zclOpenEvse_OnOffCB_5:
   \   00003C                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7903         MOV     R1,#0x3
   \   000040   8060         SJMP    ??zclOpenEvse_OnOffCB_6
    717              }
   \                     ??zclOpenEvse_OnOffCB_3:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   70F5         JNZ     ??zclOpenEvse_OnOffCB_5
   \                     ??zclOpenEvse_OnOffCB_4:
   \   000047                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   000047   7A00         MOV     R2,#0x0
   \   000049   7904         MOV     R1,#0x4
   \   00004B   8055         SJMP    ??zclOpenEvse_OnOffCB_6
    718            }
    719            else
    720            {
    721              // Turn on the backlight
    722              if ( cmd == COMMAND_ON )
   \                     ??zclOpenEvse_OnOffCB_0:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   6E           XRL     A,R6
   \   000050   600E         JZ      ??zclOpenEvse_OnOffCB_7
    723              {
    724                zclOpenEvse_backlight = LIGHT_ON;
    725              }
    726              // Turn off the backlight
    727              else if ( cmd == COMMAND_OFF )
   \   000052   EE           MOV     A,R6
   \   000053   6012         JZ      ??zclOpenEvse_OnOffCB_8
    728              {
    729                zclOpenEvse_backlight = LIGHT_OFF;
    730              }
    731              // Toggle the backlight
    732              else if ( cmd == COMMAND_TOGGLE )
   \   000055   7402         MOV     A,#0x2
   \   000057   6E           XRL     A,R6
   \   000058   7012         JNZ     ??zclOpenEvse_OnOffCB_9
    733              {
    734                if ( zclOpenEvse_backlight == LIGHT_OFF )
   \   00005A   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   7007         JNZ     ??zclOpenEvse_OnOffCB_8
    735                {
    736                  zclOpenEvse_backlight = LIGHT_ON;
   \                     ??zclOpenEvse_OnOffCB_7:
   \   000060   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   000063   7401         MOV     A,#0x1
   \   000065   8004         SJMP    ??zclOpenEvse_OnOffCB_10
    737                }
    738                else
    739                {
    740                  zclOpenEvse_backlight = LIGHT_OFF;
   \                     ??zclOpenEvse_OnOffCB_8:
   \   000067   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   00006A   E4           CLR     A
   \                     ??zclOpenEvse_OnOffCB_10:
   \   00006B   F0           MOVX    @DPTR,A
    741                }
    742              }
    743              
    744              // save to NVRAM
    745              zcl_nv_write( OPENEVSE_BL_NV, 0, sizeof(zclOpenEvse_backlight), &zclOpenEvse_backlight );
   \                     ??zclOpenEvse_OnOffCB_9:
   \   00006C                ; Setup parameters for call to function osal_nv_write
   \   00006C   75....       MOV     ?V0,#zclOpenEvse_backlight & 0xff
   \   00006F   75....       MOV     ?V1,#(zclOpenEvse_backlight >> 8) & 0xff
   \   000072   78..         MOV     R0,#?V0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..01       MOV     ?V0,#0x1
   \   00007A   75..00       MOV     ?V1,#0x0
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7C00         MOV     R4,#0x0
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7A01         MOV     R2,#0x1
   \   000088   7B04         MOV     R3,#0x4
   \   00008A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008D   7404         MOV     A,#0x4
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    746          
    747              if (zclOpenEvse_backlight == LIGHT_ON)
   \   000092   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6401         XRL     A,#0x1
   \   000098   7A00         MOV     R2,#0x0
   \   00009A   7004         JNZ     ??zclOpenEvse_OnOffCB_11
    748              {
    749                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDRGB, 0);
   \   00009C                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   00009C   7906         MOV     R1,#0x6
   \   00009E   8002         SJMP    ??zclOpenEvse_OnOffCB_6
    750              }
    751              else
    752              {
    753                zclOpenEvse_EVSEWriteCmd(EVSE_CMD_LCDOFF, 0);
   \                     ??zclOpenEvse_OnOffCB_11:
   \   0000A0                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   0000A0   7905         MOV     R1,#0x5
   \                     ??zclOpenEvse_OnOffCB_6:
   \   0000A2   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
    754              }
    755            }
    756          }
   \   0000A5   02....       LJMP    ??Subroutine36_0 & 0xFFFF
    757          
    758          void zclOpenEvse_Identify(void)
    759          {
    760            zclOpenEvse_IdentifyTime = 5;
    761            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_IDENTIFY_EVT, 500 );
    762          }
    763          
    764          /******************************************************************************
    765           *
    766           *  Functions for processing ZCL Foundation incoming Command/Response messages
    767           *
    768           *****************************************************************************/
    769          
    770          /*********************************************************************
    771           * @fn      zclOpenEvse_ProcessIncomingMsg
    772           *
    773           * @brief   Process ZCL Foundation incoming message
    774           *
    775           * @param   pInMsg - pointer to the received message
    776           *
    777           * @return  none
    778           */
    779          static void zclOpenEvse_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    780          {
    781            switch ( pInMsg->zclHdr.commandID )
    782            {
    783          #ifdef ZCL_READ
    784              case ZCL_CMD_READ_RSP:
    785                zclOpenEvse_ProcessInReadRspCmd( pInMsg );
    786                break;
    787          #endif
    788          #ifdef ZCL_WRITE
    789              case ZCL_CMD_WRITE_RSP:
    790                zclOpenEvse_ProcessInWriteRspCmd( pInMsg );
    791                break;
    792          #endif
    793          #ifdef ZCL_REPORT
    794              // Attribute Reporting implementation should be added here
    795              case ZCL_CMD_CONFIG_REPORT:
    796                // zclOpenEvse_ProcessInConfigReportCmd( pInMsg );
    797                break;
    798          
    799              case ZCL_CMD_CONFIG_REPORT_RSP:
    800                // zclOpenEvse_ProcessInConfigReportRspCmd( pInMsg );
    801                break;
    802          
    803              case ZCL_CMD_READ_REPORT_CFG:
    804                // zclOpenEvse_ProcessInReadReportCfgCmd( pInMsg );
    805                break;
    806          
    807              case ZCL_CMD_READ_REPORT_CFG_RSP:
    808                // zclOpenEvse_ProcessInReadReportCfgRspCmd( pInMsg );
    809                break;
    810          
    811              case ZCL_CMD_REPORT:
    812                // zclOpenEvse_ProcessInReportCmd( pInMsg );
    813                break;
    814          #endif
    815              case ZCL_CMD_DEFAULT_RSP:
    816                zclOpenEvse_ProcessInDefaultRspCmd( pInMsg );
    817                break;
    818          #ifdef ZCL_DISCOVER
    819              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    820                zclOpenEvse_ProcessInDiscCmdsRspCmd( pInMsg );
    821                break;
    822          
    823              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    824                zclOpenEvse_ProcessInDiscCmdsRspCmd( pInMsg );
    825                break;
    826          
    827              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    828                zclOpenEvse_ProcessInDiscAttrsRspCmd( pInMsg );
    829                break;
    830          
    831              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    832                zclOpenEvse_ProcessInDiscAttrsExtRspCmd( pInMsg );
    833                break;
    834          #endif
    835              default:
    836                break;
    837            }
    838          
    839            if ( pInMsg->attrCmd )
    840              osal_mem_free( pInMsg->attrCmd );
    841          }
    842          
    843          #ifdef ZCL_READ
    844          /*********************************************************************
    845           * @fn      zclOpenEvse_ProcessInReadRspCmd
    846           *
    847           * @brief   Process the "Profile" Read Response Command
    848           *
    849           * @param   pInMsg - incoming message to process
    850           *
    851           * @return  none
    852           */
    853          static uint8 zclOpenEvse_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    854          {
    855            zclReadRspCmd_t *readRspCmd;
    856            uint8 i;
    857          
    858            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    859            for (i = 0; i < readRspCmd->numAttr; i++)
    860            {
    861              // Notify the originator of the results of the original read attributes
    862              // attempt and, for each successfull request, the value of the requested
    863              // attribute
    864            }
    865          
    866            return ( TRUE );
    867          }
    868          #endif // ZCL_READ
    869          
    870          #ifdef ZCL_WRITE
    871          /*********************************************************************
    872           * @fn      zclOpenEvse_ProcessInWriteRspCmd
    873           *
    874           * @brief   Process the "Profile" Write Response Command
    875           *
    876           * @param   pInMsg - incoming message to process
    877           *
    878           * @return  none
    879           */
    880          static uint8 zclOpenEvse_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    881          {
    882            zclWriteRspCmd_t *writeRspCmd;
    883            uint8 i;
    884          
    885            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    886            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    887            {
    888              // Notify the device of the results of the its original write attributes
    889              // command.
    890            }
    891          
    892            return ( TRUE );
    893          }
    894          #endif // ZCL_WRITE
    895          
    896          /*********************************************************************
    897           * @fn      zclOpenEvse_ProcessInDefaultRspCmd
    898           *
    899           * @brief   Process the "Profile" Default Response Command
    900           *
    901           * @param   pInMsg - incoming message to process
    902           *
    903           * @return  none
    904           */
    905          static uint8 zclOpenEvse_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    906          {
    907            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    908          
    909            // Device is notified of the Default Response command.
    910            (void)pInMsg;
    911          
    912            return ( TRUE );
    913          }
    914          
    915          #ifdef ZCL_DISCOVER
    916          /*********************************************************************
    917           * @fn      zclOpenEvse_ProcessInDiscCmdsRspCmd
    918           *
    919           * @brief   Process the Discover Commands Response Command
    920           *
    921           * @param   pInMsg - incoming message to process
    922           *
    923           * @return  none
    924           */
    925          static uint8 zclOpenEvse_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
    926          {
    927            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    928            uint8 i;
    929          
    930            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
    931            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
    932            {
    933              // Device is notified of the result of its attribute discovery command.
    934            }
    935          
    936            return ( TRUE );
    937          }
    938          
    939          /*********************************************************************
    940           * @fn      zclOpenEvse_ProcessInDiscAttrsRspCmd
    941           *
    942           * @brief   Process the "Profile" Discover Attributes Response Command
    943           *
    944           * @param   pInMsg - incoming message to process
    945           *
    946           * @return  none
    947           */
    948          static uint8 zclOpenEvse_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    949          {
    950            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    951            uint8 i;
    952          
    953            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    954            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    955            {
    956              // Device is notified of the result of its attribute discovery command.
    957            }
    958          
    959            return ( TRUE );
    960          }
    961          
    962          /*********************************************************************
    963           * @fn      zclOpenEvse_ProcessInDiscAttrsExtRspCmd
    964           *
    965           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    966           *
    967           * @param   pInMsg - incoming message to process
    968           *
    969           * @return  none
    970           */
    971          static uint8 zclOpenEvse_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    972          {
    973            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    974            uint8 i;
    975          
    976            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    977            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    978            {
    979              // Device is notified of the result of its attribute discovery command.
    980            }
    981          
    982            return ( TRUE );
    983          }
    984          #endif // ZCL_DISCOVER
    985          
    986          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    987          void zclOpenEvse_sendPower(void)
   \                     zclOpenEvse_sendPower:
    988          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    989            // Restart max timer because we just sent
    990            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETPOWER_MAX_EVT, zclOpenEvse_reportPowerMax );
   \   000005                ; Setup parameters for call to function osal_start_timerEx
   \   000005   90....       MOV     DPTR,#zclOpenEvse_reportPowerMax
   \   000008   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000B   7A20         MOV     R2,#0x20
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
    991          
    992            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
    993                               ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdVolts,
    994                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000022   75..01       MOV     ?V0,#0x1
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   90....       MOV     DPTR,#zclOpenEvse_reportCmdVolts
   \   000032   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000035   7C04         MOV     R4,#0x4
   \   000037   7D0B         MOV     R5,#0xb
   \   000039   7A..         MOV     R2,#zclOpenEvse_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
   \   00003D   7908         MOV     R1,#0x8
   \   00003F   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
    995          
    996            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
    997                               ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdAmps,
    998                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   000047   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004D   75..01       MOV     ?V0,#0x1
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#zclOpenEvse_reportCmdAmps
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000060   7C04         MOV     R4,#0x4
   \   000062   7D0B         MOV     R5,#0xb
   \   000064   7A..         MOV     R2,#zclOpenEvse_DstAddr & 0xff
   \   000066   7B..         MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
   \   000068   7908         MOV     R1,#0x8
   \   00006A   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   00006D   7405         MOV     A,#0x5
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    999          
   1000            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
   1001                               ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT, zclOpenEvse_reportCmdWatts,
   1002                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   000072   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   75..01       MOV     ?V0,#0x1
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   90....       MOV     DPTR,#zclOpenEvse_reportCmdWatts
   \   000088   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008B   7C04         MOV     R4,#0x4
   \   00008D   7D0B         MOV     R5,#0xb
   \   00008F   80..         SJMP    ??Subroutine42_0
   1003          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7A..         MOV     R2,#zclOpenEvse_DstAddr & 0xff
   \   000002   7B..         MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
   \   000004   7908         MOV     R1,#0x8
   \   000006   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000009   7405         MOV     A,#0x5
   \   00000B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#zclOpenEvse_seqNum
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000006   F5..         MOV     ?V0,A
   \   000008   78..         MOV     R0,#?V0
   \   00000A   22           RET
   1004          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7D00         MOV     R5,#0x0
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1005          void zclOpenEvse_sendTemp(void)
   \                     zclOpenEvse_sendTemp:
   1006          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1007            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETTEMP_MAX_EVT, zclOpenEvse_reportTempMax );
   \   000005                ; Setup parameters for call to function osal_start_timerEx
   \   000005   90....       MOV     DPTR,#zclOpenEvse_reportTempMax
   \   000008   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000B   7A40         MOV     R2,#0x40
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   1008          
   1009            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
   1010                               ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG, zclOpenEvse_reportCmdTemp,
   1011                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000022   75..01       MOV     ?V0,#0x1
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   90....       MOV     DPTR,#zclOpenEvse_reportCmdTemp
   \   000032   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000035   7C02         MOV     R4,#0x2
   \   000037   80..         SJMP    ?Subroutine2
   1012          }
   1013          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1014          void zclOpenEvse_sendEnergy(void)
   \                     zclOpenEvse_sendEnergy:
   1015          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1016            osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_GETENERGY_MAX_EVT, zclOpenEvse_reportEnergyMax );
   \   000005                ; Setup parameters for call to function osal_start_timerEx
   \   000005   90....       MOV     DPTR,#zclOpenEvse_reportEnergyMax
   \   000008   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000B   7A80         MOV     R2,#-0x80
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   1017            
   1018            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
   1019                               ZCL_CLUSTER_ID_SE_METERING, zclOpenEvse_reportCmdEnergySum,
   1020                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000022   75..01       MOV     ?V0,#0x1
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergySum
   \   000032   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000035   7C02         MOV     R4,#0x2
   \   000037   7D07         MOV     R5,#0x7
   \   000039   7A..         MOV     R2,#zclOpenEvse_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(zclOpenEvse_DstAddr >> 8) & 0xff
   \   00003D   7908         MOV     R1,#0x8
   \   00003F   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1021          
   1022            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
   1023                               ZCL_CLUSTER_ID_SE_METERING, zclOpenEvse_reportCmdEnergyDemand,
   1024                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   000047   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004D   75..01       MOV     ?V0,#0x1
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#zclOpenEvse_reportCmdEnergyDemand
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000060   7C02         MOV     R4,#0x2
   \   000062   7D07         MOV     R5,#0x7
   \   000064   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   1025          }
   1026          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          void zclOpenEvse_sendState(void)
   \                     zclOpenEvse_sendState:
   1028          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1029            zcl_SendReportCmd( OPENEVSE_ENDPOINT, &zclOpenEvse_DstAddr,
   1030                               ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC, zclOpenEvse_reportCmdState,
   1031                               ZCL_FRAME_SERVER_CLIENT_DIR, 1, zclOpenEvse_seqNum++ ); 
   \   000005   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   78..         MOV     R0,#?V0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000018   90....       MOV     DPTR,#zclOpenEvse_reportCmdState
   \   00001B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00001E   7C12         MOV     R4,#0x12
   \   000020   02....       LJMP    ?Subroutine2 & 0xFFFF
   1032          }
   1033          
   1034          void zclOpenEvse_zigbeeReset(void)
   1035          {
   1036            int i;
   1037            
   1038            for (i = HAL_NV_PAGE_BEG; i <= (HAL_NV_PAGE_BEG + HAL_NV_PAGE_CNT); i++)
   1039            {
   1040              HalFlashErase(i);
   1041            }
   1042            Onboard_soft_reset();
   1043          }
   1044          
   1045          void zclOpenEvse_EVSESetLimit(uint32 limit)
   1046          {
   1047            if (limit == 0xFFFFFF)
   1048            {
   1049              limit = 0;
   1050            }
   1051            zclOpenEvse_EVSEWriteCmd(EVSE_CMD_SETLIMIT, 1, (int32)limit);
   1052          }
   1053          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine40_0
   \   000006                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          void zclOpenEvse_EVSEWriteCmd(uint8 command, uint8 numArgs, ...)
   \                     zclOpenEvse_EVSEWriteCmd:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   1056            static char string[16+5] = "$";
   1057            static int strLen = 0;
   1058            unsigned char chk = 0;
   \   00000C   75..00       MOV     ?V0,#0x0
   1059            va_list valist;
   1060            int i;
   1061          
   1062            if (command == EVSE_CMD_NONE) // NONE command means resend last one
   \   00000F   E9           MOV     A,R1
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??zclOpenEvse_EVSEWriteCmd_0 & 0xFFFF
   1063            {
   1064              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)string, strLen);
   \   000015                ; Setup parameters for call to function HalUARTWrite
   1065              return;
   1066            }
   1067          
   1068            zclOpenEvse_evseCmd = command;
   \   000015   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   000018   F0           MOVX    @DPTR,A
   1069            
   1070            strcpy(&string[1], (const char *)evseCode[command]);
   \   000019                ; Setup parameters for call to function strcpy
   \   000019   29           ADD     A,R1
   \   00001A   F8           MOV     R0,A
   \   00001B   E4           CLR     A
   \   00001C   33           RLC     A
   \   00001D   F9           MOV     R1,A
   \   00001E   74..         MOV     A,#evseCode & 0xff
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   74..         MOV     A,#(evseCode >> 8) & 0xff
   \   000025   39           ADDC    A,R1
   \   000026   F583         MOV     DPH,A
   \   000028   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00002B   7A..         MOV     R2,#(??string + 1) & 0xff
   \   00002D   7B..         MOV     R3,#((??string + 1) >> 8) & 0xff
   \   00002F   12....       LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
   1071          
   1072            va_start(valist, numArgs);
   \   000032   7412         MOV     A,#0x12
   \   000034   12....       LCALL   ?XSTACK_DISP100_8
   \   000037   12....       LCALL   ?Subroutine28 & 0xFFFF
   1073          
   1074            for (i = 0; i < numArgs && i < 3; i++)
   \                     ??CrossCallReturnLabel_110:
   \   00003A   7E00         MOV     R6,#0x0
   \   00003C   7F00         MOV     R7,#0x0
   \   00003E   8046         SJMP    ??zclOpenEvse_EVSEWriteCmd_1
   1075            {
   1076              sprintf(string + strlen(string), " %ld", va_arg(valist, int32));
   \                     ??zclOpenEvse_EVSEWriteCmd_2:
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V3,A
   \   00004D   E5..         MOV     A,?V2
   \   00004F   2404         ADD     A,#0x4
   \   000051   F8           MOV     R0,A
   \   000052   E4           CLR     A
   \   000053   35..         ADDC    A,?V3
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   ?Subroutine28 & 0xFFFF
   1077            }
   \                     ??CrossCallReturnLabel_111:
   \   000059                ; Setup parameters for call to function strlen
   \   000059   7A..         MOV     R2,#??string & 0xff
   \   00005B   7B..         MOV     R3,#(??string >> 8) & 0xff
   \   00005D   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000060   8B..         MOV     ?V7,R3
   \   000062   A9..         MOV     R1,?V7
   \   000064                ; Setup parameters for call to function sprintf
   \   000064   85..82       MOV     DPL,?V2
   \   000067   85..83       MOV     DPH,?V3
   \   00006A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00006D   7C..         MOV     R4,#`?<Constant " %ld">` & 0xff
   \   00006F   7D..         MOV     R5,#(`?<Constant " %ld">` >> 8) & 0xff
   \   000071   74..         MOV     A,#??string & 0xff
   \   000073   2A           ADD     A,R2
   \   000074   FA           MOV     R2,A
   \   000075   74..         MOV     A,#(??string >> 8) & 0xff
   \   000077   39           ADDC    A,R1
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   00007C   7404         MOV     A,#0x4
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   0E           INC     R6
   \   000082   EE           MOV     A,R6
   \   000083   7001         JNZ     ??zclOpenEvse_EVSEWriteCmd_1
   \   000085   0F           INC     R7
   \                     ??zclOpenEvse_EVSEWriteCmd_1:
   \   000086   A8..         MOV     R0,?V4
   \   000088   C3           CLR     C
   \   000089   EE           MOV     A,R6
   \   00008A   98           SUBB    A,R0
   \   00008B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00008E   5009         JNC     ??zclOpenEvse_EVSEWriteCmd_3
   \   000090   C3           CLR     C
   \   000091   EE           MOV     A,R6
   \   000092   9403         SUBB    A,#0x3
   \   000094   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000097   40A7         JC      ??zclOpenEvse_EVSEWriteCmd_2
   1078          
   1079            va_end(valist);
   1080          
   1081            for (strLen = 0; strLen < strlen(string); strLen ++)
   \                     ??zclOpenEvse_EVSEWriteCmd_3:
   \   000099   90....       MOV     DPTR,#??strLen
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   800E         SJMP    ??zclOpenEvse_EVSEWriteCmd_4
   1082            {
   1083              chk ^= string[strLen];
   \                     ??zclOpenEvse_EVSEWriteCmd_5:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   62..         XRL     ?V0,A
   1084            }
   \   0000A4   90....       MOV     DPTR,#??strLen
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   2401         ADD     A,#0x1
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   3400         ADDC    A,#0x0
   \                     ??zclOpenEvse_EVSEWriteCmd_4:
   \   0000AF   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000B2   24..         ADD     A,#??string & 0xff
   \   0000B4   FE           MOV     R6,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   34..         ADDC    A,#(??string >> 8) & 0xff
   \   0000B9   FF           MOV     R7,A
   \   0000BA   90....       MOV     DPTR,#??strLen
   \   0000BD   C082         PUSH    DPL
   \   0000BF   C083         PUSH    DPH
   \   0000C1                ; Setup parameters for call to function strlen
   \   0000C1   7A..         MOV     R2,#??string & 0xff
   \   0000C3   7B..         MOV     R3,#(??string >> 8) & 0xff
   \   0000C5   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   0000C8   8A..         MOV     ?V2,R2
   \   0000CA   8B..         MOV     ?V3,R3
   \   0000CC   D083         POP     DPH
   \   0000CE   D082         POP     DPL
   \   0000D0   C3           CLR     C
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   95..         SUBB    A,?V2
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   95..         SUBB    A,?V3
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   40C3         JC      ??zclOpenEvse_EVSEWriteCmd_5
   1085            string[strLen++] = '^';
   \   0000DE   745E         MOV     A,#0x5e
   \   0000E0   12....       LCALL   ?Subroutine27 & 0xFFFF
   1086            *((uint16 *)(&string[strLen++])) = zclOpenEvse_u8tohex(chk);
   \                     ??CrossCallReturnLabel_62:
   \   0000E3   2401         ADD     A,#0x1
   \   0000E5   FE           MOV     R6,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   3400         ADDC    A,#0x0
   \   0000EA   FF           MOV     R7,A
   \   0000EB                ; Setup parameters for call to function zclOpenEvse_nibbletohex
   \   0000EB   E5..         MOV     A,?V0
   \   0000ED   C4           SWAP    A
   \   0000EE   540F         ANL     A,#0xf
   \   0000F0   F9           MOV     R1,A
   \   0000F1   12....       LCALL   `??zclOpenEvse_nibbletohex::?relay`; Banked call to: zclOpenEvse_nibbletohex
   \   0000F4   E9           MOV     A,R1
   \   0000F5   F5..         MOV     ?V2,A
   \   0000F7                ; Setup parameters for call to function zclOpenEvse_nibbletohex
   \   0000F7   740F         MOV     A,#0xf
   \   0000F9   55..         ANL     A,?V0
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??zclOpenEvse_nibbletohex::?relay`; Banked call to: zclOpenEvse_nibbletohex
   \   0000FF   74..         MOV     A,#??string & 0xff
   \   000101   2E           ADD     A,R6
   \   000102   F582         MOV     DPL,A
   \   000104   74..         MOV     A,#(??string >> 8) & 0xff
   \   000106   3F           ADDC    A,R7
   \   000107   F583         MOV     DPH,A
   \   000109   E5..         MOV     A,?V2
   \   00010B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1087            strLen++;
   \                     ??CrossCallReturnLabel_106:
   \   00010E   EE           MOV     A,R6
   \   00010F   2402         ADD     A,#0x2
   \   000111   F8           MOV     R0,A
   \   000112   E4           CLR     A
   \   000113   3F           ADDC    A,R7
   \   000114   F9           MOV     R1,A
   \   000115   90....       MOV     DPTR,#??strLen
   \   000118   E8           MOV     A,R0
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   E9           MOV     A,R1
   \   00011C   12....       LCALL   ?Subroutine6 & 0xFFFF
   1088            string[strLen++] = '\r';
   \                     ??CrossCallReturnLabel_11:
   \   00011F   740D         MOV     A,#0xd
   \   000121   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000124   12....       LCALL   ?Subroutine6 & 0xFFFF
   1089            string[strLen++] = 0;
   \                     ??CrossCallReturnLabel_12:
   \   000127   E4           CLR     A
   \   000128   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00012B   F0           MOVX    @DPTR,A
   1090            
   1091            HalUARTWrite(HAL_UART_PORT_0, (uint8 *)string, strLen);
   \   00012C                ; Setup parameters for call to function HalUARTWrite
   \                     ??zclOpenEvse_EVSEWriteCmd_0:
   \   00012C   90....       MOV     DPTR,#??strLen
   \   00012F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000132   7A..         MOV     R2,#??string & 0xff
   \   000134   7B..         MOV     R3,#(??string >> 8) & 0xff
   \   000136   7900         MOV     R1,#0x0
   \   000138   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1092          }
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   7F08         MOV     R7,#0x8
   \   000142   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   2401         ADD     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3400         ADDC    A,#0x0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#??strLen
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   24..         ADD     A,#??string & 0xff
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   34..         ADDC    A,#(??string >> 8) & 0xff
   \   00000A   F9           MOV     R1,A
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EF           MOV     A,R7
   \   000001   9400         SUBB    A,#0x0
   \   000003   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000005   65D0         XRL     A,PSW
   \   000007   33           RLC     A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??string:
   \   000000                DS 21
   \   000015                REQUIRE `?<Initializer for string>`
   \   000015                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??strLen:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1093          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          inline void zclOpenEvse_EVSEResend(void)
   \                     zclOpenEvse_EVSEResend:
   1095          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1096            if (zclOpenEvse_evseResendCtr++ > 10)
   \   000004   90....       MOV     DPTR,#zclOpenEvse_evseResendCtr
   \   000007   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00000A   C3           CLR     C
   \   00000B   940B         SUBB    A,#0xb
   \   00000D   4007         JC      ??zclOpenEvse_EVSEResend_0
   1097            {
   1098              zclOpenEvse_evseCmd = EVSE_CMD_NONE;
   \   00000F   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1099              return;
   \   000014   800A         SJMP    ??zclOpenEvse_EVSEResend_1
   1100            }
   1101          
   1102            zclOpenEvse_EVSEWriteCmd(zclOpenEvse_evseCmd, 0);
   \                     ??zclOpenEvse_EVSEResend_0:
   \   000016                ; Setup parameters for call to function zclOpenEvse_EVSEWriteCmd
   \   000016   7A00         MOV     R2,#0x0
   \   000018   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   `??zclOpenEvse_EVSEWriteCmd::?relay`; Banked call to: zclOpenEvse_EVSEWriteCmd
   1103          }
   \                     ??zclOpenEvse_EVSEResend_1:
   \   000020   02....       LJMP    ?Subroutine1 & 0xFFFF
   1104          
   1105          void zclOpenEvse_UARTInit(void)
   1106          {
   1107            halUARTCfg_t uartConfig;
   1108          
   1109            /* UART Configuration */
   1110            uartConfig.configured           = TRUE;
   1111            uartConfig.baudRate             = HAL_UART_BR_115200;
   1112            uartConfig.flowControl          = FALSE;
   1113            uartConfig.flowControlThreshold = 0;
   1114            uartConfig.rx.maxBufSize        = 64;
   1115            uartConfig.tx.maxBufSize        = 64;
   1116            uartConfig.idleTimeout          = 6;
   1117            uartConfig.intEnable            = TRUE;
   1118            uartConfig.callBackFunc         = zclOpenEvse_UARTCallback;
   1119          
   1120            /* Start UART */
   1121            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   1122          }
   1123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1124          uint8 rxIndex;
   \                     rxIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1125          uint8 rxData[34];
   \                     rxData:
   \   000000                DS 34
   \   000022                REQUIRE __INIT_XDATA_Z
   1126          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          void zclOpenEvse_UARTCallback(uint8 port, uint8 event)
   \                     zclOpenEvse_UARTCallback:
   1128          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8005         SJMP    ??zclOpenEvse_UARTCallback_0
   1129            uint8 ch;
   1130            while (Hal_UART_RxBufLen(port))
   1131            {
   1132              HalUARTRead (port, &ch, 1);
   1133              switch (ch)
   1134              {
   1135              case '$':
   1136                rxIndex = 0;
   \                     ??zclOpenEvse_UARTCallback_1:
   \   00000E   90....       MOV     DPTR,#rxIndex
   \   000011   E4           CLR     A
   \                     ??zclOpenEvse_UARTCallback_2:
   \   000012   F0           MOVX    @DPTR,A
   1137                break;
   \                     ??zclOpenEvse_UARTCallback_0:
   \   000013                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000013   EE           MOV     A,R6
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   EA           MOV     A,R2
   \   00001B   45..         ORL     A,?V1
   \   00001D   6056         JZ      ??zclOpenEvse_UARTCallback_3
   \   00001F                ; Setup parameters for call to function HalUARTRead
   \   00001F   7C01         MOV     R4,#0x1
   \   000021   7D00         MOV     R5,#0x0
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00002C   90....       MOV     DPTR,#rxIndex
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   74..         MOV     A,#rxData & 0xff
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   E4           CLR     A
   \   000036   34..         ADDC    A,#(rxData >> 8) & 0xff
   \   000038   F9           MOV     R1,A
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   24F3         ADD     A,#-0xd
   \   000042   6006         JZ      ??zclOpenEvse_UARTCallback_4
   \   000044   24E9         ADD     A,#-0x17
   \   000046   60C6         JZ      ??zclOpenEvse_UARTCallback_1
   \   000048   800F         SJMP    ??zclOpenEvse_UARTCallback_5
   1138              case '\r':
   1139                rxData[rxIndex] = 0;
   \                     ??zclOpenEvse_UARTCallback_4:
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   1140                zclOpenEvse_UARTParse((char *)rxData);
   \   000050                ; Setup parameters for call to function zclOpenEvse_UARTParse
   \   000050   7A..         MOV     R2,#rxData & 0xff
   \   000052   7B..         MOV     R3,#(rxData >> 8) & 0xff
   \   000054   12....       LCALL   `??zclOpenEvse_UARTParse::?relay`; Banked call to: zclOpenEvse_UARTParse
   1141                break;
   \   000057   80BA         SJMP    ??zclOpenEvse_UARTCallback_0
   1142              default:
   1143                if (rxIndex >= 64) break;
   \                     ??zclOpenEvse_UARTCallback_5:
   \   000059   90....       MOV     DPTR,#rxIndex
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   C3           CLR     C
   \   00005E   9440         SUBB    A,#0x40
   \   000060   50B1         JNC     ??zclOpenEvse_UARTCallback_0
   1144                rxData[rxIndex++] = ch;
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   90....       MOV     DPTR,#rxIndex
   \   000071   E0           MOVX    A,@DPTR
   \   000072   04           INC     A
   \   000073   809D         SJMP    ??zclOpenEvse_UARTCallback_2
   1145                break;
   1146              }
   1147            }
   1148          }
   \                     ??zclOpenEvse_UARTCallback_3:
   \   000075   7401         MOV     A,#0x1
   \   000077   02....       LJMP    ?Subroutine0 & 0xFFFF
   1149          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1150          void zclOpenEvse_UARTParse(char * rxData)
   \                     zclOpenEvse_UARTParse:
   1151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1152            if (!strncmp((const char *)rxData, evseCode[EVSE_CMD_STATE], 2)) // Asynchronous state update
   \   00000E   EA           MOV     A,R2
   \   00000F   2403         ADD     A,#0x3
   \   000011   FE           MOV     R6,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V1
   \   000015   FF           MOV     R7,A
   \   000016                ; Setup parameters for call to function strncmp
   \   000016   75..02       MOV     ?V2,#0x2
   \   000019   75..00       MOV     ?V3,#0x0
   \   00001C   78..         MOV     R0,#?V2
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   90....       MOV     DPTR,#evseCode + 2
   \   000024   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000027   12....       LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   8B..         MOV     ?V3,R3
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V3
   \   000034   704A         JNZ     ??zclOpenEvse_UARTParse_0
   1153            {
   1154              char * valid = NULL;
   \   000036   12....       LCALL   ?Subroutine15 & 0xFFFF
   1155              uint8 state = strtol((const char *)&rxData[3], &valid, 16);
   \                     ??CrossCallReturnLabel_29:
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?XSTACK_DISP102_8
   \   000041   EE           MOV     A,R6
   \   000042   FA           MOV     R2,A
   \   000043   EF           MOV     A,R7
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??strtol::?relay`   ; Banked call to: strtol
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   8A..         MOV     ?V0,R2
   1156              if (valid)
   \   00004F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000052   6029         JZ      ??zclOpenEvse_UARTParse_1
   1157              {
   1158                if (zclOpenEvse_backlight == LIGHT_OFF) // Turn backlight back off after change of state
   \   000054   90....       MOV     DPTR,#zclOpenEvse_backlight
   \   000057   E0           MOVX    A,@DPTR
   \   000058   7017         JNZ     ??zclOpenEvse_UARTParse_2
   1159                {
   1160                  osal_start_timerEx( zclOpenEvse_TaskID, OPENEVSE_BACKLIGHT_OFF_EVT, 5000 );
   \   00005A                ; Setup parameters for call to function osal_start_timerEx
   \   00005A   90....       MOV     DPTR,#__Constant_1388
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000060   7A08         MOV     R2,#0x8
   \   000062   7B00         MOV     R3,#0x0
   \   000064   90....       MOV     DPTR,#zclOpenEvse_TaskID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006C   7404         MOV     A,#0x4
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   1161                }
   1162                zclOpenEvse_state = state;
   \                     ??zclOpenEvse_UARTParse_2:
   \   000071   90....       MOV     DPTR,#zclOpenEvse_state
   \   000074   E5..         MOV     A,?V0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
   1163                zclOpenEvse_sendState();
   \   00007A                ; Setup parameters for call to function zclOpenEvse_sendState
   \   00007A   12....       LCALL   `??zclOpenEvse_sendState::?relay`; Banked call to: zclOpenEvse_sendState
   1164              }
   1165              return;
   \                     ??zclOpenEvse_UARTParse_1:
   \   00007D   02....       LJMP    ??zclOpenEvse_UARTParse_3 & 0xFFFF
   1166            }
   1167            else if (!strncmp((const char *)rxData, evseCode[EVSE_CMD_WIFI], 2)) // Asynchronous wifi update
   \                     ??zclOpenEvse_UARTParse_0:
   \   000080                ; Setup parameters for call to function strncmp
   \   000080   75..00       MOV     ?V3,#0x0
   \   000083   78..         MOV     R0,#?V2
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   90....       MOV     DPTR,#evseCode + 4
   \   00008B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00008E   AA..         MOV     R2,?V0
   \   000090   AB..         MOV     R3,?V1
   \   000092   12....       LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
   \   000095   7402         MOV     A,#0x2
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009A   8B..         MOV     ?V3,R3
   \   00009C   EA           MOV     A,R2
   \   00009D   45..         ORL     A,?V3
   \   00009F   701C         JNZ     ??zclOpenEvse_UARTParse_4
   1168            {
   1169              zclOpenEvse_zigbeeReset();
   \   0000A1   7E79         MOV     R6,#0x79
   \   0000A3   7F00         MOV     R7,#0x0
   \                     ??zclOpenEvse_UARTParse_5:
   \   0000A5                ; Setup parameters for call to function HalFlashErase
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
   \   0000AA   0E           INC     R6
   \   0000AB   EE           MOV     A,R6
   \   0000AC   7001         JNZ     ??zclOpenEvse_UARTParse_6
   \   0000AE   0F           INC     R7
   \                     ??zclOpenEvse_UARTParse_6:
   \   0000AF   C3           CLR     C
   \   0000B0   9480         SUBB    A,#-0x80
   \   0000B2   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000B5   40EE         JC      ??zclOpenEvse_UARTParse_5
   \   0000B7                ; Setup parameters for call to function Onboard_soft_reset
   \   0000B7   12....       LCALL   Onboard_soft_reset & 0xFFFF
   1170              return;
   1171            } else if (strncmp((const char *)rxData, "OK", 2)) // If not OK resend
   \   0000BA   02....       LJMP    ??zclOpenEvse_UARTParse_3 & 0xFFFF
   \                     ??zclOpenEvse_UARTParse_4:
   \   0000BD                ; Setup parameters for call to function strncmp
   \   0000BD   75..00       MOV     ?V3,#0x0
   \   0000C0   78..         MOV     R0,#?V2
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   0000C7   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   0000C9   AA..         MOV     R2,?V0
   \   0000CB   AB..         MOV     R3,?V1
   \   0000CD   12....       LCALL   `??strncmp::?relay`  ; Banked call to: strncmp
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   8B..         MOV     ?V1,R3
   \   0000D7   EA           MOV     A,R2
   \   0000D8   45..         ORL     A,?V1
   \   0000DA   6003         JZ      $+5
   \   0000DC   02....       LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
   1172            {
   1173              zclOpenEvse_EVSEResend();
   \   0000DF                ; Setup parameters for call to function zclOpenEvse_EVSEResend
   1174              return;
   1175            }
   1176            
   1177            switch (zclOpenEvse_evseCmd)
   \   0000DF   75....       MOV     ?V0,#`?<Constant " ">` & 0xff
   \   0000E2   75....       MOV     ?V1,#(`?<Constant " ">` >> 8) & 0xff
   \   0000E5   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   24F8         ADD     A,#-0x8
   \   0000EB   601B         JZ      ??zclOpenEvse_UARTParse_8
   \   0000ED   14           DEC     A
   \   0000EE   7003         JNZ     $+5
   \   0000F0   02....       LJMP    ??zclOpenEvse_UARTParse_9 & 0xFFFF
   \   0000F3   14           DEC     A
   \   0000F4   7003         JNZ     $+5
   \   0000F6   02....       LJMP    ??zclOpenEvse_UARTParse_10 & 0xFFFF
   \   0000F9   14           DEC     A
   \   0000FA   7003         JNZ     $+5
   \   0000FC   02....       LJMP    ??zclOpenEvse_UARTParse_11 & 0xFFFF
   \   0000FF   14           DEC     A
   \   000100   7003         JNZ     $+5
   \   000102   02....       LJMP    ??zclOpenEvse_UARTParse_12 & 0xFFFF
   \   000105   02....       LJMP    ??zclOpenEvse_UARTParse_13 & 0xFFFF
   1178            {
   1179            case EVSE_CMD_GETPOWER:
   1180              {
   1181                char * amps = strtok(&rxData[3], " ");
   \                     ??zclOpenEvse_UARTParse_8:
   \   000108                ; Setup parameters for call to function strtok
   \   000108   AC..         MOV     R4,?V0
   \   00010A   AD..         MOV     R5,?V1
   \   00010C   EE           MOV     A,R6
   \   00010D   FA           MOV     R2,A
   \   00010E   EF           MOV     A,R7
   \   00010F   FB           MOV     R3,A
   \   000110   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   000113   8A..         MOV     ?V2,R2
   \   000115   8B..         MOV     ?V3,R3
   \   000117   AE..         MOV     R6,?V2
   \   000119   AF..         MOV     R7,?V3
   1182                char * volts = strtok(NULL, " ");
   \   00011B                ; Setup parameters for call to function strtok
   \   00011B   AC..         MOV     R4,?V0
   \   00011D   AD..         MOV     R5,?V1
   \   00011F   7A00         MOV     R2,#0x0
   \   000121   7B00         MOV     R3,#0x0
   \   000123   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   000126   8A..         MOV     ?V0,R2
   \   000128   8B..         MOV     ?V1,R3
   1183                if (!amps || !volts)
   \   00012A   EE           MOV     A,R6
   \   00012B   4F           ORL     A,R7
   \   00012C   6005         JZ      ??zclOpenEvse_UARTParse_14
   \   00012E   EA           MOV     A,R2
   \   00012F   45..         ORL     A,?V1
   \   000131   7003         JNZ     ??zclOpenEvse_UARTParse_15
   1184                {
   1185                  zclOpenEvse_EVSEResend();
   \                     ??zclOpenEvse_UARTParse_14:
   \   000133                ; Setup parameters for call to function zclOpenEvse_EVSEResend
   \   000133   02....       LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
   1186                  return;
   1187                }
   1188                if (atol(volts) != -1)
   \                     ??zclOpenEvse_UARTParse_15:
   \   000136   90....       MOV     DPTR,#__Constant_ffffffff
   \   000139   C082         PUSH    DPL
   \   00013B   C083         PUSH    DPH
   \   00013D                ; Setup parameters for call to function atol
   \   00013D   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   000140   8A..         MOV     ?V4,R2
   \   000142   8B..         MOV     ?V5,R3
   \   000144   8C..         MOV     ?V6,R4
   \   000146   8D..         MOV     ?V7,R5
   \   000148   D083         POP     DPH
   \   00014A   D082         POP     DPL
   \   00014C   78..         MOV     R0,#?V4
   \   00014E   12....       LCALL   ?L_EQ_X
   \   000151   6033         JZ      ??zclOpenEvse_UARTParse_16
   1189                {
   1190                  zclOpenEvse_voltsScaled = (uint16) (atol(volts) * 0.01);
   \   000153                ; Setup parameters for call to function atol
   \   000153   AA..         MOV     R2,?V0
   \   000155   AB..         MOV     R3,?V1
   \   000157   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   00015A   8A..         MOV     ?V0,R2
   \   00015C   8B..         MOV     ?V1,R3
   \   00015E   8C..         MOV     ?V2,R4
   \   000160   8D..         MOV     ?V3,R5
   \   000162   78..         MOV     R0,#?V0
   \   000164   12....       LCALL   ?L_TO_FLT
   \   000167   90....       MOV     DPTR,#__Constant_3c23d70a
   \   00016A   78..         MOV     R0,#?V4
   \   00016C   12....       LCALL   ?L_MOV_X
   \   00016F   78..         MOV     R0,#?V0
   \   000171   79..         MOV     R1,#?V4
   \   000173   12....       LCALL   ?FLT_MUL
   \   000176   78..         MOV     R0,#?V0
   \   000178   12....       LCALL   ?FLT_TO_L
   \   00017B   90....       MOV     DPTR,#zclOpenEvse_voltsScaled
   \   00017E   E5..         MOV     A,?V0
   \   000180   F0           MOVX    @DPTR,A
   \   000181   A3           INC     DPTR
   \   000182   E5..         MOV     A,?V1
   \   000184   8019         SJMP    ??zclOpenEvse_UARTParse_17
   1191                }
   1192                else
   1193                {
   1194                  zclOpenEvse_voltsScaled = (zclOpenEvse_powerLevel == 2) ? OPENEVSE_L2_VOLTS : OPENEVSE_L1_VOLTS;
   \                     ??zclOpenEvse_UARTParse_16:
   \   000186   90....       MOV     DPTR,#zclOpenEvse_powerLevel
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   6402         XRL     A,#0x2
   \   00018C   90....       MOV     DPTR,#zclOpenEvse_voltsScaled
   \   00018F   7008         JNZ     ??zclOpenEvse_UARTParse_18
   \   000191   7460         MOV     A,#0x60
   \   000193   F0           MOVX    @DPTR,A
   \   000194   A3           INC     DPTR
   \   000195   7409         MOV     A,#0x9
   \   000197   8006         SJMP    ??zclOpenEvse_UARTParse_17
   \                     ??zclOpenEvse_UARTParse_18:
   \   000199   74B0         MOV     A,#-0x50
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   7404         MOV     A,#0x4
   \                     ??zclOpenEvse_UARTParse_17:
   \   00019F   F0           MOVX    @DPTR,A
   1195                }
   1196          
   1197                if (atol(amps) != -1)
   \   0001A0   90....       MOV     DPTR,#__Constant_ffffffff
   \   0001A3   C082         PUSH    DPL
   \   0001A5   C083         PUSH    DPH
   \   0001A7                ; Setup parameters for call to function atol
   \   0001A7   EE           MOV     A,R6
   \   0001A8   FA           MOV     R2,A
   \   0001A9   EF           MOV     A,R7
   \   0001AA   FB           MOV     R3,A
   \   0001AB   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   0001AE   8A..         MOV     ?V0,R2
   \   0001B0   8B..         MOV     ?V1,R3
   \   0001B2   8C..         MOV     ?V2,R4
   \   0001B4   8D..         MOV     ?V3,R5
   \   0001B6   D083         POP     DPH
   \   0001B8   D082         POP     DPL
   \   0001BA   78..         MOV     R0,#?V0
   \   0001BC   12....       LCALL   ?L_EQ_X
   \   0001BF   6032         JZ      ??zclOpenEvse_UARTParse_19
   1198                {
   1199                  zclOpenEvse_ampsScaled = (uint16) (atol(amps) * 0.01);
   \   0001C1                ; Setup parameters for call to function atol
   \   0001C1   EE           MOV     A,R6
   \   0001C2   FA           MOV     R2,A
   \   0001C3   EF           MOV     A,R7
   \   0001C4   FB           MOV     R3,A
   \   0001C5   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   0001C8   8A..         MOV     ?V0,R2
   \   0001CA   8B..         MOV     ?V1,R3
   \   0001CC   8C..         MOV     ?V2,R4
   \   0001CE   8D..         MOV     ?V3,R5
   \   0001D0   78..         MOV     R0,#?V0
   \   0001D2   12....       LCALL   ?L_TO_FLT
   \   0001D5   90....       MOV     DPTR,#__Constant_3c23d70a
   \   0001D8   78..         MOV     R0,#?V4
   \   0001DA   12....       LCALL   ?L_MOV_X
   \   0001DD   78..         MOV     R0,#?V0
   \   0001DF   79..         MOV     R1,#?V4
   \   0001E1   12....       LCALL   ?FLT_MUL
   \   0001E4   78..         MOV     R0,#?V0
   \   0001E6   12....       LCALL   ?FLT_TO_L
   \   0001E9   90....       MOV     DPTR,#zclOpenEvse_ampsScaled
   \   0001EC   E5..         MOV     A,?V0
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF   A3           INC     DPTR
   \   0001F0   E5..         MOV     A,?V1
   \   0001F2   F0           MOVX    @DPTR,A
   1200                }
   1201                zclOpenEvse_wattsScaled = (int16) ((float)zclOpenEvse_voltsScaled * (float)zclOpenEvse_ampsScaled * 0.001);
   \                     ??zclOpenEvse_UARTParse_19:
   \   0001F3   90....       MOV     DPTR,#zclOpenEvse_voltsScaled
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   F5..         MOV     ?V0,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   F5..         MOV     ?V1,A
   \   0001FD   E4           CLR     A
   \   0001FE   F5..         MOV     ?V2,A
   \   000200   F5..         MOV     ?V3,A
   \   000202   78..         MOV     R0,#?V0
   \   000204   12....       LCALL   ?UL_TO_FLT
   \   000207   90....       MOV     DPTR,#zclOpenEvse_ampsScaled
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   F5..         MOV     ?V4,A
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F5..         MOV     ?V5,A
   \   000211   E4           CLR     A
   \   000212   F5..         MOV     ?V6,A
   \   000214   F5..         MOV     ?V7,A
   \   000216   78..         MOV     R0,#?V4
   \   000218   12....       LCALL   ?UL_TO_FLT
   \   00021B   78..         MOV     R0,#?V0
   \   00021D   79..         MOV     R1,#?V4
   \   00021F   12....       LCALL   ?FLT_MUL
   \   000222   90....       MOV     DPTR,#__Constant_3a83126f
   \   000225   78..         MOV     R0,#?V4
   \   000227   12....       LCALL   ?L_MOV_X
   \   00022A   78..         MOV     R0,#?V0
   \   00022C   79..         MOV     R1,#?V4
   \   00022E   12....       LCALL   ?FLT_MUL
   \   000231   78..         MOV     R0,#?V0
   \   000233   12....       LCALL   ?FLT_TO_L
   \   000236   90....       MOV     DPTR,#zclOpenEvse_wattsScaled
   \   000239   8068         SJMP    ??zclOpenEvse_UARTParse_20
   1202              }
   1203              break;
   1204            case EVSE_CMD_GETTEMP:
   1205              {
   1206                char * ds3231 = strtok(&rxData[3], " ");
   \                     ??zclOpenEvse_UARTParse_9:
   \   00023B                ; Setup parameters for call to function strtok
   \   00023B   AC..         MOV     R4,?V0
   \   00023D   AD..         MOV     R5,?V1
   \   00023F   EE           MOV     A,R6
   \   000240   FA           MOV     R2,A
   \   000241   EF           MOV     A,R7
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   000246   8A..         MOV     ?V2,R2
   \   000248   8B..         MOV     ?V3,R3
   \   00024A   AE..         MOV     R6,?V2
   \   00024C   AF..         MOV     R7,?V3
   1207                char * mcp9808 = strtok(NULL, " ");
   \   00024E                ; Setup parameters for call to function strtok
   \   00024E   AC..         MOV     R4,?V0
   \   000250   AD..         MOV     R5,?V1
   \   000252   7A00         MOV     R2,#0x0
   \   000254   7B00         MOV     R3,#0x0
   \   000256   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   000259   8A..         MOV     ?V2,R2
   \   00025B   8B..         MOV     ?V3,R3
   1208                char * tmp007 = strtok(NULL, " ");
   \   00025D                ; Setup parameters for call to function strtok
   \   00025D   AC..         MOV     R4,?V0
   \   00025F   AD..         MOV     R5,?V1
   \   000261   7A00         MOV     R2,#0x0
   \   000263   7B00         MOV     R3,#0x0
   \   000265   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   000268   8B..         MOV     ?V1,R3
   \   00026A   A9..         MOV     R1,?V1
   1209                if (!ds3231 || !mcp9808 || !tmp007)
   \   00026C   EE           MOV     A,R6
   \   00026D   4F           ORL     A,R7
   \   00026E   600A         JZ      ??zclOpenEvse_UARTParse_21
   \   000270   E5..         MOV     A,?V2
   \   000272   45..         ORL     A,?V3
   \   000274   6004         JZ      ??zclOpenEvse_UARTParse_21
   \   000276   EA           MOV     A,R2
   \   000277   49           ORL     A,R1
   \   000278   7003         JNZ     ??zclOpenEvse_UARTParse_22
   1210                {
   1211                  zclOpenEvse_EVSEResend();
   \                     ??zclOpenEvse_UARTParse_21:
   \   00027A                ; Setup parameters for call to function zclOpenEvse_EVSEResend
   \   00027A   02....       LJMP    ??zclOpenEvse_UARTParse_7 & 0xFFFF
   1212                  return;
   1213                }
   1214                zclOpenEvse_temperature = (int16) (atoi(ds3231) * (1.0 / 10)); // Tenths of degree C to degrees C
   \                     ??zclOpenEvse_UARTParse_22:
   \   00027D                ; Setup parameters for call to function atoi
   \   00027D   EE           MOV     A,R6
   \   00027E   FA           MOV     R2,A
   \   00027F   EF           MOV     A,R7
   \   000280   FB           MOV     R3,A
   \   000281   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   000284   12....       LCALL   ?Subroutine24 & 0xFFFF
   1215              }
   \                     ??CrossCallReturnLabel_55:
   \   000287   78..         MOV     R0,#?V0
   \   000289   12....       LCALL   ?L_TO_FLT
   \   00028C   90....       MOV     DPTR,#__Constant_3dcccccd
   \   00028F   78..         MOV     R0,#?V4
   \   000291   12....       LCALL   ?L_MOV_X
   \   000294   78..         MOV     R0,#?V0
   \   000296   79..         MOV     R1,#?V4
   \   000298   12....       LCALL   ?FLT_MUL
   \   00029B   78..         MOV     R0,#?V0
   \   00029D   12....       LCALL   ?FLT_TO_L
   \   0002A0   90....       MOV     DPTR,#zclOpenEvse_temperature
   \                     ??zclOpenEvse_UARTParse_20:
   \   0002A3   E5..         MOV     A,?V0
   \   0002A5   F0           MOVX    @DPTR,A
   \   0002A6   A3           INC     DPTR
   \   0002A7   E5..         MOV     A,?V1
   \   0002A9   02....       LJMP    ??zclOpenEvse_UARTParse_23 & 0xFFFF
   1216              break;
   1217            case EVSE_CMD_GETENERGY:
   1218              {
   1219                char * wattSecs = strtok(&rxData[3], " ");
   \                     ??zclOpenEvse_UARTParse_10:
   \   0002AC                ; Setup parameters for call to function strtok
   \   0002AC   AC..         MOV     R4,?V0
   \   0002AE   AD..         MOV     R5,?V1
   \   0002B0   EE           MOV     A,R6
   \   0002B1   FA           MOV     R2,A
   \   0002B2   EF           MOV     A,R7
   \   0002B3   FB           MOV     R3,A
   \   0002B4   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   0002B7   8A..         MOV     ?V2,R2
   \   0002B9   8B..         MOV     ?V3,R3
   \   0002BB   AE..         MOV     R6,?V2
   \   0002BD   AF..         MOV     R7,?V3
   1220                char * wattAcc = strtok(NULL, " ");
   \   0002BF                ; Setup parameters for call to function strtok
   \   0002BF   AC..         MOV     R4,?V0
   \   0002C1   AD..         MOV     R5,?V1
   \   0002C3   7A00         MOV     R2,#0x0
   \   0002C5   7B00         MOV     R3,#0x0
   \   0002C7   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   \   0002CA   8A..         MOV     ?V0,R2
   \   0002CC   8B..         MOV     ?V1,R3
   1221                if (!wattSecs || !wattAcc)
   \   0002CE   EE           MOV     A,R6
   \   0002CF   4F           ORL     A,R7
   \   0002D0   607A         JZ      ??zclOpenEvse_UARTParse_7
   \   0002D2   EA           MOV     A,R2
   \   0002D3   45..         ORL     A,?V1
   \   0002D5   7002         JNZ     ??zclOpenEvse_UARTParse_24
   1222                {
   1223                  zclOpenEvse_EVSEResend();
   \                     ??zclOpenEvse_UARTParse_25:
   \   0002D7                ; Setup parameters for call to function zclOpenEvse_EVSEResend
   \   0002D7   8073         SJMP    ??zclOpenEvse_UARTParse_7
   1224                  return;
   1225                }
   1226                zclOpenEvse_energyDemand = (uint32) (atol(wattSecs) * (1.0 / 3600)); // Convert watt-seconds to watt-hours
   \                     ??zclOpenEvse_UARTParse_24:
   \   0002D9                ; Setup parameters for call to function atol
   \   0002D9   EE           MOV     A,R6
   \   0002DA   FA           MOV     R2,A
   \   0002DB   EF           MOV     A,R7
   \   0002DC   FB           MOV     R3,A
   \   0002DD   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   0002E0   8A..         MOV     ?V4,R2
   \   0002E2   8B..         MOV     ?V5,R3
   \   0002E4   8C..         MOV     ?V6,R4
   \   0002E6   8D..         MOV     ?V7,R5
   \   0002E8   78..         MOV     R0,#?V4
   \   0002EA   12....       LCALL   ?L_TO_FLT
   \   0002ED   90....       MOV     DPTR,#__Constant_3991a2b4
   \   0002F0   78..         MOV     R0,#?V8
   \   0002F2   12....       LCALL   ?L_MOV_X
   \   0002F5   78..         MOV     R0,#?V4
   \   0002F7   79..         MOV     R1,#?V8
   \   0002F9   12....       LCALL   ?FLT_MUL
   \   0002FC   78..         MOV     R0,#?V4
   \   0002FE   12....       LCALL   ?FLT_TO_UL
   \   000301   90....       MOV     DPTR,#zclOpenEvse_energyDemand
   \   000304   78..         MOV     R0,#?V4
   \   000306   12....       LCALL   ?L_MOV_TO_X
   1227                *((uint32 *)&zclOpenEvse_energySum) = (uint32) atol(wattAcc); // Already in watt-hours
   \   000309                ; Setup parameters for call to function atol
   \   000309   AA..         MOV     R2,?V0
   \   00030B   AB..         MOV     R3,?V1
   \   00030D   12....       LCALL   `??atol::?relay`     ; Banked call to: atol
   \   000310   90....       MOV     DPTR,#zclOpenEvse_energySum
   \   000313   12....       LCALL   ?XSTORE_R2345
   1228              }
   1229              break;
   \   000316   8041         SJMP    ??zclOpenEvse_UARTParse_13
   1230            case EVSE_CMD_GETSTATE:
   1231              {
   1232                char * valid = NULL;
   \                     ??zclOpenEvse_UARTParse_11:
   \   000318   12....       LCALL   ?Subroutine15 & 0xFFFF
   1233                uint8 state = strtol((const char *)&rxData[3], &valid, 16);
   \                     ??CrossCallReturnLabel_30:
   \   00031B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00031E   7402         MOV     A,#0x2
   \   000320   12....       LCALL   ?XSTACK_DISP102_8
   \   000323   EE           MOV     A,R6
   \   000324   FA           MOV     R2,A
   \   000325   EF           MOV     A,R7
   \   000326   FB           MOV     R3,A
   \   000327   12....       LCALL   `??strtol::?relay`   ; Banked call to: strtol
   \   00032A   7402         MOV     A,#0x2
   \   00032C   12....       LCALL   ?DEALLOC_XSTACK8
   1234                if (valid)
   \   00032F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000332   6025         JZ      ??zclOpenEvse_UARTParse_13
   1235                {
   1236                  zclOpenEvse_state = state;
   \   000334   90....       MOV     DPTR,#zclOpenEvse_state
   \   000337   EA           MOV     A,R2
   \   000338   F0           MOVX    @DPTR,A
   \   000339   A3           INC     DPTR
   \   00033A   E4           CLR     A
   \   00033B   801B         SJMP    ??zclOpenEvse_UARTParse_23
   1237                }
   1238              }
   1239              break;
   1240            case EVSE_CMD_GETLEVEL:
   1241              {
   1242                char * level = strtok(&rxData[3], " ");
   \                     ??zclOpenEvse_UARTParse_12:
   \   00033D                ; Setup parameters for call to function strtok
   \   00033D   AC..         MOV     R4,?V0
   \   00033F   AD..         MOV     R5,?V1
   \   000341   EE           MOV     A,R6
   \   000342   FA           MOV     R2,A
   \   000343   EF           MOV     A,R7
   \   000344   FB           MOV     R3,A
   \   000345   12....       LCALL   `??strtok::?relay`   ; Banked call to: strtok
   1243                if (!level)
   \   000348   EA           MOV     A,R2
   \   000349   4B           ORL     A,R3
   \   00034A   7005         JNZ     ??zclOpenEvse_UARTParse_26
   1244                {
   1245                  zclOpenEvse_EVSEResend();
   \   00034C                ; Setup parameters for call to function zclOpenEvse_EVSEResend
   \                     ??zclOpenEvse_UARTParse_7:
   \   00034C   12....       LCALL   `??zclOpenEvse_EVSEResend::?relay`; Banked call to: zclOpenEvse_EVSEResend
   1246                  return;
   \   00034F   8011         SJMP    ??zclOpenEvse_UARTParse_3
   1247                }
   1248                
   1249                zclOpenEvse_powerLevel = atoi(level);
   \                     ??zclOpenEvse_UARTParse_26:
   \   000351                ; Setup parameters for call to function atoi
   \   000351   12....       LCALL   `??atoi::?relay`     ; Banked call to: atoi
   \   000354   EA           MOV     A,R2
   \   000355   90....       MOV     DPTR,#zclOpenEvse_powerLevel
   \                     ??zclOpenEvse_UARTParse_23:
   \   000358   F0           MOVX    @DPTR,A
   1250              }
   1251              break;
   1252              
   1253            }
   1254          
   1255            zclOpenEvse_evseCmd = EVSE_CMD_NONE;
   \                     ??zclOpenEvse_UARTParse_13:
   \   000359   90....       MOV     DPTR,#zclOpenEvse_evseCmd
   \   00035C   E4           CLR     A
   \   00035D   F0           MOVX    @DPTR,A
   1256            zclOpenEvse_evseResendCtr = 0;
   \   00035E   90....       MOV     DPTR,#zclOpenEvse_evseResendCtr
   \   000361   F0           MOVX    @DPTR,A
   1257          }
   \                     ??zclOpenEvse_UARTParse_3:
   \   000362   7402         MOV     A,#0x2
   \   000364   12....       LCALL   ?DEALLOC_XSTACK8
   \   000367   7F0C         MOV     R7,#0xc
   \   000369   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function strtol
   \   00000A                ; Setup parameters for call to function strtol
   \   00000A   75..10       MOV     ?V0,#0x10
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   22           RET
   1258          
   1259          // converts 4-bit nibble to ascii hex

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1260          uint8 zclOpenEvse_nibbletohex(uint8 value)
   \                     zclOpenEvse_nibbletohex:
   1261          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   1262              if (value >= 10) return value - 10 + 'A';
   \   000001   C3           CLR     C
   \   000002   940A         SUBB    A,#0xa
   \   000004   4004         JC      ??zclOpenEvse_nibbletohex_0
   \   000006   7437         MOV     A,#0x37
   \   000008   8002         SJMP    ??zclOpenEvse_nibbletohex_1
   1263              return value + '0';
   \                     ??zclOpenEvse_nibbletohex_0:
   \   00000A   7430         MOV     A,#0x30
   \                     ??zclOpenEvse_nibbletohex_1:
   \   00000C   29           ADD     A,R1
   \   00000D   F9           MOV     R1,A
   \   00000E   02....       LJMP    ?BRET
   1264          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for evseCode>`:
   \   000000   ....         DW `?<Constant "">`
   \   000002   ....         DW `?<Constant "ST">`
   \   000004   ....         DW `?<Constant "WF">`
   \   000006   ....         DW `?<Constant "FS">`
   \   000008   ....         DW `?<Constant "FE">`
   \   00000A   ....         DW `?<Constant "FB 0">`
   \   00000C   ....         DW `?<Constant "S0 1">`
   \   00000E   ....         DW `?<Constant "FB 6">`
   \   000010   ....         DW `?<Constant "GG">`
   \   000012   ....         DW `?<Constant "GP">`
   \   000014   ....         DW `?<Constant "GU">`
   \   000016   ....         DW `?<Constant "GS">`
   \   000018   ....         DW `?<Constant "GL">`
   \   00001A   ....         DW `?<Constant "SH">`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   0600         DW 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportPowerMin>`:
   \   000000   D0070000     DD 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportPowerMax>`:
   \   000000   60EA0000     DD 60000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportTempMax>`:
   \   000000   C0D40100     DD 120000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportEnergyMax>`:
   \   000000   20BF0200     DD 180000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportPowerChang`:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportPowerChang_1`:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_reportPowerChang_2`:
   \   000000   14000000     DD 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclOpenEvse_CmdCallbacks>`:
   \   000000   ....         DW `??zclOpenEvse_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   ....         DW `??zclOpenEvse_OnOffCB::?relay`
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for firstTime>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for string>`:
   \   000000   2400         DB "$"
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000012   000000       DB 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_sendPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_sendPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_sendTemp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_sendTemp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_sendEnergy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_sendEnergy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_sendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_sendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_EVSEWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_EVSEWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_EVSEResend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_EVSEResend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_UARTCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_UARTCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_UARTParse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_UARTParse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclOpenEvse_nibbletohex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclOpenEvse_nibbletohex

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ST">`:
   \   000000   535400       DB "ST"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WF">`:
   \   000000   574600       DB "WF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FS">`:
   \   000000   465300       DB "FS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FE">`:
   \   000000   464500       DB "FE"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FB 0">`:
   \   000000   46422030     DB "FB 0"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "S0 1">`:
   \   000000   53302031     DB "S0 1"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FB 6">`:
   \   000000   46422036     DB "FB 6"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GG">`:
   \   000000   474700       DB "GG"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GP">`:
   \   000000   475000       DB "GP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GU">`:
   \   000000   475500       DB "GU"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GS">`:
   \   000000   475300       DB "GS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GL">`:
   \   000000   474C00       DB "GL"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SH">`:
   \   000000   534800       DB "SH"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " %ld">`:
   \   000000   20256C64     DB " %ld"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffff:
   \   000000   FFFFFF00     DD 16777215

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c23d70a:
   \   000000   0AD7233C     DD 3C23D70AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a83126f:
   \   000000   6F12833A     DD 3A83126FH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3dcccccd:
   \   000000   CDCCCC3D     DD 3DCCCCCDH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3991a2b4:
   \   000000   B4A29139     DD 3991A2B4H
   1265          
   1266          // returns value as 2 ascii characters in a 16-bit int
   1267          uint16 zclOpenEvse_u8tohex(uint8 value)
   1268          {
   1269              uint16 hexdigits;
   1270          
   1271              uint8 lodigit = (value >> 4);
   1272              uint8 hidigit = (value & 0x0F);
   1273              hexdigits = zclOpenEvse_nibbletohex(lodigit);
   1274              hexdigits |= (zclOpenEvse_nibbletohex(hidigit) << 8);
   1275          
   1276              return hexdigits;
   1277          }
   1278          /****************************************************************************
   1279          ****************************************************************************/
   1280          
   1281          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      5   zclOpenEvse_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zgWriteStartupOptions
      2     22   zclOpenEvse_EVSEResend
        2      0   -> zclOpenEvse_EVSEWriteCmd
      2     40   zclOpenEvse_EVSEWriteCmd
        0     18   -> HalUARTWrite
        0     22   -> sprintf
        0     18   -> strcpy
        0     18   -> strlen
        2     18   -> strlen
        0     18   -> zclOpenEvse_nibbletohex
      0     43   zclOpenEvse_Init
        0     39   -> HalUARTOpen
        0     39   -> osal_mem_alloc
        0     41   -> osal_nv_item_init
        0     43   -> osal_nv_read
        0     43   -> osal_start_timerEx
        0     39   -> zclGeneral_RegisterCmdCallbacks
        0     39   -> zclHA_Init
        0     39   -> zcl_registerAttrList
        0     39   -> zcl_registerForMsg
      0     14   zclOpenEvse_OnOffCB
        0     14   -> osal_nv_write
        0     10   -> zclOpenEvse_EVSEWriteCmd
        0     10   -> zcl_getRawAFMsg
      1     11   zclOpenEvse_UARTCallback
        0     11   -> HalUARTRead
        0     11   -> Hal_UART_RxBufLen
        0     11   -> zclOpenEvse_UARTParse
      2     37   zclOpenEvse_UARTParse
        0     22   -> HalFlashErase
        0     22   -> Onboard_soft_reset
        0     22   -> atoi
        0     22   -> atol
        2     22   -> atol
        0     26   -> osal_start_timerEx
        0     24   -> strncmp
        0     22   -> strtok
        0     24   -> strtol
        0     22   -> zclOpenEvse_EVSEResend
        0     22   -> zclOpenEvse_sendState
      2     18   zclOpenEvse_event_loop
        0     14   -> abs
        0     14   -> osal_mem_free
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_nv_write
        0     18   -> osal_start_timerEx
        0     14   -> zclOpenEvse_EVSEWriteCmd
        0     18   -> zclOpenEvse_EVSEWriteCmd
        0     14   -> zclOpenEvse_sendEnergy
        0     14   -> zclOpenEvse_sendPower
        0     14   -> zclOpenEvse_sendState
        0     14   -> zclOpenEvse_sendTemp
      0     18   zclOpenEvse_nibbletohex
      0     28   zclOpenEvse_sendEnergy
        0     13   -> osal_start_timerEx
        0     14   -> zcl_SendReportCmd
      0     28   zclOpenEvse_sendPower
        0     13   -> osal_start_timerEx
        0     14   -> zcl_SendReportCmd
      0     36   zclOpenEvse_sendState
        0     14   -> zcl_SendReportCmd
      0     28   zclOpenEvse_sendTemp
        0     13   -> osal_start_timerEx
        0     14   -> zcl_SendReportCmd


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
       5  ?<Constant " %ld">
       1  ?<Constant "">
       5  ?<Constant "FB 0">
       5  ?<Constant "FB 6">
       3  ?<Constant "FE">
       3  ?<Constant "FS">
       3  ?<Constant "GG">
       3  ?<Constant "GL">
       3  ?<Constant "GP">
       3  ?<Constant "GS">
       3  ?<Constant "GU">
       3  ?<Constant "OK">
       5  ?<Constant "S0 1">
       3  ?<Constant "SH">
       3  ?<Constant "ST">
       3  ?<Constant "WF">
       2  ?<Initializer for bindingInClusters>
      28  ?<Initializer for evseCode>
       1  ?<Initializer for firstTime>
      21  ?<Initializer for string>
      20  ?<Initializer for zclOpenEvse_CmdCallbacks>
       1  ?<Initializer for zclOpenEvse_NwkState>
       4  ?<Initializer for zclOpenEvse_reportEnergyMax>
       4  ?<Initializer for zclOpenEvse_reportPowerChang
       4  ?<Initializer for zclOpenEvse_reportPowerChang_1
       4  ?<Initializer for zclOpenEvse_reportPowerChang_2
       4  ?<Initializer for zclOpenEvse_reportPowerMax>
       4  ?<Initializer for zclOpenEvse_reportPowerMin>
       4  ?<Initializer for zclOpenEvse_reportTempMax>
       5  ??Subroutine36_0
       6  ??Subroutine37_0
       6  ??Subroutine38_0
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       5  ??Subroutine41_0
      19  ??Subroutine42_0
       3  ?Subroutine0
       7  ?Subroutine1
       8  ?Subroutine10
       8  ?Subroutine11
       8  ?Subroutine12
      14  ?Subroutine13
      11  ?Subroutine14
      18  ?Subroutine15
      15  ?Subroutine16
       6  ?Subroutine17
       9  ?Subroutine18
       7  ?Subroutine19
       2  ?Subroutine2
       4  ?Subroutine20
      20  ?Subroutine21
       9  ?Subroutine22
       6  ?Subroutine23
      13  ?Subroutine24
       9  ?Subroutine25
      11  ?Subroutine26
       6  ?Subroutine27
       6  ?Subroutine28
       4  ?Subroutine29
      36  ?Subroutine3
       6  ?Subroutine30
       3  ?Subroutine31
       8  ?Subroutine32
       4  ?Subroutine33
       9  ?Subroutine34
      10  ?Subroutine35
      34  ?Subroutine4
      11  ?Subroutine5
      16  ?Subroutine6
       8  ?Subroutine7
       8  ?Subroutine8
       8  ?Subroutine9
       4  __Constant_1388
       4  __Constant_1f4
       4  __Constant_3991a2b4
       4  __Constant_3a83126f
       4  __Constant_3c23d70a
       4  __Constant_3dcccccd
       4  __Constant_3e8
       4  __Constant_c8
       4  __Constant_ffffff
       4  __Constant_ffffffff
       2  bindingInClusters
      28  evseCode
       1  firstTime
       1  gPermitDuration
       1  identState
       2  lastAmps
       4  lastLimit
       2  lastVolts
       2  lastWatts
       1  pollNumber
      34  rxData
       1  rxIndex
       2  strLen
      21  string
      57  zclOpenEvse_BasicResetCB
       6  zclOpenEvse_BasicResetCB::?relay
      20  zclOpenEvse_CmdCallbacks
      12  zclOpenEvse_DstAddr
      35  zclOpenEvse_EVSEResend
       6  zclOpenEvse_EVSEResend::?relay
     325  zclOpenEvse_EVSEWriteCmd
       6  zclOpenEvse_EVSEWriteCmd::?relay
     750  zclOpenEvse_Init
       6  zclOpenEvse_Init::?relay
       1  zclOpenEvse_NwkState
     168  zclOpenEvse_OnOffCB
       6  zclOpenEvse_OnOffCB::?relay
       1  zclOpenEvse_TaskID
     122  zclOpenEvse_UARTCallback
       6  zclOpenEvse_UARTCallback::?relay
     876  zclOpenEvse_UARTParse
       6  zclOpenEvse_UARTParse::?relay
     896  zclOpenEvse_event_loop
       6  zclOpenEvse_event_loop::?relay
       1  zclOpenEvse_evseCmd
       1  zclOpenEvse_evseResendCtr
      17  zclOpenEvse_nibbletohex
       6  zclOpenEvse_nibbletohex::?relay
       1  zclOpenEvse_powerLevel
       2  zclOpenEvse_reportCmdAmps
       2  zclOpenEvse_reportCmdEnergyDemand
       2  zclOpenEvse_reportCmdEnergySum
       2  zclOpenEvse_reportCmdState
       2  zclOpenEvse_reportCmdTemp
       2  zclOpenEvse_reportCmdVolts
       2  zclOpenEvse_reportCmdWatts
       4  zclOpenEvse_reportEnergyMax
       4  zclOpenEvse_reportPowerChangedAmps
       4  zclOpenEvse_reportPowerChangedVolts
       4  zclOpenEvse_reportPowerChangedWatts
       4  zclOpenEvse_reportPowerMax
       4  zclOpenEvse_reportPowerMin
       4  zclOpenEvse_reportTempMax
     103  zclOpenEvse_sendEnergy
       6  zclOpenEvse_sendEnergy::?relay
     145  zclOpenEvse_sendPower
       6  zclOpenEvse_sendPower::?relay
      35  zclOpenEvse_sendState
       6  zclOpenEvse_sendState::?relay
      57  zclOpenEvse_sendTemp
       6  zclOpenEvse_sendTemp::?relay
       1  zclOpenEvse_seqNum

 
 3 999 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
   101 bytes in segment XDATA_I
   101 bytes in segment XDATA_ID
    96 bytes in segment XDATA_ROM_C
    81 bytes in segment XDATA_Z
 
   179 bytes of CODE     memory
    56 bytes of CONST    memory (+ 40 bytes shared)
 3 999 bytes of HUGECODE memory
   182 bytes of XDATA    memory

Errors: none
Warnings: none
